
STM32_EMB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efb8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  0800f258  0800f258  0001f258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f62c  0800f62c  0001f62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f634  0800f634  0001f634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f638  0800f638  0001f638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d8  24000000  0800f63c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001d8  0800f814  000201d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000238  0800f874  00020238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000960  24000298  0800f8d4  00020298  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000bf8  0800f8d4  00020bf8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202c6  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024021  00000000  00000000  00020309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a2a  00000000  00000000  0004432a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a78  00000000  00000000  00047d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014ac  00000000  00000000  000497d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003beb3  00000000  00000000  0004ac7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022848  00000000  00000000  00086b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00181587  00000000  00000000  000a9377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000083b4  00000000  00000000  0022a900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00232cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000298 	.word	0x24000298
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f240 	.word	0x0800f240

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400029c 	.word	0x2400029c
 80002dc:	0800f240 	.word	0x0800f240

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <resetLeds>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void resetLeds()
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2102      	movs	r1, #2
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <resetLeds+0x20>)
 8000696:	f005 ff91 	bl	80065bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a0:	4803      	ldr	r0, [pc, #12]	; (80006b0 <resetLeds+0x24>)
 80006a2:	f005 ff8b 	bl	80065bc <HAL_GPIO_WritePin>
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	58021000 	.word	0x58021000
 80006b0:	58020400 	.word	0x58020400

080006b4 <iir>:
float iir(float newSample){
 80006b4:	b480      	push	{r7}
 80006b6:	b089      	sub	sp, #36	; 0x24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	ed87 0a01 	vstr	s0, [r7, #4]
	float Acoef[2] = {
 80006be:	4a3b      	ldr	r2, [pc, #236]	; (80007ac <iir+0xf8>)
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006c8:	e883 0003 	stmia.w	r3, {r0, r1}
			5.919070381840544570E-2,
			5.919070381840544570E-2
	};
	float Bcoef[2] = {
 80006cc:	4a38      	ldr	r2, [pc, #224]	; (80007b0 <iir+0xfc>)
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d6:	e883 0003 	stmia.w	r3, {r0, r1}
			-8.8161859236131890020E-1
	};
	static float x[2];
	static float y[2];
	int n;
	for(n=1;n>0;n--){
 80006da:	2301      	movs	r3, #1
 80006dc:	61fb      	str	r3, [r7, #28]
 80006de:	e018      	b.n	8000712 <iir+0x5e>
		x[n] = x[n-1];
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	4a33      	ldr	r2, [pc, #204]	; (80007b4 <iir+0x100>)
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	4413      	add	r3, r2
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4931      	ldr	r1, [pc, #196]	; (80007b4 <iir+0x100>)
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	440b      	add	r3, r1
 80006f4:	601a      	str	r2, [r3, #0]
		y[n] = y[n-1];
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3b01      	subs	r3, #1
 80006fa:	4a2f      	ldr	r2, [pc, #188]	; (80007b8 <iir+0x104>)
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	4413      	add	r3, r2
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	492d      	ldr	r1, [pc, #180]	; (80007b8 <iir+0x104>)
 8000704:	69fb      	ldr	r3, [r7, #28]
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	440b      	add	r3, r1
 800070a:	601a      	str	r2, [r3, #0]
	for(n=1;n>0;n--){
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	3b01      	subs	r3, #1
 8000710:	61fb      	str	r3, [r7, #28]
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	2b00      	cmp	r3, #0
 8000716:	dce3      	bgt.n	80006e0 <iir+0x2c>
	}
	x[0] = newSample;
 8000718:	4a26      	ldr	r2, [pc, #152]	; (80007b4 <iir+0x100>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6013      	str	r3, [r2, #0]
	y[0] = Acoef[0] * x[0];
 800071e:	ed97 7a05 	vldr	s14, [r7, #20]
 8000722:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <iir+0x100>)
 8000724:	edd3 7a00 	vldr	s15, [r3]
 8000728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800072c:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <iir+0x104>)
 800072e:	edc3 7a00 	vstr	s15, [r3]

	for(n=1;n<=1;n++){
 8000732:	2301      	movs	r3, #1
 8000734:	61fb      	str	r3, [r7, #28]
 8000736:	e02a      	b.n	800078e <iir+0xda>

		y[0] += Acoef[n] * x[n] - Bcoef[n] * y[n];
 8000738:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <iir+0x104>)
 800073a:	ed93 7a00 	vldr	s14, [r3]
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	3320      	adds	r3, #32
 8000744:	443b      	add	r3, r7
 8000746:	3b0c      	subs	r3, #12
 8000748:	edd3 6a00 	vldr	s13, [r3]
 800074c:	4a19      	ldr	r2, [pc, #100]	; (80007b4 <iir+0x100>)
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	edd3 7a00 	vldr	s15, [r3]
 8000758:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800075c:	69fb      	ldr	r3, [r7, #28]
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	3320      	adds	r3, #32
 8000762:	443b      	add	r3, r7
 8000764:	3b14      	subs	r3, #20
 8000766:	ed93 6a00 	vldr	s12, [r3]
 800076a:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <iir+0x104>)
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4413      	add	r3, r2
 8000772:	edd3 7a00 	vldr	s15, [r3]
 8000776:	ee66 7a27 	vmul.f32	s15, s12, s15
 800077a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800077e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <iir+0x104>)
 8000784:	edc3 7a00 	vstr	s15, [r3]
	for(n=1;n<=1;n++){
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	3301      	adds	r3, #1
 800078c:	61fb      	str	r3, [r7, #28]
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	2b01      	cmp	r3, #1
 8000792:	ddd1      	ble.n	8000738 <iir+0x84>
	}
	return y[0];
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <iir+0x104>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	ee07 3a90 	vmov	s15, r3
}
 800079c:	eeb0 0a67 	vmov.f32	s0, s15
 80007a0:	3724      	adds	r7, #36	; 0x24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	0800f258 	.word	0x0800f258
 80007b0:	0800f260 	.word	0x0800f260
 80007b4:	24000a68 	.word	0x24000a68
 80007b8:	24000a70 	.word	0x24000a70

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c2:	f001 f8a3 	bl	800190c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c6:	f000 f86d 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ca:	f000 fa9b 	bl	8000d04 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ce:	f000 fa79 	bl	8000cc4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80007d2:	f000 f9f9 	bl	8000bc8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007d6:	f000 fa43 	bl	8000c60 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80007da:	f000 f9a7 	bl	8000b2c <MX_TIM3_Init>
  MX_ETH_Init();
 80007de:	f000 f959 	bl	8000a94 <MX_ETH_Init>
  MX_ADC1_Init();
 80007e2:	f000 f8df 	bl	80009a4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80007e6:	4825      	ldr	r0, [pc, #148]	; (800087c <main+0xc0>)
 80007e8:	f009 fe0e 	bl	800a408 <HAL_TIM_Base_Start_IT>
  HAL_DMA_Init(&hdma_adc1);
 80007ec:	4824      	ldr	r0, [pc, #144]	; (8000880 <main+0xc4>)
 80007ee:	f003 f839 	bl	8003864 <HAL_DMA_Init>
  HAL_ADC_Init(&hadc1);
 80007f2:	4824      	ldr	r0, [pc, #144]	; (8000884 <main+0xc8>)
 80007f4:	f001 fb98 	bl	8001f28 <HAL_ADC_Init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, ADC_BUFFER_SIZE);
 80007f8:	2201      	movs	r2, #1
 80007fa:	4923      	ldr	r1, [pc, #140]	; (8000888 <main+0xcc>)
 80007fc:	4821      	ldr	r0, [pc, #132]	; (8000884 <main+0xc8>)
 80007fe:	f001 feaf 	bl	8002560 <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  switch (counterButton)
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <main+0xd0>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d002      	beq.n	8000810 <main+0x54>
 800080a:	2b02      	cmp	r3, #2
 800080c:	d00c      	beq.n	8000828 <main+0x6c>
 800080e:	e017      	b.n	8000840 <main+0x84>
	  {
		case 1: HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,SET);
 8000810:	2201      	movs	r2, #1
 8000812:	2102      	movs	r1, #2
 8000814:	481e      	ldr	r0, [pc, #120]	; (8000890 <main+0xd4>)
 8000816:	f005 fed1 	bl	80065bc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000820:	481c      	ldr	r0, [pc, #112]	; (8000894 <main+0xd8>)
 8000822:	f005 fecb 	bl	80065bc <HAL_GPIO_WritePin>
		break;
 8000826:	e011      	b.n	800084c <main+0x90>

		case 2: HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,SET);
 8000828:	2201      	movs	r2, #1
 800082a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800082e:	4819      	ldr	r0, [pc, #100]	; (8000894 <main+0xd8>)
 8000830:	f005 fec4 	bl	80065bc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2102      	movs	r1, #2
 8000838:	4815      	ldr	r0, [pc, #84]	; (8000890 <main+0xd4>)
 800083a:	f005 febf 	bl	80065bc <HAL_GPIO_WritePin>

		break;
 800083e:	e005      	b.n	800084c <main+0x90>
		//case 3: HAL_TIM_Base_Start_IT(&htim3);
		default: counterButton =0; resetLeds();
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <main+0xd0>)
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	f7ff ff21 	bl	800068c <resetLeds>
			break;
 800084a:	bf00      	nop
	  }
	  char voltageStr[20]; // This buffer will hold the converted string
	 snprintf(voltageStr, sizeof(voltageStr), "%.2f\r\n", voltage);
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <main+0xdc>)
 800084e:	edd3 7a00 	vldr	s15, [r3]
 8000852:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	ed8d 7b00 	vstr	d7, [sp]
 800085c:	4a0f      	ldr	r2, [pc, #60]	; (800089c <main+0xe0>)
 800085e:	2114      	movs	r1, #20
 8000860:	4618      	mov	r0, r3
 8000862:	f00c fbe1 	bl	800d028 <sniprintf>
	 if(timer1Sec>=1){
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <main+0xe4>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d002      	beq.n	8000874 <main+0xb8>
		// HAL_UART_Transmit(&huart3,(uint8_t *) timer1Sec , sizeof(timer1Sec), 100);
		 //HAL_UART_Transmit(&huart3,(uint8_t *) "\r\n", sizeof("\r\n"), 100);
		 timer1Sec = 0;
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <main+0xe4>)
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
		 //HAL_UART_Transmit(&huart3, (uint8_t*)voltageStr, strlen(voltageStr), HAL_MAX_DELAY);
	 }
	 // HAL_UART_Transmit(&huart3,(uint8_t *) "** TESTE **\r\n", sizeof("** TESTE **\r\n"), 100);


	  HAL_ADC_Start_IT(&hadc1);
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <main+0xc8>)
 8000876:	f001 fcf9 	bl	800226c <HAL_ADC_Start_IT>
  {
 800087a:	e7c2      	b.n	8000802 <main+0x46>
 800087c:	24000478 	.word	0x24000478
 8000880:	24000350 	.word	0x24000350
 8000884:	240002ec 	.word	0x240002ec
 8000888:	24000a64 	.word	0x24000a64
 800088c:	24000a80 	.word	0x24000a80
 8000890:	58021000 	.word	0x58021000
 8000894:	58020400 	.word	0x58020400
 8000898:	24000aa0 	.word	0x24000aa0
 800089c:	0800f268 	.word	0x0800f268
 80008a0:	24000a88 	.word	0x24000a88

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b09c      	sub	sp, #112	; 0x70
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ae:	224c      	movs	r2, #76	; 0x4c
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f00c fc69 	bl	800d18a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2220      	movs	r2, #32
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f00c fc63 	bl	800d18a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008c4:	2002      	movs	r0, #2
 80008c6:	f006 f819 	bl	80068fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b33      	ldr	r3, [pc, #204]	; (800099c <SystemClock_Config+0xf8>)
 80008d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d2:	4a32      	ldr	r2, [pc, #200]	; (800099c <SystemClock_Config+0xf8>)
 80008d4:	f023 0301 	bic.w	r3, r3, #1
 80008d8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008da:	4b30      	ldr	r3, [pc, #192]	; (800099c <SystemClock_Config+0xf8>)
 80008dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	4b2e      	ldr	r3, [pc, #184]	; (80009a0 <SystemClock_Config+0xfc>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008ec:	4a2c      	ldr	r2, [pc, #176]	; (80009a0 <SystemClock_Config+0xfc>)
 80008ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b2a      	ldr	r3, [pc, #168]	; (80009a0 <SystemClock_Config+0xfc>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000900:	bf00      	nop
 8000902:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <SystemClock_Config+0xfc>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800090a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800090e:	d1f8      	bne.n	8000902 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000910:	2303      	movs	r3, #3
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000914:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800091a:	2301      	movs	r3, #1
 800091c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091e:	2340      	movs	r3, #64	; 0x40
 8000920:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000922:	2302      	movs	r3, #2
 8000924:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000926:	2302      	movs	r3, #2
 8000928:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800092a:	2301      	movs	r3, #1
 800092c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800092e:	2312      	movs	r3, #18
 8000930:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000932:	2302      	movs	r3, #2
 8000934:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000936:	2303      	movs	r3, #3
 8000938:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800093a:	2302      	movs	r3, #2
 800093c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800093e:	230c      	movs	r3, #12
 8000940:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000942:	2302      	movs	r3, #2
 8000944:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000946:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800094a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000950:	4618      	mov	r0, r3
 8000952:	f006 f81d 	bl	8006990 <HAL_RCC_OscConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800095c:	f000 fab6 	bl	8000ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000960:	233f      	movs	r3, #63	; 0x3f
 8000962:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2101      	movs	r1, #1
 8000984:	4618      	mov	r0, r3
 8000986:	f006 fc5d 	bl	8007244 <HAL_RCC_ClockConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000990:	f000 fa9c 	bl	8000ecc <Error_Handler>
  }
}
 8000994:	bf00      	nop
 8000996:	3770      	adds	r7, #112	; 0x70
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	58000400 	.word	0x58000400
 80009a0:	58024800 	.word	0x58024800

080009a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009b6:	463b      	mov	r3, r7
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
 80009c4:	615a      	str	r2, [r3, #20]
 80009c6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009c8:	4b2f      	ldr	r3, [pc, #188]	; (8000a88 <MX_ADC1_Init+0xe4>)
 80009ca:	4a30      	ldr	r2, [pc, #192]	; (8000a8c <MX_ADC1_Init+0xe8>)
 80009cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80009ce:	4b2e      	ldr	r3, [pc, #184]	; (8000a88 <MX_ADC1_Init+0xe4>)
 80009d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80009d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009d6:	4b2c      	ldr	r3, [pc, #176]	; (8000a88 <MX_ADC1_Init+0xe4>)
 80009d8:	2208      	movs	r2, #8
 80009da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009dc:	4b2a      	ldr	r3, [pc, #168]	; (8000a88 <MX_ADC1_Init+0xe4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009e2:	4b29      	ldr	r3, [pc, #164]	; (8000a88 <MX_ADC1_Init+0xe4>)
 80009e4:	2204      	movs	r2, #4
 80009e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009e8:	4b27      	ldr	r3, [pc, #156]	; (8000a88 <MX_ADC1_Init+0xe4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009ee:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <MX_ADC1_Init+0xe4>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80009f4:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <MX_ADC1_Init+0xe4>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009fa:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <MX_ADC1_Init+0xe4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a00:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <MX_ADC1_Init+0xe4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a06:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <MX_ADC1_Init+0xe4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <MX_ADC1_Init+0xe4>)
 8000a0e:	2203      	movs	r2, #3
 8000a10:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a12:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <MX_ADC1_Init+0xe4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <MX_ADC1_Init+0xe4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_ADC1_Init+0xe4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a26:	4818      	ldr	r0, [pc, #96]	; (8000a88 <MX_ADC1_Init+0xe4>)
 8000a28:	f001 fa7e 	bl	8001f28 <HAL_ADC_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000a32:	f000 fa4b 	bl	8000ecc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4811      	ldr	r0, [pc, #68]	; (8000a88 <MX_ADC1_Init+0xe4>)
 8000a42:	f002 fd21 	bl	8003488 <HAL_ADCEx_MultiModeConfigChannel>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a4c:	f000 fa3e 	bl	8000ecc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_ADC1_Init+0xec>)
 8000a52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a54:	2306      	movs	r3, #6
 8000a56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a5c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a60:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a62:	2304      	movs	r3, #4
 8000a64:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4806      	ldr	r0, [pc, #24]	; (8000a88 <MX_ADC1_Init+0xe4>)
 8000a70:	f001 fe4e 	bl	8002710 <HAL_ADC_ConfigChannel>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000a7a:	f000 fa27 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	3728      	adds	r7, #40	; 0x28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	240002ec 	.word	0x240002ec
 8000a8c:	40022000 	.word	0x40022000
 8000a90:	14f00020 	.word	0x14f00020

08000a94 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a98:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <MX_ETH_Init+0x80>)
 8000a9a:	4a1f      	ldr	r2, [pc, #124]	; (8000b18 <MX_ETH_Init+0x84>)
 8000a9c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <MX_ETH_Init+0x88>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <MX_ETH_Init+0x88>)
 8000aa6:	2280      	movs	r2, #128	; 0x80
 8000aa8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <MX_ETH_Init+0x88>)
 8000aac:	22e1      	movs	r2, #225	; 0xe1
 8000aae:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <MX_ETH_Init+0x88>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <MX_ETH_Init+0x88>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_ETH_Init+0x88>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_ETH_Init+0x80>)
 8000ac4:	4a15      	ldr	r2, [pc, #84]	; (8000b1c <MX_ETH_Init+0x88>)
 8000ac6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <MX_ETH_Init+0x80>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_ETH_Init+0x80>)
 8000ad0:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <MX_ETH_Init+0x8c>)
 8000ad2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_ETH_Init+0x80>)
 8000ad6:	4a13      	ldr	r2, [pc, #76]	; (8000b24 <MX_ETH_Init+0x90>)
 8000ad8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_ETH_Init+0x80>)
 8000adc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ae0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ae2:	480c      	ldr	r0, [pc, #48]	; (8000b14 <MX_ETH_Init+0x80>)
 8000ae4:	f004 ff96 	bl	8005a14 <HAL_ETH_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000aee:	f000 f9ed 	bl	8000ecc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000af2:	2238      	movs	r2, #56	; 0x38
 8000af4:	2100      	movs	r1, #0
 8000af6:	480c      	ldr	r0, [pc, #48]	; (8000b28 <MX_ETH_Init+0x94>)
 8000af8:	f00c fb47 	bl	800d18a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000afc:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <MX_ETH_Init+0x94>)
 8000afe:	2221      	movs	r2, #33	; 0x21
 8000b00:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_ETH_Init+0x94>)
 8000b04:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b08:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <MX_ETH_Init+0x94>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	240003c8 	.word	0x240003c8
 8000b18:	40028000 	.word	0x40028000
 8000b1c:	24000a78 	.word	0x24000a78
 8000b20:	24000238 	.word	0x24000238
 8000b24:	240001d8 	.word	0x240001d8
 8000b28:	240002b4 	.word	0x240002b4

08000b2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b32:	f107 0310 	add.w	r3, r7, #16
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b4a:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <MX_TIM3_Init+0x94>)
 8000b4c:	4a1d      	ldr	r2, [pc, #116]	; (8000bc4 <MX_TIM3_Init+0x98>)
 8000b4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 8000b50:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <MX_TIM3_Init+0x94>)
 8000b52:	22c7      	movs	r2, #199	; 0xc7
 8000b54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b56:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <MX_TIM3_Init+0x94>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6399;
 8000b5c:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <MX_TIM3_Init+0x94>)
 8000b5e:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000b62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b64:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <MX_TIM3_Init+0x94>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <MX_TIM3_Init+0x94>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b70:	4813      	ldr	r0, [pc, #76]	; (8000bc0 <MX_TIM3_Init+0x94>)
 8000b72:	f009 fbf1 	bl	800a358 <HAL_TIM_Base_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000b7c:	f000 f9a6 	bl	8000ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b86:	f107 0310 	add.w	r3, r7, #16
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	480c      	ldr	r0, [pc, #48]	; (8000bc0 <MX_TIM3_Init+0x94>)
 8000b8e:	f009 fdd3 	bl	800a738 <HAL_TIM_ConfigClockSource>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000b98:	f000 f998 	bl	8000ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_TIM3_Init+0x94>)
 8000baa:	f00a f827 	bl	800abfc <HAL_TIMEx_MasterConfigSynchronization>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000bb4:	f000 f98a 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	3720      	adds	r7, #32
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	24000478 	.word	0x24000478
 8000bc4:	40000400 	.word	0x40000400

08000bc8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bcc:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000bce:	4a23      	ldr	r2, [pc, #140]	; (8000c5c <MX_USART3_UART_Init+0x94>)
 8000bd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bd2:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000bd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bda:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000be0:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000bee:	220c      	movs	r2, #12
 8000bf0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c10:	4811      	ldr	r0, [pc, #68]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c12:	f00a f89f 	bl	800ad54 <HAL_UART_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c1c:	f000 f956 	bl	8000ecc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c20:	2100      	movs	r1, #0
 8000c22:	480d      	ldr	r0, [pc, #52]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c24:	f00b f92f 	bl	800be86 <HAL_UARTEx_SetTxFifoThreshold>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c2e:	f000 f94d 	bl	8000ecc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c32:	2100      	movs	r1, #0
 8000c34:	4808      	ldr	r0, [pc, #32]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c36:	f00b f964 	bl	800bf02 <HAL_UARTEx_SetRxFifoThreshold>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c40:	f000 f944 	bl	8000ecc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c46:	f00b f8e5 	bl	800be14 <HAL_UARTEx_DisableFifoMode>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c50:	f000 f93c 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	240004c4 	.word	0x240004c4
 8000c5c:	40004800 	.word	0x40004800

08000c60 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c64:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c66:	4a16      	ldr	r2, [pc, #88]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000c68:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000c6a:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c6c:	2209      	movs	r2, #9
 8000c6e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c72:	2202      	movs	r2, #2
 8000c74:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c7e:	2202      	movs	r2, #2
 8000c80:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ca8:	f005 fce0 	bl	800666c <HAL_PCD_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000cb2:	f000 f90b 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	24000558 	.word	0x24000558
 8000cc0:	40080000 	.word	0x40080000

08000cc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cca:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <MX_DMA_Init+0x3c>)
 8000ccc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cd0:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <MX_DMA_Init+0x3c>)
 8000cd2:	f043 0302 	orr.w	r3, r3, #2
 8000cd6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_DMA_Init+0x3c>)
 8000cdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ce0:	f003 0302 	and.w	r3, r3, #2
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2100      	movs	r1, #0
 8000cec:	2038      	movs	r0, #56	; 0x38
 8000cee:	f002 fd84 	bl	80037fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000cf2:	2038      	movs	r0, #56	; 0x38
 8000cf4:	f002 fd9b 	bl	800382e <HAL_NVIC_EnableIRQ>

}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	58024400 	.word	0x58024400

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08c      	sub	sp, #48	; 0x30
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	4b66      	ldr	r3, [pc, #408]	; (8000eb4 <MX_GPIO_Init+0x1b0>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d20:	4a64      	ldr	r2, [pc, #400]	; (8000eb4 <MX_GPIO_Init+0x1b0>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2a:	4b62      	ldr	r3, [pc, #392]	; (8000eb4 <MX_GPIO_Init+0x1b0>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	61bb      	str	r3, [r7, #24]
 8000d36:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d38:	4b5e      	ldr	r3, [pc, #376]	; (8000eb4 <MX_GPIO_Init+0x1b0>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3e:	4a5d      	ldr	r2, [pc, #372]	; (8000eb4 <MX_GPIO_Init+0x1b0>)
 8000d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d48:	4b5a      	ldr	r3, [pc, #360]	; (8000eb4 <MX_GPIO_Init+0x1b0>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b57      	ldr	r3, [pc, #348]	; (8000eb4 <MX_GPIO_Init+0x1b0>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5c:	4a55      	ldr	r2, [pc, #340]	; (8000eb4 <MX_GPIO_Init+0x1b0>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d66:	4b53      	ldr	r3, [pc, #332]	; (8000eb4 <MX_GPIO_Init+0x1b0>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d74:	4b4f      	ldr	r3, [pc, #316]	; (8000eb4 <MX_GPIO_Init+0x1b0>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7a:	4a4e      	ldr	r2, [pc, #312]	; (8000eb4 <MX_GPIO_Init+0x1b0>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d84:	4b4b      	ldr	r3, [pc, #300]	; (8000eb4 <MX_GPIO_Init+0x1b0>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d92:	4b48      	ldr	r3, [pc, #288]	; (8000eb4 <MX_GPIO_Init+0x1b0>)
 8000d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d98:	4a46      	ldr	r2, [pc, #280]	; (8000eb4 <MX_GPIO_Init+0x1b0>)
 8000d9a:	f043 0308 	orr.w	r3, r3, #8
 8000d9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da2:	4b44      	ldr	r3, [pc, #272]	; (8000eb4 <MX_GPIO_Init+0x1b0>)
 8000da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da8:	f003 0308 	and.w	r3, r3, #8
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000db0:	4b40      	ldr	r3, [pc, #256]	; (8000eb4 <MX_GPIO_Init+0x1b0>)
 8000db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db6:	4a3f      	ldr	r2, [pc, #252]	; (8000eb4 <MX_GPIO_Init+0x1b0>)
 8000db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc0:	4b3c      	ldr	r3, [pc, #240]	; (8000eb4 <MX_GPIO_Init+0x1b0>)
 8000dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dce:	4b39      	ldr	r3, [pc, #228]	; (8000eb4 <MX_GPIO_Init+0x1b0>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd4:	4a37      	ldr	r2, [pc, #220]	; (8000eb4 <MX_GPIO_Init+0x1b0>)
 8000dd6:	f043 0310 	orr.w	r3, r3, #16
 8000dda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dde:	4b35      	ldr	r3, [pc, #212]	; (8000eb4 <MX_GPIO_Init+0x1b0>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de4:	f003 0310 	and.w	r3, r3, #16
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f244 0101 	movw	r1, #16385	; 0x4001
 8000df2:	4831      	ldr	r0, [pc, #196]	; (8000eb8 <MX_GPIO_Init+0x1b4>)
 8000df4:	f005 fbe2 	bl	80065bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dfe:	482f      	ldr	r0, [pc, #188]	; (8000ebc <MX_GPIO_Init+0x1b8>)
 8000e00:	f005 fbdc 	bl	80065bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2102      	movs	r1, #2
 8000e08:	482d      	ldr	r0, [pc, #180]	; (8000ec0 <MX_GPIO_Init+0x1bc>)
 8000e0a:	f005 fbd7 	bl	80065bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000e0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e14:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	4619      	mov	r1, r3
 8000e24:	4827      	ldr	r0, [pc, #156]	; (8000ec4 <MX_GPIO_Init+0x1c0>)
 8000e26:	f005 fa19 	bl	800625c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e2a:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	4619      	mov	r1, r3
 8000e42:	481d      	ldr	r0, [pc, #116]	; (8000eb8 <MX_GPIO_Init+0x1b4>)
 8000e44:	f005 fa0a 	bl	800625c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000e48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4816      	ldr	r0, [pc, #88]	; (8000ebc <MX_GPIO_Init+0x1b8>)
 8000e62:	f005 f9fb 	bl	800625c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4813      	ldr	r0, [pc, #76]	; (8000ec8 <MX_GPIO_Init+0x1c4>)
 8000e7c:	f005 f9ee 	bl	800625c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e80:	2302      	movs	r3, #2
 8000e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	480a      	ldr	r0, [pc, #40]	; (8000ec0 <MX_GPIO_Init+0x1bc>)
 8000e98:	f005 f9e0 	bl	800625c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2028      	movs	r0, #40	; 0x28
 8000ea2:	f002 fcaa 	bl	80037fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ea6:	2028      	movs	r0, #40	; 0x28
 8000ea8:	f002 fcc1 	bl	800382e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eac:	bf00      	nop
 8000eae:	3730      	adds	r7, #48	; 0x30
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	58024400 	.word	0x58024400
 8000eb8:	58020400 	.word	0x58020400
 8000ebc:	58020c00 	.word	0x58020c00
 8000ec0:	58021000 	.word	0x58021000
 8000ec4:	58020800 	.word	0x58020800
 8000ec8:	58021800 	.word	0x58021800

08000ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed0:	b672      	cpsid	i
}
 8000ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <Error_Handler+0x8>
	...

08000ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_MspInit+0x30>)
 8000ee0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ee4:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_MspInit+0x30>)
 8000ee6:	f043 0302 	orr.w	r3, r3, #2
 8000eea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_MspInit+0x30>)
 8000ef0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	58024400 	.word	0x58024400

08000f0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b0ba      	sub	sp, #232	; 0xe8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	22c0      	movs	r2, #192	; 0xc0
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f00c f92c 	bl	800d18a <memset>
  if(hadc->Instance==ADC1)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a44      	ldr	r2, [pc, #272]	; (8001048 <HAL_ADC_MspInit+0x13c>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	f040 8081 	bne.w	8001040 <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f3e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f42:	f04f 0300 	mov.w	r3, #0
 8000f46:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000f4e:	2312      	movs	r3, #18
 8000f50:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000f52:	2304      	movs	r3, #4
 8000f54:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f56:	2302      	movs	r3, #2
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f5e:	23c0      	movs	r3, #192	; 0xc0
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000f62:	2320      	movs	r3, #32
 8000f64:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000f66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f6a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	4618      	mov	r0, r3
 8000f78:	f006 fcf0 	bl	800795c <HAL_RCCEx_PeriphCLKConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 8000f82:	f7ff ffa3 	bl	8000ecc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f86:	4b31      	ldr	r3, [pc, #196]	; (800104c <HAL_ADC_MspInit+0x140>)
 8000f88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f8c:	4a2f      	ldr	r2, [pc, #188]	; (800104c <HAL_ADC_MspInit+0x140>)
 8000f8e:	f043 0320 	orr.w	r3, r3, #32
 8000f92:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f96:	4b2d      	ldr	r3, [pc, #180]	; (800104c <HAL_ADC_MspInit+0x140>)
 8000f98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f9c:	f003 0320 	and.w	r3, r3, #32
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa4:	4b29      	ldr	r3, [pc, #164]	; (800104c <HAL_ADC_MspInit+0x140>)
 8000fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000faa:	4a28      	ldr	r2, [pc, #160]	; (800104c <HAL_ADC_MspInit+0x140>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb4:	4b25      	ldr	r3, [pc, #148]	; (800104c <HAL_ADC_MspInit+0x140>)
 8000fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	481d      	ldr	r0, [pc, #116]	; (8001050 <HAL_ADC_MspInit+0x144>)
 8000fdc:	f005 f93e 	bl	800625c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fe0:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <HAL_ADC_MspInit+0x148>)
 8000fe2:	4a1d      	ldr	r2, [pc, #116]	; (8001058 <HAL_ADC_MspInit+0x14c>)
 8000fe4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <HAL_ADC_MspInit+0x148>)
 8000fe8:	2209      	movs	r2, #9
 8000fea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <HAL_ADC_MspInit+0x148>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <HAL_ADC_MspInit+0x148>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <HAL_ADC_MspInit+0x148>)
 8000ffa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ffe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <HAL_ADC_MspInit+0x148>)
 8001002:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001006:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_ADC_MspInit+0x148>)
 800100a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800100e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001010:	4b10      	ldr	r3, [pc, #64]	; (8001054 <HAL_ADC_MspInit+0x148>)
 8001012:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001016:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_ADC_MspInit+0x148>)
 800101a:	2200      	movs	r2, #0
 800101c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800101e:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <HAL_ADC_MspInit+0x148>)
 8001020:	2200      	movs	r2, #0
 8001022:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001024:	480b      	ldr	r0, [pc, #44]	; (8001054 <HAL_ADC_MspInit+0x148>)
 8001026:	f002 fc1d 	bl	8003864 <HAL_DMA_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8001030:	f7ff ff4c 	bl	8000ecc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a07      	ldr	r2, [pc, #28]	; (8001054 <HAL_ADC_MspInit+0x148>)
 8001038:	64da      	str	r2, [r3, #76]	; 0x4c
 800103a:	4a06      	ldr	r2, [pc, #24]	; (8001054 <HAL_ADC_MspInit+0x148>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001040:	bf00      	nop
 8001042:	37e8      	adds	r7, #232	; 0xe8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40022000 	.word	0x40022000
 800104c:	58024400 	.word	0x58024400
 8001050:	58020400 	.word	0x58020400
 8001054:	24000350 	.word	0x24000350
 8001058:	40020410 	.word	0x40020410

0800105c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08e      	sub	sp, #56	; 0x38
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a59      	ldr	r2, [pc, #356]	; (80011e0 <HAL_ETH_MspInit+0x184>)
 800107a:	4293      	cmp	r3, r2
 800107c:	f040 80ab 	bne.w	80011d6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001080:	4b58      	ldr	r3, [pc, #352]	; (80011e4 <HAL_ETH_MspInit+0x188>)
 8001082:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001086:	4a57      	ldr	r2, [pc, #348]	; (80011e4 <HAL_ETH_MspInit+0x188>)
 8001088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800108c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001090:	4b54      	ldr	r3, [pc, #336]	; (80011e4 <HAL_ETH_MspInit+0x188>)
 8001092:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001096:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800109a:	623b      	str	r3, [r7, #32]
 800109c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800109e:	4b51      	ldr	r3, [pc, #324]	; (80011e4 <HAL_ETH_MspInit+0x188>)
 80010a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010a4:	4a4f      	ldr	r2, [pc, #316]	; (80011e4 <HAL_ETH_MspInit+0x188>)
 80010a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010aa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010ae:	4b4d      	ldr	r3, [pc, #308]	; (80011e4 <HAL_ETH_MspInit+0x188>)
 80010b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b8:	61fb      	str	r3, [r7, #28]
 80010ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80010bc:	4b49      	ldr	r3, [pc, #292]	; (80011e4 <HAL_ETH_MspInit+0x188>)
 80010be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010c2:	4a48      	ldr	r2, [pc, #288]	; (80011e4 <HAL_ETH_MspInit+0x188>)
 80010c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010cc:	4b45      	ldr	r3, [pc, #276]	; (80011e4 <HAL_ETH_MspInit+0x188>)
 80010ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	61bb      	str	r3, [r7, #24]
 80010d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	4b42      	ldr	r3, [pc, #264]	; (80011e4 <HAL_ETH_MspInit+0x188>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e0:	4a40      	ldr	r2, [pc, #256]	; (80011e4 <HAL_ETH_MspInit+0x188>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ea:	4b3e      	ldr	r3, [pc, #248]	; (80011e4 <HAL_ETH_MspInit+0x188>)
 80010ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	4b3a      	ldr	r3, [pc, #232]	; (80011e4 <HAL_ETH_MspInit+0x188>)
 80010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fe:	4a39      	ldr	r2, [pc, #228]	; (80011e4 <HAL_ETH_MspInit+0x188>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001108:	4b36      	ldr	r3, [pc, #216]	; (80011e4 <HAL_ETH_MspInit+0x188>)
 800110a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	4b33      	ldr	r3, [pc, #204]	; (80011e4 <HAL_ETH_MspInit+0x188>)
 8001118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111c:	4a31      	ldr	r2, [pc, #196]	; (80011e4 <HAL_ETH_MspInit+0x188>)
 800111e:	f043 0302 	orr.w	r3, r3, #2
 8001122:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001126:	4b2f      	ldr	r3, [pc, #188]	; (80011e4 <HAL_ETH_MspInit+0x188>)
 8001128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001134:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <HAL_ETH_MspInit+0x188>)
 8001136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113a:	4a2a      	ldr	r2, [pc, #168]	; (80011e4 <HAL_ETH_MspInit+0x188>)
 800113c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001140:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001144:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <HAL_ETH_MspInit+0x188>)
 8001146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001152:	2332      	movs	r3, #50	; 0x32
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001162:	230b      	movs	r3, #11
 8001164:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116a:	4619      	mov	r1, r3
 800116c:	481e      	ldr	r0, [pc, #120]	; (80011e8 <HAL_ETH_MspInit+0x18c>)
 800116e:	f005 f875 	bl	800625c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001172:	2386      	movs	r3, #134	; 0x86
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001182:	230b      	movs	r3, #11
 8001184:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118a:	4619      	mov	r1, r3
 800118c:	4817      	ldr	r0, [pc, #92]	; (80011ec <HAL_ETH_MspInit+0x190>)
 800118e:	f005 f865 	bl	800625c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001192:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011a4:	230b      	movs	r3, #11
 80011a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ac:	4619      	mov	r1, r3
 80011ae:	4810      	ldr	r0, [pc, #64]	; (80011f0 <HAL_ETH_MspInit+0x194>)
 80011b0:	f005 f854 	bl	800625c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80011b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011c6:	230b      	movs	r3, #11
 80011c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ce:	4619      	mov	r1, r3
 80011d0:	4808      	ldr	r0, [pc, #32]	; (80011f4 <HAL_ETH_MspInit+0x198>)
 80011d2:	f005 f843 	bl	800625c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80011d6:	bf00      	nop
 80011d8:	3738      	adds	r7, #56	; 0x38
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40028000 	.word	0x40028000
 80011e4:	58024400 	.word	0x58024400
 80011e8:	58020800 	.word	0x58020800
 80011ec:	58020000 	.word	0x58020000
 80011f0:	58020400 	.word	0x58020400
 80011f4:	58021800 	.word	0x58021800

080011f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <HAL_TIM_Base_MspInit+0x48>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d116      	bne.n	8001238 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <HAL_TIM_Base_MspInit+0x4c>)
 800120c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001210:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <HAL_TIM_Base_MspInit+0x4c>)
 8001212:	f043 0302 	orr.w	r3, r3, #2
 8001216:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <HAL_TIM_Base_MspInit+0x4c>)
 800121c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	201d      	movs	r0, #29
 800122e:	f002 fae4 	bl	80037fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001232:	201d      	movs	r0, #29
 8001234:	f002 fafb 	bl	800382e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40000400 	.word	0x40000400
 8001244:	58024400 	.word	0x58024400

08001248 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b0ba      	sub	sp, #232	; 0xe8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	22c0      	movs	r2, #192	; 0xc0
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f00b ff8e 	bl	800d18a <memset>
  if(huart->Instance==USART3)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a27      	ldr	r2, [pc, #156]	; (8001310 <HAL_UART_MspInit+0xc8>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d146      	bne.n	8001306 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001278:	f04f 0202 	mov.w	r2, #2
 800127c:	f04f 0300 	mov.w	r3, #0
 8001280:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800128a:	f107 0310 	add.w	r3, r7, #16
 800128e:	4618      	mov	r0, r3
 8001290:	f006 fb64 	bl	800795c <HAL_RCCEx_PeriphCLKConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800129a:	f7ff fe17 	bl	8000ecc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <HAL_UART_MspInit+0xcc>)
 80012a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012a4:	4a1b      	ldr	r2, [pc, #108]	; (8001314 <HAL_UART_MspInit+0xcc>)
 80012a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <HAL_UART_MspInit+0xcc>)
 80012b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012bc:	4b15      	ldr	r3, [pc, #84]	; (8001314 <HAL_UART_MspInit+0xcc>)
 80012be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c2:	4a14      	ldr	r2, [pc, #80]	; (8001314 <HAL_UART_MspInit+0xcc>)
 80012c4:	f043 0308 	orr.w	r3, r3, #8
 80012c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <HAL_UART_MspInit+0xcc>)
 80012ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012f4:	2307      	movs	r3, #7
 80012f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012fe:	4619      	mov	r1, r3
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <HAL_UART_MspInit+0xd0>)
 8001302:	f004 ffab 	bl	800625c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001306:	bf00      	nop
 8001308:	37e8      	adds	r7, #232	; 0xe8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40004800 	.word	0x40004800
 8001314:	58024400 	.word	0x58024400
 8001318:	58020c00 	.word	0x58020c00

0800131c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b0ba      	sub	sp, #232	; 0xe8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	22c0      	movs	r2, #192	; 0xc0
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f00b ff24 	bl	800d18a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a30      	ldr	r2, [pc, #192]	; (8001408 <HAL_PCD_MspInit+0xec>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d159      	bne.n	8001400 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800134c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001358:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800135c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	4618      	mov	r0, r3
 8001366:	f006 faf9 	bl	800795c <HAL_RCCEx_PeriphCLKConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001370:	f7ff fdac 	bl	8000ecc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001374:	f005 fafc 	bl	8006970 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	4b24      	ldr	r3, [pc, #144]	; (800140c <HAL_PCD_MspInit+0xf0>)
 800137a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137e:	4a23      	ldr	r2, [pc, #140]	; (800140c <HAL_PCD_MspInit+0xf0>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <HAL_PCD_MspInit+0xf0>)
 800138a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001396:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800139a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80013b0:	230a      	movs	r3, #10
 80013b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013ba:	4619      	mov	r1, r3
 80013bc:	4814      	ldr	r0, [pc, #80]	; (8001410 <HAL_PCD_MspInit+0xf4>)
 80013be:	f004 ff4d 	bl	800625c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013da:	4619      	mov	r1, r3
 80013dc:	480c      	ldr	r0, [pc, #48]	; (8001410 <HAL_PCD_MspInit+0xf4>)
 80013de:	f004 ff3d 	bl	800625c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_PCD_MspInit+0xf0>)
 80013e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013e8:	4a08      	ldr	r2, [pc, #32]	; (800140c <HAL_PCD_MspInit+0xf0>)
 80013ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_PCD_MspInit+0xf0>)
 80013f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001400:	bf00      	nop
 8001402:	37e8      	adds	r7, #232	; 0xe8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40080000 	.word	0x40080000
 800140c:	58024400 	.word	0x58024400
 8001410:	58020000 	.word	0x58020000

08001414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <NMI_Handler+0x4>

0800141a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141e:	e7fe      	b.n	800141e <HardFault_Handler+0x4>

08001420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <MemManage_Handler+0x4>

08001426 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <BusFault_Handler+0x4>

0800142c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <UsageFault_Handler+0x4>

08001432 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001460:	f000 fac6 	bl	80019f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}

08001468 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800146c:	482f      	ldr	r0, [pc, #188]	; (800152c <TIM3_IRQHandler+0xc4>)
 800146e:	f009 f843 	bl	800a4f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  timer1Sec++;
 8001472:	4b2f      	ldr	r3, [pc, #188]	; (8001530 <TIM3_IRQHandler+0xc8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	4a2d      	ldr	r2, [pc, #180]	; (8001530 <TIM3_IRQHandler+0xc8>)
 800147a:	6013      	str	r3, [r2, #0]

  HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 800147c:	2101      	movs	r1, #1
 800147e:	482d      	ldr	r0, [pc, #180]	; (8001534 <TIM3_IRQHandler+0xcc>)
 8001480:	f005 f8b5 	bl	80065ee <HAL_GPIO_TogglePin>
  memmove(&signali,&adc_buffer,sizeof(adc_buffer));
 8001484:	2204      	movs	r2, #4
 8001486:	492c      	ldr	r1, [pc, #176]	; (8001538 <TIM3_IRQHandler+0xd0>)
 8001488:	482c      	ldr	r0, [pc, #176]	; (800153c <TIM3_IRQHandler+0xd4>)
 800148a:	f00b fe64 	bl	800d156 <memmove>
  //signali =&adc_buffer;
  		  	  calc = signali;
 800148e:	4b2b      	ldr	r3, [pc, #172]	; (800153c <TIM3_IRQHandler+0xd4>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	ee07 3a90 	vmov	s15, r3
 8001496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149a:	4b29      	ldr	r3, [pc, #164]	; (8001540 <TIM3_IRQHandler+0xd8>)
 800149c:	edc3 7a00 	vstr	s15, [r3]
  		  	  calc -= 2048;
 80014a0:	4b27      	ldr	r3, [pc, #156]	; (8001540 <TIM3_IRQHandler+0xd8>)
 80014a2:	edd3 7a00 	vldr	s15, [r3]
 80014a6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001544 <TIM3_IRQHandler+0xdc>
 80014aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014ae:	4b24      	ldr	r3, [pc, #144]	; (8001540 <TIM3_IRQHandler+0xd8>)
 80014b0:	edc3 7a00 	vstr	s15, [r3]
  		  	  calc = iir(calc);
 80014b4:	4b22      	ldr	r3, [pc, #136]	; (8001540 <TIM3_IRQHandler+0xd8>)
 80014b6:	edd3 7a00 	vldr	s15, [r3]
 80014ba:	eeb0 0a67 	vmov.f32	s0, s15
 80014be:	f7ff f8f9 	bl	80006b4 <iir>
 80014c2:	eef0 7a40 	vmov.f32	s15, s0
 80014c6:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <TIM3_IRQHandler+0xd8>)
 80014c8:	edc3 7a00 	vstr	s15, [r3]
  		  	  calc += 2048;
 80014cc:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <TIM3_IRQHandler+0xd8>)
 80014ce:	edd3 7a00 	vldr	s15, [r3]
 80014d2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001544 <TIM3_IRQHandler+0xdc>
 80014d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <TIM3_IRQHandler+0xd8>)
 80014dc:	edc3 7a00 	vstr	s15, [r3]
  		  	  signalf = calc;
 80014e0:	4b17      	ldr	r3, [pc, #92]	; (8001540 <TIM3_IRQHandler+0xd8>)
 80014e2:	edd3 7a00 	vldr	s15, [r3]
 80014e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014ea:	ee17 3a90 	vmov	r3, s15
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	4b15      	ldr	r3, [pc, #84]	; (8001548 <TIM3_IRQHandler+0xe0>)
 80014f2:	801a      	strh	r2, [r3, #0]
  		  	  sprintf(buffer,"%04u %04u\r\n",signali,signalf);
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <TIM3_IRQHandler+0xd4>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <TIM3_IRQHandler+0xe0>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	4913      	ldr	r1, [pc, #76]	; (800154c <TIM3_IRQHandler+0xe4>)
 8001500:	4813      	ldr	r0, [pc, #76]	; (8001550 <TIM3_IRQHandler+0xe8>)
 8001502:	f00b fdc5 	bl	800d090 <siprintf>
  		  	  HAL_UART_Transmit(&huart3, buffer, 11, 100);
 8001506:	2364      	movs	r3, #100	; 0x64
 8001508:	220b      	movs	r2, #11
 800150a:	4911      	ldr	r1, [pc, #68]	; (8001550 <TIM3_IRQHandler+0xe8>)
 800150c:	4811      	ldr	r0, [pc, #68]	; (8001554 <TIM3_IRQHandler+0xec>)
 800150e:	f009 fc71 	bl	800adf4 <HAL_UART_Transmit>
  		  	  signalf =0;
 8001512:	4b0d      	ldr	r3, [pc, #52]	; (8001548 <TIM3_IRQHandler+0xe0>)
 8001514:	2200      	movs	r2, #0
 8001516:	801a      	strh	r2, [r3, #0]
  		  	  signali =0;
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <TIM3_IRQHandler+0xd4>)
 800151a:	2200      	movs	r2, #0
 800151c:	801a      	strh	r2, [r3, #0]
  		  	  calc=0;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <TIM3_IRQHandler+0xd8>)
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	24000478 	.word	0x24000478
 8001530:	24000a88 	.word	0x24000a88
 8001534:	58020400 	.word	0x58020400
 8001538:	24000a64 	.word	0x24000a64
 800153c:	24000a8c 	.word	0x24000a8c
 8001540:	24000a9c 	.word	0x24000a9c
 8001544:	45000000 	.word	0x45000000
 8001548:	24000a8e 	.word	0x24000a8e
 800154c:	0800f270 	.word	0x0800f270
 8001550:	24000a90 	.word	0x24000a90
 8001554:	240004c4 	.word	0x240004c4

08001558 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 800155c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001560:	f005 f85f 	bl	8006622 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  counterButton++;
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <EXTI15_10_IRQHandler+0x1c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	3301      	adds	r3, #1
 800156a:	4a02      	ldr	r2, [pc, #8]	; (8001574 <EXTI15_10_IRQHandler+0x1c>)
 800156c:	6013      	str	r3, [r2, #0]
  //HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	24000a80 	.word	0x24000a80

08001578 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <DMA2_Stream0_IRQHandler+0x10>)
 800157e:	f002 ff37 	bl	80043f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	24000350 	.word	0x24000350
 800158c:	00000000 	.word	0x00000000

08001590 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
    // Data processing code here using adc_buffer
	HAL_ADC_Stop_IT(hadc);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 ffa5 	bl	80024e8 <HAL_ADC_Stop_IT>
	for(int i =0;i<ADC_BUFFER_SIZE;i++)media += adc_buffer[i];
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	e00b      	b.n	80015bc <HAL_ADC_ConvCpltCallback+0x2c>
 80015a4:	4a1a      	ldr	r2, [pc, #104]	; (8001610 <HAL_ADC_ConvCpltCallback+0x80>)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_ADC_ConvCpltCallback+0x84>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4413      	add	r3, r2
 80015b2:	4a18      	ldr	r2, [pc, #96]	; (8001614 <HAL_ADC_ConvCpltCallback+0x84>)
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3301      	adds	r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	ddf0      	ble.n	80015a4 <HAL_ADC_ConvCpltCallback+0x14>
	media=media/ADC_BUFFER_SIZE;
 80015c2:	4b14      	ldr	r3, [pc, #80]	; (8001614 <HAL_ADC_ConvCpltCallback+0x84>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a13      	ldr	r2, [pc, #76]	; (8001614 <HAL_ADC_ConvCpltCallback+0x84>)
 80015c8:	6013      	str	r3, [r2, #0]
	voltage = (media/4095.0) *3.3;
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_ADC_ConvCpltCallback+0x84>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	ee07 3a90 	vmov	s15, r3
 80015d2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80015d6:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8001600 <HAL_ADC_ConvCpltCallback+0x70>
 80015da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015de:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8001608 <HAL_ADC_ConvCpltCallback+0x78>
 80015e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <HAL_ADC_ConvCpltCallback+0x88>)
 80015ec:	edc3 7a00 	vstr	s15, [r3]
	media=0;
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_ADC_ConvCpltCallback+0x84>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]

	//voltage = (adc_buffer[0] / 4095.0) * 3.3;

}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	00000000 	.word	0x00000000
 8001604:	40affe00 	.word	0x40affe00
 8001608:	66666666 	.word	0x66666666
 800160c:	400a6666 	.word	0x400a6666
 8001610:	24000a64 	.word	0x24000a64
 8001614:	24000a84 	.word	0x24000a84
 8001618:	24000aa0 	.word	0x24000aa0

0800161c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return 1;
 8001620:	2301      	movs	r3, #1
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <_kill>:

int _kill(int pid, int sig)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001636:	f00b fdfb 	bl	800d230 <__errno>
 800163a:	4603      	mov	r3, r0
 800163c:	2216      	movs	r2, #22
 800163e:	601a      	str	r2, [r3, #0]
  return -1;
 8001640:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <_exit>:

void _exit (int status)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001654:	f04f 31ff 	mov.w	r1, #4294967295
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff ffe7 	bl	800162c <_kill>
  while (1) {}    /* Make sure we hang here */
 800165e:	e7fe      	b.n	800165e <_exit+0x12>

08001660 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	e00a      	b.n	8001688 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001672:	f3af 8000 	nop.w
 8001676:	4601      	mov	r1, r0
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	60ba      	str	r2, [r7, #8]
 800167e:	b2ca      	uxtb	r2, r1
 8001680:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	3301      	adds	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	429a      	cmp	r2, r3
 800168e:	dbf0      	blt.n	8001672 <_read+0x12>
  }

  return len;
 8001690:	687b      	ldr	r3, [r7, #4]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	e009      	b.n	80016c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	60ba      	str	r2, [r7, #8]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	dbf1      	blt.n	80016ac <_write+0x12>
  }
  return len;
 80016c8:	687b      	ldr	r3, [r7, #4]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_close>:

int _close(int file)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016fa:	605a      	str	r2, [r3, #4]
  return 0;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <_isatty>:

int _isatty(int file)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001744:	4a14      	ldr	r2, [pc, #80]	; (8001798 <_sbrk+0x5c>)
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <_sbrk+0x60>)
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001750:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <_sbrk+0x64>)
 800175a:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <_sbrk+0x68>)
 800175c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	429a      	cmp	r2, r3
 800176a:	d207      	bcs.n	800177c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800176c:	f00b fd60 	bl	800d230 <__errno>
 8001770:	4603      	mov	r3, r0
 8001772:	220c      	movs	r2, #12
 8001774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
 800177a:	e009      	b.n	8001790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <_sbrk+0x64>)
 800178c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	24080000 	.word	0x24080000
 800179c:	00000400 	.word	0x00000400
 80017a0:	24000aa4 	.word	0x24000aa4
 80017a4:	24000bf8 	.word	0x24000bf8

080017a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017ac:	4b37      	ldr	r3, [pc, #220]	; (800188c <SystemInit+0xe4>)
 80017ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017b2:	4a36      	ldr	r2, [pc, #216]	; (800188c <SystemInit+0xe4>)
 80017b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017bc:	4b34      	ldr	r3, [pc, #208]	; (8001890 <SystemInit+0xe8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	2b06      	cmp	r3, #6
 80017c6:	d807      	bhi.n	80017d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017c8:	4b31      	ldr	r3, [pc, #196]	; (8001890 <SystemInit+0xe8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f023 030f 	bic.w	r3, r3, #15
 80017d0:	4a2f      	ldr	r2, [pc, #188]	; (8001890 <SystemInit+0xe8>)
 80017d2:	f043 0307 	orr.w	r3, r3, #7
 80017d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80017d8:	4b2e      	ldr	r3, [pc, #184]	; (8001894 <SystemInit+0xec>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a2d      	ldr	r2, [pc, #180]	; (8001894 <SystemInit+0xec>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017e4:	4b2b      	ldr	r3, [pc, #172]	; (8001894 <SystemInit+0xec>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80017ea:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <SystemInit+0xec>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4929      	ldr	r1, [pc, #164]	; (8001894 <SystemInit+0xec>)
 80017f0:	4b29      	ldr	r3, [pc, #164]	; (8001898 <SystemInit+0xf0>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017f6:	4b26      	ldr	r3, [pc, #152]	; (8001890 <SystemInit+0xe8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d007      	beq.n	8001812 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001802:	4b23      	ldr	r3, [pc, #140]	; (8001890 <SystemInit+0xe8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 030f 	bic.w	r3, r3, #15
 800180a:	4a21      	ldr	r2, [pc, #132]	; (8001890 <SystemInit+0xe8>)
 800180c:	f043 0307 	orr.w	r3, r3, #7
 8001810:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001812:	4b20      	ldr	r3, [pc, #128]	; (8001894 <SystemInit+0xec>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001818:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <SystemInit+0xec>)
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <SystemInit+0xec>)
 8001820:	2200      	movs	r2, #0
 8001822:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <SystemInit+0xec>)
 8001826:	4a1d      	ldr	r2, [pc, #116]	; (800189c <SystemInit+0xf4>)
 8001828:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800182a:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <SystemInit+0xec>)
 800182c:	4a1c      	ldr	r2, [pc, #112]	; (80018a0 <SystemInit+0xf8>)
 800182e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001830:	4b18      	ldr	r3, [pc, #96]	; (8001894 <SystemInit+0xec>)
 8001832:	4a1c      	ldr	r2, [pc, #112]	; (80018a4 <SystemInit+0xfc>)
 8001834:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001836:	4b17      	ldr	r3, [pc, #92]	; (8001894 <SystemInit+0xec>)
 8001838:	2200      	movs	r2, #0
 800183a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800183c:	4b15      	ldr	r3, [pc, #84]	; (8001894 <SystemInit+0xec>)
 800183e:	4a19      	ldr	r2, [pc, #100]	; (80018a4 <SystemInit+0xfc>)
 8001840:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <SystemInit+0xec>)
 8001844:	2200      	movs	r2, #0
 8001846:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <SystemInit+0xec>)
 800184a:	4a16      	ldr	r2, [pc, #88]	; (80018a4 <SystemInit+0xfc>)
 800184c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <SystemInit+0xec>)
 8001850:	2200      	movs	r2, #0
 8001852:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001854:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <SystemInit+0xec>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <SystemInit+0xec>)
 800185a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <SystemInit+0xec>)
 8001862:	2200      	movs	r2, #0
 8001864:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <SystemInit+0x100>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <SystemInit+0x104>)
 800186c:	4013      	ands	r3, r2
 800186e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001872:	d202      	bcs.n	800187a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001874:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <SystemInit+0x108>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <SystemInit+0x10c>)
 800187c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001880:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000ed00 	.word	0xe000ed00
 8001890:	52002000 	.word	0x52002000
 8001894:	58024400 	.word	0x58024400
 8001898:	eaf6ed7f 	.word	0xeaf6ed7f
 800189c:	02020200 	.word	0x02020200
 80018a0:	01ff0000 	.word	0x01ff0000
 80018a4:	01010280 	.word	0x01010280
 80018a8:	5c001000 	.word	0x5c001000
 80018ac:	ffff0000 	.word	0xffff0000
 80018b0:	51008108 	.word	0x51008108
 80018b4:	52004000 	.word	0x52004000

080018b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018bc:	f7ff ff74 	bl	80017a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018c0:	480c      	ldr	r0, [pc, #48]	; (80018f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018c2:	490d      	ldr	r1, [pc, #52]	; (80018f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018c4:	4a0d      	ldr	r2, [pc, #52]	; (80018fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c8:	e002      	b.n	80018d0 <LoopCopyDataInit>

080018ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ce:	3304      	adds	r3, #4

080018d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d4:	d3f9      	bcc.n	80018ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018d8:	4c0a      	ldr	r4, [pc, #40]	; (8001904 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018dc:	e001      	b.n	80018e2 <LoopFillZerobss>

080018de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e0:	3204      	adds	r2, #4

080018e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e4:	d3fb      	bcc.n	80018de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018e6:	f00b fca9 	bl	800d23c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ea:	f7fe ff67 	bl	80007bc <main>
  bx  lr
 80018ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018f0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80018f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018f8:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 80018fc:	0800f63c 	.word	0x0800f63c
  ldr r2, =_sbss
 8001900:	24000298 	.word	0x24000298
  ldr r4, =_ebss
 8001904:	24000bf8 	.word	0x24000bf8

08001908 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001908:	e7fe      	b.n	8001908 <ADC3_IRQHandler>
	...

0800190c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001912:	2003      	movs	r0, #3
 8001914:	f001 ff66 	bl	80037e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001918:	f005 fe4a 	bl	80075b0 <HAL_RCC_GetSysClockFreq>
 800191c:	4602      	mov	r2, r0
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <HAL_Init+0x68>)
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	0a1b      	lsrs	r3, r3, #8
 8001924:	f003 030f 	and.w	r3, r3, #15
 8001928:	4913      	ldr	r1, [pc, #76]	; (8001978 <HAL_Init+0x6c>)
 800192a:	5ccb      	ldrb	r3, [r1, r3]
 800192c:	f003 031f 	and.w	r3, r3, #31
 8001930:	fa22 f303 	lsr.w	r3, r2, r3
 8001934:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001936:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <HAL_Init+0x68>)
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <HAL_Init+0x6c>)
 8001940:	5cd3      	ldrb	r3, [r2, r3]
 8001942:	f003 031f 	and.w	r3, r3, #31
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
 800194c:	4a0b      	ldr	r2, [pc, #44]	; (800197c <HAL_Init+0x70>)
 800194e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001950:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <HAL_Init+0x74>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001956:	2000      	movs	r0, #0
 8001958:	f000 f814 	bl	8001984 <HAL_InitTick>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e002      	b.n	800196c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001966:	f7ff fab7 	bl	8000ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	58024400 	.word	0x58024400
 8001978:	0800f27c 	.word	0x0800f27c
 800197c:	24000004 	.word	0x24000004
 8001980:	24000000 	.word	0x24000000

08001984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800198c:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <HAL_InitTick+0x60>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e021      	b.n	80019dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001998:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <HAL_InitTick+0x64>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <HAL_InitTick+0x60>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4619      	mov	r1, r3
 80019a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ae:	4618      	mov	r0, r3
 80019b0:	f001 ff4b 	bl	800384a <HAL_SYSTICK_Config>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00e      	b.n	80019dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b0f      	cmp	r3, #15
 80019c2:	d80a      	bhi.n	80019da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c4:	2200      	movs	r2, #0
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295
 80019cc:	f001 ff15 	bl	80037fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d0:	4a06      	ldr	r2, [pc, #24]	; (80019ec <HAL_InitTick+0x68>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	e000      	b.n	80019dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	2400000c 	.word	0x2400000c
 80019e8:	24000000 	.word	0x24000000
 80019ec:	24000008 	.word	0x24000008

080019f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_IncTick+0x20>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_IncTick+0x24>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4413      	add	r3, r2
 8001a00:	4a04      	ldr	r2, [pc, #16]	; (8001a14 <HAL_IncTick+0x24>)
 8001a02:	6013      	str	r3, [r2, #0]
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	2400000c 	.word	0x2400000c
 8001a14:	24000aa8 	.word	0x24000aa8

08001a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <HAL_GetTick+0x14>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	24000aa8 	.word	0x24000aa8

08001a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a38:	f7ff ffee 	bl	8001a18 <HAL_GetTick>
 8001a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a48:	d005      	beq.n	8001a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <HAL_Delay+0x44>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4413      	add	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a56:	bf00      	nop
 8001a58:	f7ff ffde 	bl	8001a18 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d8f7      	bhi.n	8001a58 <HAL_Delay+0x28>
  {
  }
}
 8001a68:	bf00      	nop
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	2400000c 	.word	0x2400000c

08001a78 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a7c:	4b03      	ldr	r3, [pc, #12]	; (8001a8c <HAL_GetREVID+0x14>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	0c1b      	lsrs	r3, r3, #16
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	5c001000 	.word	0x5c001000

08001a90 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001aa0:	4904      	ldr	r1, [pc, #16]	; (8001ab4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	58000400 	.word	0x58000400

08001ab8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	431a      	orrs	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	609a      	str	r2, [r3, #8]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
 8001b2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3360      	adds	r3, #96	; 0x60
 8001b32:	461a      	mov	r2, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	430b      	orrs	r3, r1
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001b54:	bf00      	nop
 8001b56:	371c      	adds	r7, #28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f003 031f 	and.w	r3, r3, #31
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b80:	431a      	orrs	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	611a      	str	r2, [r3, #16]
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b087      	sub	sp, #28
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	3360      	adds	r3, #96	; 0x60
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	601a      	str	r2, [r3, #0]
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	371c      	adds	r7, #28
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b087      	sub	sp, #28
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	3330      	adds	r3, #48	; 0x30
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	4413      	add	r3, r2
 8001c0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	211f      	movs	r1, #31
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	401a      	ands	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	0e9b      	lsrs	r3, r3, #26
 8001c26:	f003 011f 	and.w	r1, r3, #31
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f003 031f 	and.w	r3, r3, #31
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	431a      	orrs	r2, r3
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c3a:	bf00      	nop
 8001c3c:	371c      	adds	r7, #28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f023 0203 	bic.w	r2, r3, #3
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	60da      	str	r2, [r3, #12]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	3314      	adds	r3, #20
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	0e5b      	lsrs	r3, r3, #25
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	4413      	add	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	0d1b      	lsrs	r3, r3, #20
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	2107      	movs	r1, #7
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	401a      	ands	r2, r3
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	0d1b      	lsrs	r3, r3, #20
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cb6:	bf00      	nop
 8001cb8:	371c      	adds	r7, #28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	401a      	ands	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f003 0318 	and.w	r3, r3, #24
 8001ce6:	4908      	ldr	r1, [pc, #32]	; (8001d08 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ce8:	40d9      	lsrs	r1, r3
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	400b      	ands	r3, r1
 8001cee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	000fffff 	.word	0x000fffff

08001d0c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 031f 	and.w	r3, r3, #31
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6093      	str	r3, [r2, #8]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	5fffffc0 	.word	0x5fffffc0

08001d4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d60:	d101      	bne.n	8001d66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <LL_ADC_EnableInternalRegulator+0x24>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	6fffffc0 	.word	0x6fffffc0

08001d9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001db0:	d101      	bne.n	8001db6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <LL_ADC_Enable+0x24>)
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	f043 0201 	orr.w	r2, r3, #1
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	7fffffc0 	.word	0x7fffffc0

08001dec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <LL_ADC_Disable+0x24>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	f043 0202 	orr.w	r2, r3, #2
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	7fffffc0 	.word	0x7fffffc0

08001e14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <LL_ADC_IsEnabled+0x18>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <LL_ADC_IsEnabled+0x1a>
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d101      	bne.n	8001e52 <LL_ADC_IsDisableOngoing+0x18>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <LL_ADC_IsDisableOngoing+0x1a>
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <LL_ADC_REG_StartConversion+0x24>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	f043 0204 	orr.w	r2, r3, #4
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	7fffffc0 	.word	0x7fffffc0

08001e88 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <LL_ADC_REG_StopConversion+0x24>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	f043 0210 	orr.w	r2, r3, #16
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	7fffffc0 	.word	0x7fffffc0

08001eb0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d101      	bne.n	8001ec8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <LL_ADC_INJ_StopConversion+0x24>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	f043 0220 	orr.w	r2, r3, #32
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	7fffffc0 	.word	0x7fffffc0

08001f00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d101      	bne.n	8001f18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f28:	b590      	push	{r4, r7, lr}
 8001f2a:	b089      	sub	sp, #36	; 0x24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e18f      	b.n	8002262 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d109      	bne.n	8001f64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7fe ffdb 	bl	8000f0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff feef 	bl	8001d4c <LL_ADC_IsDeepPowerDownEnabled>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d004      	beq.n	8001f7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fed5 	bl	8001d28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff0a 	bl	8001d9c <LL_ADC_IsInternalRegulatorEnabled>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d114      	bne.n	8001fb8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff feee 	bl	8001d74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f98:	4b87      	ldr	r3, [pc, #540]	; (80021b8 <HAL_ADC_Init+0x290>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	099b      	lsrs	r3, r3, #6
 8001f9e:	4a87      	ldr	r2, [pc, #540]	; (80021bc <HAL_ADC_Init+0x294>)
 8001fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa4:	099b      	lsrs	r3, r3, #6
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001faa:	e002      	b.n	8001fb2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f9      	bne.n	8001fac <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff feed 	bl	8001d9c <LL_ADC_IsInternalRegulatorEnabled>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10d      	bne.n	8001fe4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fcc:	f043 0210 	orr.w	r2, r3, #16
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd8:	f043 0201 	orr.w	r2, r3, #1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff61 	bl	8001eb0 <LL_ADC_REG_IsConversionOngoing>
 8001fee:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff4:	f003 0310 	and.w	r3, r3, #16
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f040 8129 	bne.w	8002250 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2b00      	cmp	r3, #0
 8002002:	f040 8125 	bne.w	8002250 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800200e:	f043 0202 	orr.w	r2, r3, #2
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fefa 	bl	8001e14 <LL_ADC_IsEnabled>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d136      	bne.n	8002094 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a65      	ldr	r2, [pc, #404]	; (80021c0 <HAL_ADC_Init+0x298>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d004      	beq.n	800203a <HAL_ADC_Init+0x112>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a63      	ldr	r2, [pc, #396]	; (80021c4 <HAL_ADC_Init+0x29c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d10e      	bne.n	8002058 <HAL_ADC_Init+0x130>
 800203a:	4861      	ldr	r0, [pc, #388]	; (80021c0 <HAL_ADC_Init+0x298>)
 800203c:	f7ff feea 	bl	8001e14 <LL_ADC_IsEnabled>
 8002040:	4604      	mov	r4, r0
 8002042:	4860      	ldr	r0, [pc, #384]	; (80021c4 <HAL_ADC_Init+0x29c>)
 8002044:	f7ff fee6 	bl	8001e14 <LL_ADC_IsEnabled>
 8002048:	4603      	mov	r3, r0
 800204a:	4323      	orrs	r3, r4
 800204c:	2b00      	cmp	r3, #0
 800204e:	bf0c      	ite	eq
 8002050:	2301      	moveq	r3, #1
 8002052:	2300      	movne	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	e008      	b.n	800206a <HAL_ADC_Init+0x142>
 8002058:	485b      	ldr	r0, [pc, #364]	; (80021c8 <HAL_ADC_Init+0x2a0>)
 800205a:	f7ff fedb 	bl	8001e14 <LL_ADC_IsEnabled>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	bf0c      	ite	eq
 8002064:	2301      	moveq	r3, #1
 8002066:	2300      	movne	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d012      	beq.n	8002094 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a53      	ldr	r2, [pc, #332]	; (80021c0 <HAL_ADC_Init+0x298>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d004      	beq.n	8002082 <HAL_ADC_Init+0x15a>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a51      	ldr	r2, [pc, #324]	; (80021c4 <HAL_ADC_Init+0x29c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d101      	bne.n	8002086 <HAL_ADC_Init+0x15e>
 8002082:	4a52      	ldr	r2, [pc, #328]	; (80021cc <HAL_ADC_Init+0x2a4>)
 8002084:	e000      	b.n	8002088 <HAL_ADC_Init+0x160>
 8002086:	4a52      	ldr	r2, [pc, #328]	; (80021d0 <HAL_ADC_Init+0x2a8>)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	4619      	mov	r1, r3
 800208e:	4610      	mov	r0, r2
 8002090:	f7ff fd12 	bl	8001ab8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002094:	f7ff fcf0 	bl	8001a78 <HAL_GetREVID>
 8002098:	4603      	mov	r3, r0
 800209a:	f241 0203 	movw	r2, #4099	; 0x1003
 800209e:	4293      	cmp	r3, r2
 80020a0:	d914      	bls.n	80020cc <HAL_ADC_Init+0x1a4>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b10      	cmp	r3, #16
 80020a8:	d110      	bne.n	80020cc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	7d5b      	ldrb	r3, [r3, #21]
 80020ae:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020b4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80020ba:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	7f1b      	ldrb	r3, [r3, #28]
 80020c0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80020c2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020c4:	f043 030c 	orr.w	r3, r3, #12
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	e00d      	b.n	80020e8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	7d5b      	ldrb	r3, [r3, #21]
 80020d0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020d6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80020dc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	7f1b      	ldrb	r3, [r3, #28]
 80020e2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	7f1b      	ldrb	r3, [r3, #28]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d106      	bne.n	80020fe <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	045b      	lsls	r3, r3, #17
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	2b00      	cmp	r3, #0
 8002104:	d009      	beq.n	800211a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002112:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	4b2c      	ldr	r3, [pc, #176]	; (80021d4 <HAL_ADC_Init+0x2ac>)
 8002122:	4013      	ands	r3, r2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	69b9      	ldr	r1, [r7, #24]
 800212a:	430b      	orrs	r3, r1
 800212c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff febc 	bl	8001eb0 <LL_ADC_REG_IsConversionOngoing>
 8002138:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fede 	bl	8001f00 <LL_ADC_INJ_IsConversionOngoing>
 8002144:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d15f      	bne.n	800220c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d15c      	bne.n	800220c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	7d1b      	ldrb	r3, [r3, #20]
 8002156:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	4b1c      	ldr	r3, [pc, #112]	; (80021d8 <HAL_ADC_Init+0x2b0>)
 8002168:	4013      	ands	r3, r2
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	69b9      	ldr	r1, [r7, #24]
 8002170:	430b      	orrs	r3, r1
 8002172:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800217a:	2b01      	cmp	r3, #1
 800217c:	d130      	bne.n	80021e0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	691a      	ldr	r2, [r3, #16]
 800218a:	4b14      	ldr	r3, [pc, #80]	; (80021dc <HAL_ADC_Init+0x2b4>)
 800218c:	4013      	ands	r3, r2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002192:	3a01      	subs	r2, #1
 8002194:	0411      	lsls	r1, r2, #16
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800219a:	4311      	orrs	r1, r2
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021a0:	4311      	orrs	r1, r2
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021a6:	430a      	orrs	r2, r1
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	611a      	str	r2, [r3, #16]
 80021b4:	e01c      	b.n	80021f0 <HAL_ADC_Init+0x2c8>
 80021b6:	bf00      	nop
 80021b8:	24000000 	.word	0x24000000
 80021bc:	053e2d63 	.word	0x053e2d63
 80021c0:	40022000 	.word	0x40022000
 80021c4:	40022100 	.word	0x40022100
 80021c8:	58026000 	.word	0x58026000
 80021cc:	40022300 	.word	0x40022300
 80021d0:	58026300 	.word	0x58026300
 80021d4:	fff0c003 	.word	0xfff0c003
 80021d8:	ffffbffc 	.word	0xffffbffc
 80021dc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691a      	ldr	r2, [r3, #16]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f001 f80c 	bl	8003224 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d10c      	bne.n	800222e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f023 010f 	bic.w	r1, r3, #15
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	1e5a      	subs	r2, r3, #1
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	631a      	str	r2, [r3, #48]	; 0x30
 800222c:	e007      	b.n	800223e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 020f 	bic.w	r2, r2, #15
 800223c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002242:	f023 0303 	bic.w	r3, r3, #3
 8002246:	f043 0201 	orr.w	r2, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	655a      	str	r2, [r3, #84]	; 0x54
 800224e:	e007      	b.n	8002260 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002254:	f043 0210 	orr.w	r2, r3, #16
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002260:	7ffb      	ldrb	r3, [r7, #31]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3724      	adds	r7, #36	; 0x24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd90      	pop	{r4, r7, pc}
 800226a:	bf00      	nop

0800226c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a92      	ldr	r2, [pc, #584]	; (80024c4 <HAL_ADC_Start_IT+0x258>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d004      	beq.n	8002288 <HAL_ADC_Start_IT+0x1c>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a91      	ldr	r2, [pc, #580]	; (80024c8 <HAL_ADC_Start_IT+0x25c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d101      	bne.n	800228c <HAL_ADC_Start_IT+0x20>
 8002288:	4b90      	ldr	r3, [pc, #576]	; (80024cc <HAL_ADC_Start_IT+0x260>)
 800228a:	e000      	b.n	800228e <HAL_ADC_Start_IT+0x22>
 800228c:	4b90      	ldr	r3, [pc, #576]	; (80024d0 <HAL_ADC_Start_IT+0x264>)
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fd3c 	bl	8001d0c <LL_ADC_GetMultimode>
 8002294:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fe08 	bl	8001eb0 <LL_ADC_REG_IsConversionOngoing>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f040 8118 	bne.w	80024d8 <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_ADC_Start_IT+0x4a>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e113      	b.n	80024de <HAL_ADC_Start_IT+0x272>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 fe32 	bl	8002f28 <ADC_Enable>
 80022c4:	4603      	mov	r3, r0
 80022c6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80022c8:	7dfb      	ldrb	r3, [r7, #23]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f040 80f5 	bne.w	80024ba <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022d4:	4b7f      	ldr	r3, [pc, #508]	; (80024d4 <HAL_ADC_Start_IT+0x268>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a78      	ldr	r2, [pc, #480]	; (80024c8 <HAL_ADC_Start_IT+0x25c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d002      	beq.n	80022f0 <HAL_ADC_Start_IT+0x84>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	e000      	b.n	80022f2 <HAL_ADC_Start_IT+0x86>
 80022f0:	4b74      	ldr	r3, [pc, #464]	; (80024c4 <HAL_ADC_Start_IT+0x258>)
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d002      	beq.n	8002300 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d105      	bne.n	800230c <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002304:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d006      	beq.n	8002326 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231c:	f023 0206 	bic.w	r2, r3, #6
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	659a      	str	r2, [r3, #88]	; 0x58
 8002324:	e002      	b.n	800232c <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	221c      	movs	r2, #28
 8002332:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 021c 	bic.w	r2, r2, #28
 800234a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	2b08      	cmp	r3, #8
 8002352:	d108      	bne.n	8002366 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0208 	orr.w	r2, r2, #8
 8002362:	605a      	str	r2, [r3, #4]
          break;
 8002364:	e008      	b.n	8002378 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f042 0204 	orr.w	r2, r2, #4
 8002374:	605a      	str	r2, [r3, #4]
          break;
 8002376:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237c:	2b00      	cmp	r3, #0
 800237e:	d107      	bne.n	8002390 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0210 	orr.w	r2, r2, #16
 800238e:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a4c      	ldr	r2, [pc, #304]	; (80024c8 <HAL_ADC_Start_IT+0x25c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d002      	beq.n	80023a0 <HAL_ADC_Start_IT+0x134>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	e000      	b.n	80023a2 <HAL_ADC_Start_IT+0x136>
 80023a0:	4b48      	ldr	r3, [pc, #288]	; (80024c4 <HAL_ADC_Start_IT+0x258>)
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6812      	ldr	r2, [r2, #0]
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d008      	beq.n	80023bc <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	2b05      	cmp	r3, #5
 80023b4:	d002      	beq.n	80023bc <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	2b09      	cmp	r3, #9
 80023ba:	d13a      	bne.n	8002432 <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d02d      	beq.n	8002426 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d110      	bne.n	8002404 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0220 	bic.w	r2, r2, #32
 80023f0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002400:	605a      	str	r2, [r3, #4]
              break;
 8002402:	e010      	b.n	8002426 <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002412:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0220 	orr.w	r2, r2, #32
 8002422:	605a      	str	r2, [r3, #4]
              break;
 8002424:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fd18 	bl	8001e60 <LL_ADC_REG_StartConversion>
 8002430:	e054      	b.n	80024dc <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002436:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a21      	ldr	r2, [pc, #132]	; (80024c8 <HAL_ADC_Start_IT+0x25c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d002      	beq.n	800244e <HAL_ADC_Start_IT+0x1e2>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	e000      	b.n	8002450 <HAL_ADC_Start_IT+0x1e4>
 800244e:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <HAL_ADC_Start_IT+0x258>)
 8002450:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d03e      	beq.n	80024dc <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002462:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002466:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2b08      	cmp	r3, #8
 8002474:	d110      	bne.n	8002498 <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0220 	bic.w	r2, r2, #32
 8002484:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002494:	605a      	str	r2, [r3, #4]
              break;
 8002496:	e021      	b.n	80024dc <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024a6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0220 	orr.w	r2, r2, #32
 80024b6:	605a      	str	r2, [r3, #4]
              break;
 80024b8:	e010      	b.n	80024dc <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80024c2:	e00b      	b.n	80024dc <HAL_ADC_Start_IT+0x270>
 80024c4:	40022000 	.word	0x40022000
 80024c8:	40022100 	.word	0x40022100
 80024cc:	40022300 	.word	0x40022300
 80024d0:	58026300 	.word	0x58026300
 80024d4:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024d8:	2302      	movs	r3, #2
 80024da:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80024dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop

080024e8 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_ADC_Stop_IT+0x16>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e029      	b.n	8002552 <HAL_ADC_Stop_IT+0x6a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002506:	2103      	movs	r1, #3
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 fc51 	bl	8002db0 <ADC_ConversionStop>
 800250e:	4603      	mov	r3, r0
 8002510:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d117      	bne.n	8002548 <HAL_ADC_Stop_IT+0x60>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 021c 	bic.w	r2, r2, #28
 8002526:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 fd87 	bl	800303c <ADC_Disable>
 800252e:	4603      	mov	r3, r0
 8002530:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d107      	bne.n	8002548 <HAL_ADC_Stop_IT+0x60>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800253c:	4b07      	ldr	r3, [pc, #28]	; (800255c <HAL_ADC_Stop_IT+0x74>)
 800253e:	4013      	ands	r3, r2
 8002540:	f043 0201 	orr.w	r2, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002550:	7bfb      	ldrb	r3, [r7, #15]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	ffffeefe 	.word	0xffffeefe

08002560 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a55      	ldr	r2, [pc, #340]	; (80026c8 <HAL_ADC_Start_DMA+0x168>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d004      	beq.n	8002580 <HAL_ADC_Start_DMA+0x20>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a54      	ldr	r2, [pc, #336]	; (80026cc <HAL_ADC_Start_DMA+0x16c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d101      	bne.n	8002584 <HAL_ADC_Start_DMA+0x24>
 8002580:	4b53      	ldr	r3, [pc, #332]	; (80026d0 <HAL_ADC_Start_DMA+0x170>)
 8002582:	e000      	b.n	8002586 <HAL_ADC_Start_DMA+0x26>
 8002584:	4b53      	ldr	r3, [pc, #332]	; (80026d4 <HAL_ADC_Start_DMA+0x174>)
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff fbc0 	bl	8001d0c <LL_ADC_GetMultimode>
 800258c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fc8c 	bl	8001eb0 <LL_ADC_REG_IsConversionOngoing>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	f040 808c 	bne.w	80026b8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_ADC_Start_DMA+0x4e>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e087      	b.n	80026be <HAL_ADC_Start_DMA+0x15e>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	2b05      	cmp	r3, #5
 80025c0:	d002      	beq.n	80025c8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	2b09      	cmp	r3, #9
 80025c6:	d170      	bne.n	80026aa <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 fcad 	bl	8002f28 <ADC_Enable>
 80025ce:	4603      	mov	r3, r0
 80025d0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80025d2:	7dfb      	ldrb	r3, [r7, #23]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d163      	bne.n	80026a0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025dc:	4b3e      	ldr	r3, [pc, #248]	; (80026d8 <HAL_ADC_Start_DMA+0x178>)
 80025de:	4013      	ands	r3, r2
 80025e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a37      	ldr	r2, [pc, #220]	; (80026cc <HAL_ADC_Start_DMA+0x16c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d002      	beq.n	80025f8 <HAL_ADC_Start_DMA+0x98>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	e000      	b.n	80025fa <HAL_ADC_Start_DMA+0x9a>
 80025f8:	4b33      	ldr	r3, [pc, #204]	; (80026c8 <HAL_ADC_Start_DMA+0x168>)
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	6812      	ldr	r2, [r2, #0]
 80025fe:	4293      	cmp	r3, r2
 8002600:	d002      	beq.n	8002608 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d105      	bne.n	8002614 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d006      	beq.n	800262e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002624:	f023 0206 	bic.w	r2, r3, #6
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	659a      	str	r2, [r3, #88]	; 0x58
 800262c:	e002      	b.n	8002634 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002638:	4a28      	ldr	r2, [pc, #160]	; (80026dc <HAL_ADC_Start_DMA+0x17c>)
 800263a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002640:	4a27      	ldr	r2, [pc, #156]	; (80026e0 <HAL_ADC_Start_DMA+0x180>)
 8002642:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002648:	4a26      	ldr	r2, [pc, #152]	; (80026e4 <HAL_ADC_Start_DMA+0x184>)
 800264a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	221c      	movs	r2, #28
 8002652:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0210 	orr.w	r2, r2, #16
 800266a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	4619      	mov	r1, r3
 8002676:	4610      	mov	r0, r2
 8002678:	f7ff fae5 	bl	8001c46 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	3340      	adds	r3, #64	; 0x40
 8002686:	4619      	mov	r1, r3
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f001 fc46 	bl	8003f1c <HAL_DMA_Start_IT>
 8002690:	4603      	mov	r3, r0
 8002692:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff fbe1 	bl	8001e60 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800269e:	e00d      	b.n	80026bc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80026a8:	e008      	b.n	80026bc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80026b6:	e001      	b.n	80026bc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026b8:	2302      	movs	r3, #2
 80026ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80026bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40022000 	.word	0x40022000
 80026cc:	40022100 	.word	0x40022100
 80026d0:	40022300 	.word	0x40022300
 80026d4:	58026300 	.word	0x58026300
 80026d8:	fffff0fe 	.word	0xfffff0fe
 80026dc:	080030fb 	.word	0x080030fb
 80026e0:	080031d3 	.word	0x080031d3
 80026e4:	080031ef 	.word	0x080031ef

080026e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002710:	b590      	push	{r4, r7, lr}
 8002712:	b0a1      	sub	sp, #132	; 0x84
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002720:	2300      	movs	r3, #0
 8002722:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4a9d      	ldr	r2, [pc, #628]	; (80029a0 <HAL_ADC_ConfigChannel+0x290>)
 800272a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_ADC_ConfigChannel+0x2a>
 8002736:	2302      	movs	r3, #2
 8002738:	e321      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x66e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fbb2 	bl	8001eb0 <LL_ADC_REG_IsConversionOngoing>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	f040 8306 	bne.w	8002d60 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800275c:	2b00      	cmp	r3, #0
 800275e:	d108      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x62>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	0e9b      	lsrs	r3, r3, #26
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	2201      	movs	r2, #1
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	e016      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x90>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800277a:	fa93 f3a3 	rbit	r3, r3
 800277e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002780:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002782:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002784:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800278a:	2320      	movs	r3, #32
 800278c:	e003      	b.n	8002796 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800278e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002790:	fab3 f383 	clz	r3, r3
 8002794:	b2db      	uxtb	r3, r3
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	2201      	movs	r2, #1
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	69d1      	ldr	r1, [r2, #28]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	430b      	orrs	r3, r1
 80027ac:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	6859      	ldr	r1, [r3, #4]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	f7ff fa17 	bl	8001bee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fb73 	bl	8001eb0 <LL_ADC_REG_IsConversionOngoing>
 80027ca:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff fb95 	bl	8001f00 <LL_ADC_INJ_IsConversionOngoing>
 80027d6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f040 80b3 	bne.w	8002946 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f040 80af 	bne.w	8002946 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6818      	ldr	r0, [r3, #0]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	6819      	ldr	r1, [r3, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	461a      	mov	r2, r3
 80027f6:	f7ff fa39 	bl	8001c6c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80027fa:	4b6a      	ldr	r3, [pc, #424]	; (80029a4 <HAL_ADC_ConfigChannel+0x294>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002802:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002806:	d10b      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x110>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	089b      	lsrs	r3, r3, #2
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	e01d      	b.n	800285c <HAL_ADC_ConfigChannel+0x14c>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10b      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x136>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	089b      	lsrs	r3, r3, #2
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	e00a      	b.n	800285c <HAL_ADC_ConfigChannel+0x14c>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	089b      	lsrs	r3, r3, #2
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	2b04      	cmp	r3, #4
 8002864:	d027      	beq.n	80028b6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6919      	ldr	r1, [r3, #16]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002874:	f7ff f954 	bl	8001b20 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	6919      	ldr	r1, [r3, #16]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	7e5b      	ldrb	r3, [r3, #25]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d102      	bne.n	800288e <HAL_ADC_ConfigChannel+0x17e>
 8002888:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800288c:	e000      	b.n	8002890 <HAL_ADC_ConfigChannel+0x180>
 800288e:	2300      	movs	r3, #0
 8002890:	461a      	mov	r2, r3
 8002892:	f7ff f97e 	bl	8001b92 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6919      	ldr	r1, [r3, #16]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	7e1b      	ldrb	r3, [r3, #24]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d102      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x19c>
 80028a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028aa:	e000      	b.n	80028ae <HAL_ADC_ConfigChannel+0x19e>
 80028ac:	2300      	movs	r3, #0
 80028ae:	461a      	mov	r2, r3
 80028b0:	f7ff f956 	bl	8001b60 <LL_ADC_SetDataRightShift>
 80028b4:	e047      	b.n	8002946 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	069b      	lsls	r3, r3, #26
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d107      	bne.n	80028da <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028d8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	069b      	lsls	r3, r3, #26
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d107      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028fc:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002904:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	069b      	lsls	r3, r3, #26
 800290e:	429a      	cmp	r2, r3
 8002910:	d107      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002920:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002928:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	069b      	lsls	r3, r3, #26
 8002932:	429a      	cmp	r2, r3
 8002934:	d107      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002944:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fa62 	bl	8001e14 <LL_ADC_IsEnabled>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	f040 820d 	bne.w	8002d72 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	6819      	ldr	r1, [r3, #0]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	461a      	mov	r2, r3
 8002966:	f7ff f9ad 	bl	8001cc4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	4a0c      	ldr	r2, [pc, #48]	; (80029a0 <HAL_ADC_ConfigChannel+0x290>)
 8002970:	4293      	cmp	r3, r2
 8002972:	f040 8133 	bne.w	8002bdc <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002982:	2b00      	cmp	r3, #0
 8002984:	d110      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x298>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	0e9b      	lsrs	r3, r3, #26
 800298c:	3301      	adds	r3, #1
 800298e:	f003 031f 	and.w	r3, r3, #31
 8002992:	2b09      	cmp	r3, #9
 8002994:	bf94      	ite	ls
 8002996:	2301      	movls	r3, #1
 8002998:	2300      	movhi	r3, #0
 800299a:	b2db      	uxtb	r3, r3
 800299c:	e01e      	b.n	80029dc <HAL_ADC_ConfigChannel+0x2cc>
 800299e:	bf00      	nop
 80029a0:	47ff0000 	.word	0x47ff0000
 80029a4:	5c001000 	.word	0x5c001000
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029b0:	fa93 f3a3 	rbit	r3, r3
 80029b4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80029b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80029ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80029c0:	2320      	movs	r3, #32
 80029c2:	e003      	b.n	80029cc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80029c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029c6:	fab3 f383 	clz	r3, r3
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	3301      	adds	r3, #1
 80029ce:	f003 031f 	and.w	r3, r3, #31
 80029d2:	2b09      	cmp	r3, #9
 80029d4:	bf94      	ite	ls
 80029d6:	2301      	movls	r3, #1
 80029d8:	2300      	movhi	r3, #0
 80029da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d079      	beq.n	8002ad4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d107      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x2ec>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	0e9b      	lsrs	r3, r3, #26
 80029f2:	3301      	adds	r3, #1
 80029f4:	069b      	lsls	r3, r3, #26
 80029f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029fa:	e015      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x318>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a04:	fa93 f3a3 	rbit	r3, r3
 8002a08:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a0c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002a14:	2320      	movs	r3, #32
 8002a16:	e003      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	3301      	adds	r3, #1
 8002a22:	069b      	lsls	r3, r3, #26
 8002a24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d109      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x338>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	0e9b      	lsrs	r3, r3, #26
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	2101      	movs	r1, #1
 8002a42:	fa01 f303 	lsl.w	r3, r1, r3
 8002a46:	e017      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x368>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a50:	fa93 f3a3 	rbit	r3, r3
 8002a54:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a58:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002a60:	2320      	movs	r3, #32
 8002a62:	e003      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a66:	fab3 f383 	clz	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	f003 031f 	and.w	r3, r3, #31
 8002a72:	2101      	movs	r1, #1
 8002a74:	fa01 f303 	lsl.w	r3, r1, r3
 8002a78:	ea42 0103 	orr.w	r1, r2, r3
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10a      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x38e>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	0e9b      	lsrs	r3, r3, #26
 8002a8e:	3301      	adds	r3, #1
 8002a90:	f003 021f 	and.w	r2, r3, #31
 8002a94:	4613      	mov	r3, r2
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4413      	add	r3, r2
 8002a9a:	051b      	lsls	r3, r3, #20
 8002a9c:	e018      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x3c0>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002ab6:	2320      	movs	r3, #32
 8002ab8:	e003      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002abc:	fab3 f383 	clz	r3, r3
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f003 021f 	and.w	r2, r3, #31
 8002ac8:	4613      	mov	r3, r2
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	4413      	add	r3, r2
 8002ace:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	e07e      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d107      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x3e0>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	0e9b      	lsrs	r3, r3, #26
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	069b      	lsls	r3, r3, #26
 8002aea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aee:	e015      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x40c>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	fa93 f3a3 	rbit	r3, r3
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002b08:	2320      	movs	r3, #32
 8002b0a:	e003      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0e:	fab3 f383 	clz	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	3301      	adds	r3, #1
 8002b16:	069b      	lsls	r3, r3, #26
 8002b18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d109      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x42c>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	0e9b      	lsrs	r3, r3, #26
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	2101      	movs	r1, #1
 8002b36:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3a:	e017      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x45c>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	61bb      	str	r3, [r7, #24]
  return result;
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002b54:	2320      	movs	r3, #32
 8002b56:	e003      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	3301      	adds	r3, #1
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	2101      	movs	r1, #1
 8002b68:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6c:	ea42 0103 	orr.w	r1, r2, r3
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10d      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x488>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	0e9b      	lsrs	r3, r3, #26
 8002b82:	3301      	adds	r3, #1
 8002b84:	f003 021f 	and.w	r2, r3, #31
 8002b88:	4613      	mov	r3, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3b1e      	subs	r3, #30
 8002b90:	051b      	lsls	r3, r3, #20
 8002b92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b96:	e01b      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x4c0>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	fa93 f3a3 	rbit	r3, r3
 8002ba4:	60fb      	str	r3, [r7, #12]
  return result;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002bb0:	2320      	movs	r3, #32
 8002bb2:	e003      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	f003 021f 	and.w	r2, r3, #31
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3b1e      	subs	r3, #30
 8002bca:	051b      	lsls	r3, r3, #20
 8002bcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	6892      	ldr	r2, [r2, #8]
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	f7ff f848 	bl	8001c6c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f280 80c6 	bge.w	8002d72 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a67      	ldr	r2, [pc, #412]	; (8002d88 <HAL_ADC_ConfigChannel+0x678>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d004      	beq.n	8002bfa <HAL_ADC_ConfigChannel+0x4ea>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a65      	ldr	r2, [pc, #404]	; (8002d8c <HAL_ADC_ConfigChannel+0x67c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d101      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x4ee>
 8002bfa:	4b65      	ldr	r3, [pc, #404]	; (8002d90 <HAL_ADC_ConfigChannel+0x680>)
 8002bfc:	e000      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x4f0>
 8002bfe:	4b65      	ldr	r3, [pc, #404]	; (8002d94 <HAL_ADC_ConfigChannel+0x684>)
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fe ff7f 	bl	8001b04 <LL_ADC_GetCommonPathInternalCh>
 8002c06:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a5e      	ldr	r2, [pc, #376]	; (8002d88 <HAL_ADC_ConfigChannel+0x678>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d004      	beq.n	8002c1c <HAL_ADC_ConfigChannel+0x50c>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a5d      	ldr	r2, [pc, #372]	; (8002d8c <HAL_ADC_ConfigChannel+0x67c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d10e      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x52a>
 8002c1c:	485a      	ldr	r0, [pc, #360]	; (8002d88 <HAL_ADC_ConfigChannel+0x678>)
 8002c1e:	f7ff f8f9 	bl	8001e14 <LL_ADC_IsEnabled>
 8002c22:	4604      	mov	r4, r0
 8002c24:	4859      	ldr	r0, [pc, #356]	; (8002d8c <HAL_ADC_ConfigChannel+0x67c>)
 8002c26:	f7ff f8f5 	bl	8001e14 <LL_ADC_IsEnabled>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4323      	orrs	r3, r4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	bf0c      	ite	eq
 8002c32:	2301      	moveq	r3, #1
 8002c34:	2300      	movne	r3, #0
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	e008      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x53c>
 8002c3a:	4857      	ldr	r0, [pc, #348]	; (8002d98 <HAL_ADC_ConfigChannel+0x688>)
 8002c3c:	f7ff f8ea 	bl	8001e14 <LL_ADC_IsEnabled>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	bf0c      	ite	eq
 8002c46:	2301      	moveq	r3, #1
 8002c48:	2300      	movne	r3, #0
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d07d      	beq.n	8002d4c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a51      	ldr	r2, [pc, #324]	; (8002d9c <HAL_ADC_ConfigChannel+0x68c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d130      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x5ac>
 8002c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d12b      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a4b      	ldr	r2, [pc, #300]	; (8002d98 <HAL_ADC_ConfigChannel+0x688>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	f040 8081 	bne.w	8002d72 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a44      	ldr	r2, [pc, #272]	; (8002d88 <HAL_ADC_ConfigChannel+0x678>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d004      	beq.n	8002c84 <HAL_ADC_ConfigChannel+0x574>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a43      	ldr	r2, [pc, #268]	; (8002d8c <HAL_ADC_ConfigChannel+0x67c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d101      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x578>
 8002c84:	4a42      	ldr	r2, [pc, #264]	; (8002d90 <HAL_ADC_ConfigChannel+0x680>)
 8002c86:	e000      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x57a>
 8002c88:	4a42      	ldr	r2, [pc, #264]	; (8002d94 <HAL_ADC_ConfigChannel+0x684>)
 8002c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c90:	4619      	mov	r1, r3
 8002c92:	4610      	mov	r0, r2
 8002c94:	f7fe ff23 	bl	8001ade <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c98:	4b41      	ldr	r3, [pc, #260]	; (8002da0 <HAL_ADC_ConfigChannel+0x690>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	099b      	lsrs	r3, r3, #6
 8002c9e:	4a41      	ldr	r2, [pc, #260]	; (8002da4 <HAL_ADC_ConfigChannel+0x694>)
 8002ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca4:	099b      	lsrs	r3, r3, #6
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002cac:	e002      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f9      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cba:	e05a      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a39      	ldr	r2, [pc, #228]	; (8002da8 <HAL_ADC_ConfigChannel+0x698>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d11e      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x5f4>
 8002cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d119      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a30      	ldr	r2, [pc, #192]	; (8002d98 <HAL_ADC_ConfigChannel+0x688>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d14b      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a2a      	ldr	r2, [pc, #168]	; (8002d88 <HAL_ADC_ConfigChannel+0x678>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d004      	beq.n	8002cee <HAL_ADC_ConfigChannel+0x5de>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a28      	ldr	r2, [pc, #160]	; (8002d8c <HAL_ADC_ConfigChannel+0x67c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x5e2>
 8002cee:	4a28      	ldr	r2, [pc, #160]	; (8002d90 <HAL_ADC_ConfigChannel+0x680>)
 8002cf0:	e000      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x5e4>
 8002cf2:	4a28      	ldr	r2, [pc, #160]	; (8002d94 <HAL_ADC_ConfigChannel+0x684>)
 8002cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	f7fe feee 	bl	8001ade <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d02:	e036      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a28      	ldr	r2, [pc, #160]	; (8002dac <HAL_ADC_ConfigChannel+0x69c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d131      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x662>
 8002d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d12c      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a1e      	ldr	r2, [pc, #120]	; (8002d98 <HAL_ADC_ConfigChannel+0x688>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d127      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a18      	ldr	r2, [pc, #96]	; (8002d88 <HAL_ADC_ConfigChannel+0x678>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d004      	beq.n	8002d36 <HAL_ADC_ConfigChannel+0x626>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a16      	ldr	r2, [pc, #88]	; (8002d8c <HAL_ADC_ConfigChannel+0x67c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d101      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x62a>
 8002d36:	4a16      	ldr	r2, [pc, #88]	; (8002d90 <HAL_ADC_ConfigChannel+0x680>)
 8002d38:	e000      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x62c>
 8002d3a:	4a16      	ldr	r2, [pc, #88]	; (8002d94 <HAL_ADC_ConfigChannel+0x684>)
 8002d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d42:	4619      	mov	r1, r3
 8002d44:	4610      	mov	r0, r2
 8002d46:	f7fe feca 	bl	8001ade <LL_ADC_SetCommonPathInternalCh>
 8002d4a:	e012      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	f043 0220 	orr.w	r2, r3, #32
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002d5e:	e008      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d64:	f043 0220 	orr.w	r2, r3, #32
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d7a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3784      	adds	r7, #132	; 0x84
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd90      	pop	{r4, r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40022000 	.word	0x40022000
 8002d8c:	40022100 	.word	0x40022100
 8002d90:	40022300 	.word	0x40022300
 8002d94:	58026300 	.word	0x58026300
 8002d98:	58026000 	.word	0x58026000
 8002d9c:	cb840000 	.word	0xcb840000
 8002da0:	24000000 	.word	0x24000000
 8002da4:	053e2d63 	.word	0x053e2d63
 8002da8:	c7520000 	.word	0xc7520000
 8002dac:	cfb80000 	.word	0xcfb80000

08002db0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff f872 	bl	8001eb0 <LL_ADC_REG_IsConversionOngoing>
 8002dcc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff f894 	bl	8001f00 <LL_ADC_INJ_IsConversionOngoing>
 8002dd8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d103      	bne.n	8002de8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 8098 	beq.w	8002f18 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d02a      	beq.n	8002e4c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	7d5b      	ldrb	r3, [r3, #21]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d126      	bne.n	8002e4c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	7d1b      	ldrb	r3, [r3, #20]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d122      	bne.n	8002e4c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002e06:	2301      	movs	r3, #1
 8002e08:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002e0a:	e014      	b.n	8002e36 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	4a45      	ldr	r2, [pc, #276]	; (8002f24 <ADC_ConversionStop+0x174>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d90d      	bls.n	8002e30 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e18:	f043 0210 	orr.w	r2, r3, #16
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e24:	f043 0201 	orr.w	r2, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e074      	b.n	8002f1a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	3301      	adds	r3, #1
 8002e34:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e40:	2b40      	cmp	r3, #64	; 0x40
 8002e42:	d1e3      	bne.n	8002e0c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2240      	movs	r2, #64	; 0x40
 8002e4a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d014      	beq.n	8002e7c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff f82a 	bl	8001eb0 <LL_ADC_REG_IsConversionOngoing>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00c      	beq.n	8002e7c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe ffe7 	bl	8001e3a <LL_ADC_IsDisableOngoing>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d104      	bne.n	8002e7c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff f806 	bl	8001e88 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d014      	beq.n	8002eac <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff f83a 	bl	8001f00 <LL_ADC_INJ_IsConversionOngoing>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00c      	beq.n	8002eac <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe ffcf 	bl	8001e3a <LL_ADC_IsDisableOngoing>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d104      	bne.n	8002eac <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff f816 	bl	8001ed8 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d005      	beq.n	8002ebe <ADC_ConversionStop+0x10e>
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d105      	bne.n	8002ec4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002eb8:	230c      	movs	r3, #12
 8002eba:	617b      	str	r3, [r7, #20]
        break;
 8002ebc:	e005      	b.n	8002eca <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002ebe:	2308      	movs	r3, #8
 8002ec0:	617b      	str	r3, [r7, #20]
        break;
 8002ec2:	e002      	b.n	8002eca <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	617b      	str	r3, [r7, #20]
        break;
 8002ec8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002eca:	f7fe fda5 	bl	8001a18 <HAL_GetTick>
 8002ece:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002ed0:	e01b      	b.n	8002f0a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002ed2:	f7fe fda1 	bl	8001a18 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b05      	cmp	r3, #5
 8002ede:	d914      	bls.n	8002f0a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00d      	beq.n	8002f0a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef2:	f043 0210 	orr.w	r2, r3, #16
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efe:	f043 0201 	orr.w	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e007      	b.n	8002f1a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1dc      	bne.n	8002ed2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3720      	adds	r7, #32
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	000cdbff 	.word	0x000cdbff

08002f28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe ff6d 	bl	8001e14 <LL_ADC_IsEnabled>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d16e      	bne.n	800301e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	4b38      	ldr	r3, [pc, #224]	; (8003028 <ADC_Enable+0x100>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00d      	beq.n	8002f6a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f52:	f043 0210 	orr.w	r2, r3, #16
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5e:	f043 0201 	orr.w	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e05a      	b.n	8003020 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe ff28 	bl	8001dc4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f74:	f7fe fd50 	bl	8001a18 <HAL_GetTick>
 8002f78:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a2b      	ldr	r2, [pc, #172]	; (800302c <ADC_Enable+0x104>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d004      	beq.n	8002f8e <ADC_Enable+0x66>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a29      	ldr	r2, [pc, #164]	; (8003030 <ADC_Enable+0x108>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d101      	bne.n	8002f92 <ADC_Enable+0x6a>
 8002f8e:	4b29      	ldr	r3, [pc, #164]	; (8003034 <ADC_Enable+0x10c>)
 8002f90:	e000      	b.n	8002f94 <ADC_Enable+0x6c>
 8002f92:	4b29      	ldr	r3, [pc, #164]	; (8003038 <ADC_Enable+0x110>)
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fe feb9 	bl	8001d0c <LL_ADC_GetMultimode>
 8002f9a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a23      	ldr	r2, [pc, #140]	; (8003030 <ADC_Enable+0x108>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d002      	beq.n	8002fac <ADC_Enable+0x84>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	e000      	b.n	8002fae <ADC_Enable+0x86>
 8002fac:	4b1f      	ldr	r3, [pc, #124]	; (800302c <ADC_Enable+0x104>)
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d02c      	beq.n	8003010 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d130      	bne.n	800301e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fbc:	e028      	b.n	8003010 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe ff26 	bl	8001e14 <LL_ADC_IsEnabled>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d104      	bne.n	8002fd8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe fef6 	bl	8001dc4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fd8:	f7fe fd1e 	bl	8001a18 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d914      	bls.n	8003010 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d00d      	beq.n	8003010 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff8:	f043 0210 	orr.w	r2, r3, #16
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003004:	f043 0201 	orr.w	r2, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e007      	b.n	8003020 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b01      	cmp	r3, #1
 800301c:	d1cf      	bne.n	8002fbe <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	8000003f 	.word	0x8000003f
 800302c:	40022000 	.word	0x40022000
 8003030:	40022100 	.word	0x40022100
 8003034:	40022300 	.word	0x40022300
 8003038:	58026300 	.word	0x58026300

0800303c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7fe fef6 	bl	8001e3a <LL_ADC_IsDisableOngoing>
 800304e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f7fe fedd 	bl	8001e14 <LL_ADC_IsEnabled>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d047      	beq.n	80030f0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d144      	bne.n	80030f0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 030d 	and.w	r3, r3, #13
 8003070:	2b01      	cmp	r3, #1
 8003072:	d10c      	bne.n	800308e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f7fe feb7 	bl	8001dec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2203      	movs	r2, #3
 8003084:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003086:	f7fe fcc7 	bl	8001a18 <HAL_GetTick>
 800308a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800308c:	e029      	b.n	80030e2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003092:	f043 0210 	orr.w	r2, r3, #16
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309e:	f043 0201 	orr.w	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e023      	b.n	80030f2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030aa:	f7fe fcb5 	bl	8001a18 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d914      	bls.n	80030e2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00d      	beq.n	80030e2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	f043 0210 	orr.w	r2, r3, #16
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d6:	f043 0201 	orr.w	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e007      	b.n	80030f2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1dc      	bne.n	80030aa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003106:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003110:	2b00      	cmp	r3, #0
 8003112:	d14b      	bne.n	80031ac <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003118:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d021      	beq.n	8003172 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7fe fd48 	bl	8001bc8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d032      	beq.n	80031a4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d12b      	bne.n	80031a4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003150:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d11f      	bne.n	80031a4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003168:	f043 0201 	orr.w	r2, r3, #1
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	655a      	str	r2, [r3, #84]	; 0x54
 8003170:	e018      	b.n	80031a4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d111      	bne.n	80031a4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003184:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d105      	bne.n	80031a4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319c:	f043 0201 	orr.w	r2, r3, #1
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f7fe f9f3 	bl	8001590 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031aa:	e00e      	b.n	80031ca <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b0:	f003 0310 	and.w	r3, r3, #16
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f7ff fa9f 	bl	80026fc <HAL_ADC_ErrorCallback>
}
 80031be:	e004      	b.n	80031ca <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	4798      	blx	r3
}
 80031ca:	bf00      	nop
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031de:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f7ff fa81 	bl	80026e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031e6:	bf00      	nop
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003200:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320c:	f043 0204 	orr.w	r2, r3, #4
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f7ff fa71 	bl	80026fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800321a:	bf00      	nop
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a7a      	ldr	r2, [pc, #488]	; (800341c <ADC_ConfigureBoostMode+0x1f8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d004      	beq.n	8003240 <ADC_ConfigureBoostMode+0x1c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a79      	ldr	r2, [pc, #484]	; (8003420 <ADC_ConfigureBoostMode+0x1fc>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d109      	bne.n	8003254 <ADC_ConfigureBoostMode+0x30>
 8003240:	4b78      	ldr	r3, [pc, #480]	; (8003424 <ADC_ConfigureBoostMode+0x200>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003248:	2b00      	cmp	r3, #0
 800324a:	bf14      	ite	ne
 800324c:	2301      	movne	r3, #1
 800324e:	2300      	moveq	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	e008      	b.n	8003266 <ADC_ConfigureBoostMode+0x42>
 8003254:	4b74      	ldr	r3, [pc, #464]	; (8003428 <ADC_ConfigureBoostMode+0x204>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf14      	ite	ne
 8003260:	2301      	movne	r3, #1
 8003262:	2300      	moveq	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d01c      	beq.n	80032a4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800326a:	f004 fb1b 	bl	80078a4 <HAL_RCC_GetHCLKFreq>
 800326e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003278:	d010      	beq.n	800329c <ADC_ConfigureBoostMode+0x78>
 800327a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800327e:	d873      	bhi.n	8003368 <ADC_ConfigureBoostMode+0x144>
 8003280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003284:	d002      	beq.n	800328c <ADC_ConfigureBoostMode+0x68>
 8003286:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800328a:	d16d      	bne.n	8003368 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	0c1b      	lsrs	r3, r3, #16
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	fbb2 f3f3 	udiv	r3, r2, r3
 8003298:	60fb      	str	r3, [r7, #12]
        break;
 800329a:	e068      	b.n	800336e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	089b      	lsrs	r3, r3, #2
 80032a0:	60fb      	str	r3, [r7, #12]
        break;
 80032a2:	e064      	b.n	800336e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80032a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80032a8:	f04f 0100 	mov.w	r1, #0
 80032ac:	f005 fd60 	bl	8008d70 <HAL_RCCEx_GetPeriphCLKFreq>
 80032b0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80032ba:	d051      	beq.n	8003360 <ADC_ConfigureBoostMode+0x13c>
 80032bc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80032c0:	d854      	bhi.n	800336c <ADC_ConfigureBoostMode+0x148>
 80032c2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80032c6:	d047      	beq.n	8003358 <ADC_ConfigureBoostMode+0x134>
 80032c8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80032cc:	d84e      	bhi.n	800336c <ADC_ConfigureBoostMode+0x148>
 80032ce:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80032d2:	d03d      	beq.n	8003350 <ADC_ConfigureBoostMode+0x12c>
 80032d4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80032d8:	d848      	bhi.n	800336c <ADC_ConfigureBoostMode+0x148>
 80032da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032de:	d033      	beq.n	8003348 <ADC_ConfigureBoostMode+0x124>
 80032e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032e4:	d842      	bhi.n	800336c <ADC_ConfigureBoostMode+0x148>
 80032e6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80032ea:	d029      	beq.n	8003340 <ADC_ConfigureBoostMode+0x11c>
 80032ec:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80032f0:	d83c      	bhi.n	800336c <ADC_ConfigureBoostMode+0x148>
 80032f2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80032f6:	d01a      	beq.n	800332e <ADC_ConfigureBoostMode+0x10a>
 80032f8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80032fc:	d836      	bhi.n	800336c <ADC_ConfigureBoostMode+0x148>
 80032fe:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003302:	d014      	beq.n	800332e <ADC_ConfigureBoostMode+0x10a>
 8003304:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003308:	d830      	bhi.n	800336c <ADC_ConfigureBoostMode+0x148>
 800330a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800330e:	d00e      	beq.n	800332e <ADC_ConfigureBoostMode+0x10a>
 8003310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003314:	d82a      	bhi.n	800336c <ADC_ConfigureBoostMode+0x148>
 8003316:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800331a:	d008      	beq.n	800332e <ADC_ConfigureBoostMode+0x10a>
 800331c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003320:	d824      	bhi.n	800336c <ADC_ConfigureBoostMode+0x148>
 8003322:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003326:	d002      	beq.n	800332e <ADC_ConfigureBoostMode+0x10a>
 8003328:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800332c:	d11e      	bne.n	800336c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	0c9b      	lsrs	r3, r3, #18
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	fbb2 f3f3 	udiv	r3, r2, r3
 800333c:	60fb      	str	r3, [r7, #12]
        break;
 800333e:	e016      	b.n	800336e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	091b      	lsrs	r3, r3, #4
 8003344:	60fb      	str	r3, [r7, #12]
        break;
 8003346:	e012      	b.n	800336e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	60fb      	str	r3, [r7, #12]
        break;
 800334e:	e00e      	b.n	800336e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	099b      	lsrs	r3, r3, #6
 8003354:	60fb      	str	r3, [r7, #12]
        break;
 8003356:	e00a      	b.n	800336e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	09db      	lsrs	r3, r3, #7
 800335c:	60fb      	str	r3, [r7, #12]
        break;
 800335e:	e006      	b.n	800336e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	0a1b      	lsrs	r3, r3, #8
 8003364:	60fb      	str	r3, [r7, #12]
        break;
 8003366:	e002      	b.n	800336e <ADC_ConfigureBoostMode+0x14a>
        break;
 8003368:	bf00      	nop
 800336a:	e000      	b.n	800336e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800336c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800336e:	f7fe fb83 	bl	8001a78 <HAL_GetREVID>
 8003372:	4603      	mov	r3, r0
 8003374:	f241 0203 	movw	r2, #4099	; 0x1003
 8003378:	4293      	cmp	r3, r2
 800337a:	d815      	bhi.n	80033a8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4a2b      	ldr	r2, [pc, #172]	; (800342c <ADC_ConfigureBoostMode+0x208>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d908      	bls.n	8003396 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003392:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003394:	e03e      	b.n	8003414 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033a4:	609a      	str	r2, [r3, #8]
}
 80033a6:	e035      	b.n	8003414 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	085b      	lsrs	r3, r3, #1
 80033ac:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4a1f      	ldr	r2, [pc, #124]	; (8003430 <ADC_ConfigureBoostMode+0x20c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d808      	bhi.n	80033c8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80033c4:	609a      	str	r2, [r3, #8]
}
 80033c6:	e025      	b.n	8003414 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4a1a      	ldr	r2, [pc, #104]	; (8003434 <ADC_ConfigureBoostMode+0x210>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d80a      	bhi.n	80033e6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033e2:	609a      	str	r2, [r3, #8]
}
 80033e4:	e016      	b.n	8003414 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4a13      	ldr	r2, [pc, #76]	; (8003438 <ADC_ConfigureBoostMode+0x214>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d80a      	bhi.n	8003404 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003400:	609a      	str	r2, [r3, #8]
}
 8003402:	e007      	b.n	8003414 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003412:	609a      	str	r2, [r3, #8]
}
 8003414:	bf00      	nop
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40022000 	.word	0x40022000
 8003420:	40022100 	.word	0x40022100
 8003424:	40022300 	.word	0x40022300
 8003428:	58026300 	.word	0x58026300
 800342c:	01312d00 	.word	0x01312d00
 8003430:	005f5e10 	.word	0x005f5e10
 8003434:	00bebc20 	.word	0x00bebc20
 8003438:	017d7840 	.word	0x017d7840

0800343c <LL_ADC_IsEnabled>:
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <LL_ADC_IsEnabled+0x18>
 8003450:	2301      	movs	r3, #1
 8003452:	e000      	b.n	8003456 <LL_ADC_IsEnabled+0x1a>
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <LL_ADC_REG_IsConversionOngoing>:
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	2b04      	cmp	r3, #4
 8003474:	d101      	bne.n	800347a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003488:	b590      	push	{r4, r7, lr}
 800348a:	b09f      	sub	sp, #124	; 0x7c
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d101      	bne.n	80034a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e0be      	b.n	8003624 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80034ae:	2300      	movs	r3, #0
 80034b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80034b2:	2300      	movs	r3, #0
 80034b4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a5c      	ldr	r2, [pc, #368]	; (800362c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d102      	bne.n	80034c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80034c0:	4b5b      	ldr	r3, [pc, #364]	; (8003630 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	e001      	b.n	80034ca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10b      	bne.n	80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d4:	f043 0220 	orr.w	r2, r3, #32
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e09d      	b.n	8003624 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff ffb9 	bl	8003462 <LL_ADC_REG_IsConversionOngoing>
 80034f0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff ffb3 	bl	8003462 <LL_ADC_REG_IsConversionOngoing>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d17f      	bne.n	8003602 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003502:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003504:	2b00      	cmp	r3, #0
 8003506:	d17c      	bne.n	8003602 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a47      	ldr	r2, [pc, #284]	; (800362c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d004      	beq.n	800351c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a46      	ldr	r2, [pc, #280]	; (8003630 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d101      	bne.n	8003520 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800351c:	4b45      	ldr	r3, [pc, #276]	; (8003634 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800351e:	e000      	b.n	8003522 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003520:	4b45      	ldr	r3, [pc, #276]	; (8003638 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003522:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d039      	beq.n	80035a0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800352c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	431a      	orrs	r2, r3
 800353a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800353c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a3a      	ldr	r2, [pc, #232]	; (800362c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d004      	beq.n	8003552 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a38      	ldr	r2, [pc, #224]	; (8003630 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d10e      	bne.n	8003570 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003552:	4836      	ldr	r0, [pc, #216]	; (800362c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003554:	f7ff ff72 	bl	800343c <LL_ADC_IsEnabled>
 8003558:	4604      	mov	r4, r0
 800355a:	4835      	ldr	r0, [pc, #212]	; (8003630 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800355c:	f7ff ff6e 	bl	800343c <LL_ADC_IsEnabled>
 8003560:	4603      	mov	r3, r0
 8003562:	4323      	orrs	r3, r4
 8003564:	2b00      	cmp	r3, #0
 8003566:	bf0c      	ite	eq
 8003568:	2301      	moveq	r3, #1
 800356a:	2300      	movne	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	e008      	b.n	8003582 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003570:	4832      	ldr	r0, [pc, #200]	; (800363c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003572:	f7ff ff63 	bl	800343c <LL_ADC_IsEnabled>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	bf0c      	ite	eq
 800357c:	2301      	moveq	r3, #1
 800357e:	2300      	movne	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d047      	beq.n	8003616 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	4b2d      	ldr	r3, [pc, #180]	; (8003640 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800358c:	4013      	ands	r3, r2
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	6811      	ldr	r1, [r2, #0]
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	6892      	ldr	r2, [r2, #8]
 8003596:	430a      	orrs	r2, r1
 8003598:	431a      	orrs	r2, r3
 800359a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800359c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800359e:	e03a      	b.n	8003616 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80035a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035aa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1e      	ldr	r2, [pc, #120]	; (800362c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d004      	beq.n	80035c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1d      	ldr	r2, [pc, #116]	; (8003630 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d10e      	bne.n	80035de <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80035c0:	481a      	ldr	r0, [pc, #104]	; (800362c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80035c2:	f7ff ff3b 	bl	800343c <LL_ADC_IsEnabled>
 80035c6:	4604      	mov	r4, r0
 80035c8:	4819      	ldr	r0, [pc, #100]	; (8003630 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80035ca:	f7ff ff37 	bl	800343c <LL_ADC_IsEnabled>
 80035ce:	4603      	mov	r3, r0
 80035d0:	4323      	orrs	r3, r4
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	bf0c      	ite	eq
 80035d6:	2301      	moveq	r3, #1
 80035d8:	2300      	movne	r3, #0
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	e008      	b.n	80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80035de:	4817      	ldr	r0, [pc, #92]	; (800363c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80035e0:	f7ff ff2c 	bl	800343c <LL_ADC_IsEnabled>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d010      	beq.n	8003616 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80035f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	4b11      	ldr	r3, [pc, #68]	; (8003640 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80035fa:	4013      	ands	r3, r2
 80035fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035fe:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003600:	e009      	b.n	8003616 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003606:	f043 0220 	orr.w	r2, r3, #32
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003614:	e000      	b.n	8003618 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003616:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003620:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003624:	4618      	mov	r0, r3
 8003626:	377c      	adds	r7, #124	; 0x7c
 8003628:	46bd      	mov	sp, r7
 800362a:	bd90      	pop	{r4, r7, pc}
 800362c:	40022000 	.word	0x40022000
 8003630:	40022100 	.word	0x40022100
 8003634:	40022300 	.word	0x40022300
 8003638:	58026300 	.word	0x58026300
 800363c:	58026000 	.word	0x58026000
 8003640:	fffff0e0 	.word	0xfffff0e0

08003644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003654:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <__NVIC_SetPriorityGrouping+0x40>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003660:	4013      	ands	r3, r2
 8003662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800366c:	4b06      	ldr	r3, [pc, #24]	; (8003688 <__NVIC_SetPriorityGrouping+0x44>)
 800366e:	4313      	orrs	r3, r2
 8003670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003672:	4a04      	ldr	r2, [pc, #16]	; (8003684 <__NVIC_SetPriorityGrouping+0x40>)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	60d3      	str	r3, [r2, #12]
}
 8003678:	bf00      	nop
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	e000ed00 	.word	0xe000ed00
 8003688:	05fa0000 	.word	0x05fa0000

0800368c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003690:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	0a1b      	lsrs	r3, r3, #8
 8003696:	f003 0307 	and.w	r3, r3, #7
}
 800369a:	4618      	mov	r0, r3
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	e000ed00 	.word	0xe000ed00

080036a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	db0b      	blt.n	80036d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ba:	88fb      	ldrh	r3, [r7, #6]
 80036bc:	f003 021f 	and.w	r2, r3, #31
 80036c0:	4907      	ldr	r1, [pc, #28]	; (80036e0 <__NVIC_EnableIRQ+0x38>)
 80036c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	2001      	movs	r0, #1
 80036ca:	fa00 f202 	lsl.w	r2, r0, r2
 80036ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	e000e100 	.word	0xe000e100

080036e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	6039      	str	r1, [r7, #0]
 80036ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	db0a      	blt.n	800370e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	490c      	ldr	r1, [pc, #48]	; (8003730 <__NVIC_SetPriority+0x4c>)
 80036fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003702:	0112      	lsls	r2, r2, #4
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	440b      	add	r3, r1
 8003708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800370c:	e00a      	b.n	8003724 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	b2da      	uxtb	r2, r3
 8003712:	4908      	ldr	r1, [pc, #32]	; (8003734 <__NVIC_SetPriority+0x50>)
 8003714:	88fb      	ldrh	r3, [r7, #6]
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	3b04      	subs	r3, #4
 800371c:	0112      	lsls	r2, r2, #4
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	440b      	add	r3, r1
 8003722:	761a      	strb	r2, [r3, #24]
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	e000e100 	.word	0xe000e100
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003738:	b480      	push	{r7}
 800373a:	b089      	sub	sp, #36	; 0x24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f1c3 0307 	rsb	r3, r3, #7
 8003752:	2b04      	cmp	r3, #4
 8003754:	bf28      	it	cs
 8003756:	2304      	movcs	r3, #4
 8003758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	3304      	adds	r3, #4
 800375e:	2b06      	cmp	r3, #6
 8003760:	d902      	bls.n	8003768 <NVIC_EncodePriority+0x30>
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	3b03      	subs	r3, #3
 8003766:	e000      	b.n	800376a <NVIC_EncodePriority+0x32>
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800376c:	f04f 32ff 	mov.w	r2, #4294967295
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43da      	mvns	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	401a      	ands	r2, r3
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003780:	f04f 31ff 	mov.w	r1, #4294967295
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	fa01 f303 	lsl.w	r3, r1, r3
 800378a:	43d9      	mvns	r1, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003790:	4313      	orrs	r3, r2
         );
}
 8003792:	4618      	mov	r0, r3
 8003794:	3724      	adds	r7, #36	; 0x24
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
	...

080037a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037b0:	d301      	bcc.n	80037b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037b2:	2301      	movs	r3, #1
 80037b4:	e00f      	b.n	80037d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037b6:	4a0a      	ldr	r2, [pc, #40]	; (80037e0 <SysTick_Config+0x40>)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037be:	210f      	movs	r1, #15
 80037c0:	f04f 30ff 	mov.w	r0, #4294967295
 80037c4:	f7ff ff8e 	bl	80036e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <SysTick_Config+0x40>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ce:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <SysTick_Config+0x40>)
 80037d0:	2207      	movs	r2, #7
 80037d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	e000e010 	.word	0xe000e010

080037e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff ff29 	bl	8003644 <__NVIC_SetPriorityGrouping>
}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b086      	sub	sp, #24
 80037fe:	af00      	add	r7, sp, #0
 8003800:	4603      	mov	r3, r0
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003808:	f7ff ff40 	bl	800368c <__NVIC_GetPriorityGrouping>
 800380c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	68b9      	ldr	r1, [r7, #8]
 8003812:	6978      	ldr	r0, [r7, #20]
 8003814:	f7ff ff90 	bl	8003738 <NVIC_EncodePriority>
 8003818:	4602      	mov	r2, r0
 800381a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800381e:	4611      	mov	r1, r2
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff ff5f 	bl	80036e4 <__NVIC_SetPriority>
}
 8003826:	bf00      	nop
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	4603      	mov	r3, r0
 8003836:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff ff33 	bl	80036a8 <__NVIC_EnableIRQ>
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff ffa4 	bl	80037a0 <SysTick_Config>
 8003858:	4603      	mov	r3, r0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800386c:	f7fe f8d4 	bl	8001a18 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e316      	b.n	8003eaa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a66      	ldr	r2, [pc, #408]	; (8003a1c <HAL_DMA_Init+0x1b8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d04a      	beq.n	800391c <HAL_DMA_Init+0xb8>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a65      	ldr	r2, [pc, #404]	; (8003a20 <HAL_DMA_Init+0x1bc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d045      	beq.n	800391c <HAL_DMA_Init+0xb8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a63      	ldr	r2, [pc, #396]	; (8003a24 <HAL_DMA_Init+0x1c0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d040      	beq.n	800391c <HAL_DMA_Init+0xb8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a62      	ldr	r2, [pc, #392]	; (8003a28 <HAL_DMA_Init+0x1c4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d03b      	beq.n	800391c <HAL_DMA_Init+0xb8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a60      	ldr	r2, [pc, #384]	; (8003a2c <HAL_DMA_Init+0x1c8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d036      	beq.n	800391c <HAL_DMA_Init+0xb8>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a5f      	ldr	r2, [pc, #380]	; (8003a30 <HAL_DMA_Init+0x1cc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d031      	beq.n	800391c <HAL_DMA_Init+0xb8>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a5d      	ldr	r2, [pc, #372]	; (8003a34 <HAL_DMA_Init+0x1d0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d02c      	beq.n	800391c <HAL_DMA_Init+0xb8>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a5c      	ldr	r2, [pc, #368]	; (8003a38 <HAL_DMA_Init+0x1d4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d027      	beq.n	800391c <HAL_DMA_Init+0xb8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a5a      	ldr	r2, [pc, #360]	; (8003a3c <HAL_DMA_Init+0x1d8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d022      	beq.n	800391c <HAL_DMA_Init+0xb8>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a59      	ldr	r2, [pc, #356]	; (8003a40 <HAL_DMA_Init+0x1dc>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d01d      	beq.n	800391c <HAL_DMA_Init+0xb8>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a57      	ldr	r2, [pc, #348]	; (8003a44 <HAL_DMA_Init+0x1e0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d018      	beq.n	800391c <HAL_DMA_Init+0xb8>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a56      	ldr	r2, [pc, #344]	; (8003a48 <HAL_DMA_Init+0x1e4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d013      	beq.n	800391c <HAL_DMA_Init+0xb8>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a54      	ldr	r2, [pc, #336]	; (8003a4c <HAL_DMA_Init+0x1e8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00e      	beq.n	800391c <HAL_DMA_Init+0xb8>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a53      	ldr	r2, [pc, #332]	; (8003a50 <HAL_DMA_Init+0x1ec>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d009      	beq.n	800391c <HAL_DMA_Init+0xb8>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a51      	ldr	r2, [pc, #324]	; (8003a54 <HAL_DMA_Init+0x1f0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d004      	beq.n	800391c <HAL_DMA_Init+0xb8>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a50      	ldr	r2, [pc, #320]	; (8003a58 <HAL_DMA_Init+0x1f4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d101      	bne.n	8003920 <HAL_DMA_Init+0xbc>
 800391c:	2301      	movs	r3, #1
 800391e:	e000      	b.n	8003922 <HAL_DMA_Init+0xbe>
 8003920:	2300      	movs	r3, #0
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 813b 	beq.w	8003b9e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a37      	ldr	r2, [pc, #220]	; (8003a1c <HAL_DMA_Init+0x1b8>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d04a      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a36      	ldr	r2, [pc, #216]	; (8003a20 <HAL_DMA_Init+0x1bc>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d045      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a34      	ldr	r2, [pc, #208]	; (8003a24 <HAL_DMA_Init+0x1c0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d040      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a33      	ldr	r2, [pc, #204]	; (8003a28 <HAL_DMA_Init+0x1c4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d03b      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a31      	ldr	r2, [pc, #196]	; (8003a2c <HAL_DMA_Init+0x1c8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d036      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a30      	ldr	r2, [pc, #192]	; (8003a30 <HAL_DMA_Init+0x1cc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d031      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a2e      	ldr	r2, [pc, #184]	; (8003a34 <HAL_DMA_Init+0x1d0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d02c      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a2d      	ldr	r2, [pc, #180]	; (8003a38 <HAL_DMA_Init+0x1d4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d027      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a2b      	ldr	r2, [pc, #172]	; (8003a3c <HAL_DMA_Init+0x1d8>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d022      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a2a      	ldr	r2, [pc, #168]	; (8003a40 <HAL_DMA_Init+0x1dc>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d01d      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a28      	ldr	r2, [pc, #160]	; (8003a44 <HAL_DMA_Init+0x1e0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d018      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a27      	ldr	r2, [pc, #156]	; (8003a48 <HAL_DMA_Init+0x1e4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d013      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a25      	ldr	r2, [pc, #148]	; (8003a4c <HAL_DMA_Init+0x1e8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00e      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a24      	ldr	r2, [pc, #144]	; (8003a50 <HAL_DMA_Init+0x1ec>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d009      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a22      	ldr	r2, [pc, #136]	; (8003a54 <HAL_DMA_Init+0x1f0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d004      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a21      	ldr	r2, [pc, #132]	; (8003a58 <HAL_DMA_Init+0x1f4>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d108      	bne.n	80039ea <HAL_DMA_Init+0x186>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0201 	bic.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	e007      	b.n	80039fa <HAL_DMA_Init+0x196>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0201 	bic.w	r2, r2, #1
 80039f8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039fa:	e02f      	b.n	8003a5c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039fc:	f7fe f80c 	bl	8001a18 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b05      	cmp	r3, #5
 8003a08:	d928      	bls.n	8003a5c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2203      	movs	r2, #3
 8003a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e246      	b.n	8003eaa <HAL_DMA_Init+0x646>
 8003a1c:	40020010 	.word	0x40020010
 8003a20:	40020028 	.word	0x40020028
 8003a24:	40020040 	.word	0x40020040
 8003a28:	40020058 	.word	0x40020058
 8003a2c:	40020070 	.word	0x40020070
 8003a30:	40020088 	.word	0x40020088
 8003a34:	400200a0 	.word	0x400200a0
 8003a38:	400200b8 	.word	0x400200b8
 8003a3c:	40020410 	.word	0x40020410
 8003a40:	40020428 	.word	0x40020428
 8003a44:	40020440 	.word	0x40020440
 8003a48:	40020458 	.word	0x40020458
 8003a4c:	40020470 	.word	0x40020470
 8003a50:	40020488 	.word	0x40020488
 8003a54:	400204a0 	.word	0x400204a0
 8003a58:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1c8      	bne.n	80039fc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4b83      	ldr	r3, [pc, #524]	; (8003c84 <HAL_DMA_Init+0x420>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003a82:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a9a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d107      	bne.n	8003ac0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003ac0:	4b71      	ldr	r3, [pc, #452]	; (8003c88 <HAL_DMA_Init+0x424>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	4b71      	ldr	r3, [pc, #452]	; (8003c8c <HAL_DMA_Init+0x428>)
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003acc:	d328      	bcc.n	8003b20 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b28      	cmp	r3, #40	; 0x28
 8003ad4:	d903      	bls.n	8003ade <HAL_DMA_Init+0x27a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b2e      	cmp	r3, #46	; 0x2e
 8003adc:	d917      	bls.n	8003b0e <HAL_DMA_Init+0x2aa>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b3e      	cmp	r3, #62	; 0x3e
 8003ae4:	d903      	bls.n	8003aee <HAL_DMA_Init+0x28a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b42      	cmp	r3, #66	; 0x42
 8003aec:	d90f      	bls.n	8003b0e <HAL_DMA_Init+0x2aa>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b46      	cmp	r3, #70	; 0x46
 8003af4:	d903      	bls.n	8003afe <HAL_DMA_Init+0x29a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b48      	cmp	r3, #72	; 0x48
 8003afc:	d907      	bls.n	8003b0e <HAL_DMA_Init+0x2aa>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b4e      	cmp	r3, #78	; 0x4e
 8003b04:	d905      	bls.n	8003b12 <HAL_DMA_Init+0x2ae>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b52      	cmp	r3, #82	; 0x52
 8003b0c:	d801      	bhi.n	8003b12 <HAL_DMA_Init+0x2ae>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <HAL_DMA_Init+0x2b0>
 8003b12:	2300      	movs	r3, #0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b1e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f023 0307 	bic.w	r3, r3, #7
 8003b36:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d117      	bne.n	8003b7a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00e      	beq.n	8003b7a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f001 fdcf 	bl	8005700 <DMA_CheckFifoParam>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2240      	movs	r2, #64	; 0x40
 8003b6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e197      	b.n	8003eaa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f001 fd0a 	bl	800559c <DMA_CalcBaseAndBitshift>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b90:	f003 031f 	and.w	r3, r3, #31
 8003b94:	223f      	movs	r2, #63	; 0x3f
 8003b96:	409a      	lsls	r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	609a      	str	r2, [r3, #8]
 8003b9c:	e0cd      	b.n	8003d3a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a3b      	ldr	r2, [pc, #236]	; (8003c90 <HAL_DMA_Init+0x42c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d022      	beq.n	8003bee <HAL_DMA_Init+0x38a>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a39      	ldr	r2, [pc, #228]	; (8003c94 <HAL_DMA_Init+0x430>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d01d      	beq.n	8003bee <HAL_DMA_Init+0x38a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a38      	ldr	r2, [pc, #224]	; (8003c98 <HAL_DMA_Init+0x434>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d018      	beq.n	8003bee <HAL_DMA_Init+0x38a>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a36      	ldr	r2, [pc, #216]	; (8003c9c <HAL_DMA_Init+0x438>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d013      	beq.n	8003bee <HAL_DMA_Init+0x38a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a35      	ldr	r2, [pc, #212]	; (8003ca0 <HAL_DMA_Init+0x43c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00e      	beq.n	8003bee <HAL_DMA_Init+0x38a>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a33      	ldr	r2, [pc, #204]	; (8003ca4 <HAL_DMA_Init+0x440>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d009      	beq.n	8003bee <HAL_DMA_Init+0x38a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a32      	ldr	r2, [pc, #200]	; (8003ca8 <HAL_DMA_Init+0x444>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d004      	beq.n	8003bee <HAL_DMA_Init+0x38a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a30      	ldr	r2, [pc, #192]	; (8003cac <HAL_DMA_Init+0x448>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d101      	bne.n	8003bf2 <HAL_DMA_Init+0x38e>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <HAL_DMA_Init+0x390>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8097 	beq.w	8003d28 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a24      	ldr	r2, [pc, #144]	; (8003c90 <HAL_DMA_Init+0x42c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d021      	beq.n	8003c48 <HAL_DMA_Init+0x3e4>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a22      	ldr	r2, [pc, #136]	; (8003c94 <HAL_DMA_Init+0x430>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d01c      	beq.n	8003c48 <HAL_DMA_Init+0x3e4>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a21      	ldr	r2, [pc, #132]	; (8003c98 <HAL_DMA_Init+0x434>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d017      	beq.n	8003c48 <HAL_DMA_Init+0x3e4>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1f      	ldr	r2, [pc, #124]	; (8003c9c <HAL_DMA_Init+0x438>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d012      	beq.n	8003c48 <HAL_DMA_Init+0x3e4>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a1e      	ldr	r2, [pc, #120]	; (8003ca0 <HAL_DMA_Init+0x43c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00d      	beq.n	8003c48 <HAL_DMA_Init+0x3e4>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a1c      	ldr	r2, [pc, #112]	; (8003ca4 <HAL_DMA_Init+0x440>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d008      	beq.n	8003c48 <HAL_DMA_Init+0x3e4>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a1b      	ldr	r2, [pc, #108]	; (8003ca8 <HAL_DMA_Init+0x444>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d003      	beq.n	8003c48 <HAL_DMA_Init+0x3e4>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a19      	ldr	r2, [pc, #100]	; (8003cac <HAL_DMA_Init+0x448>)
 8003c46:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	4b13      	ldr	r3, [pc, #76]	; (8003cb0 <HAL_DMA_Init+0x44c>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2b40      	cmp	r3, #64	; 0x40
 8003c6e:	d021      	beq.n	8003cb4 <HAL_DMA_Init+0x450>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b80      	cmp	r3, #128	; 0x80
 8003c76:	d102      	bne.n	8003c7e <HAL_DMA_Init+0x41a>
 8003c78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c7c:	e01b      	b.n	8003cb6 <HAL_DMA_Init+0x452>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	e019      	b.n	8003cb6 <HAL_DMA_Init+0x452>
 8003c82:	bf00      	nop
 8003c84:	fe10803f 	.word	0xfe10803f
 8003c88:	5c001000 	.word	0x5c001000
 8003c8c:	ffff0000 	.word	0xffff0000
 8003c90:	58025408 	.word	0x58025408
 8003c94:	5802541c 	.word	0x5802541c
 8003c98:	58025430 	.word	0x58025430
 8003c9c:	58025444 	.word	0x58025444
 8003ca0:	58025458 	.word	0x58025458
 8003ca4:	5802546c 	.word	0x5802546c
 8003ca8:	58025480 	.word	0x58025480
 8003cac:	58025494 	.word	0x58025494
 8003cb0:	fffe000f 	.word	0xfffe000f
 8003cb4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	68d2      	ldr	r2, [r2, #12]
 8003cba:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003cbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003cc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003ccc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003cd4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003cdc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ce4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4b6e      	ldr	r3, [pc, #440]	; (8003eb4 <HAL_DMA_Init+0x650>)
 8003cfc:	4413      	add	r3, r2
 8003cfe:	4a6e      	ldr	r2, [pc, #440]	; (8003eb8 <HAL_DMA_Init+0x654>)
 8003d00:	fba2 2303 	umull	r2, r3, r2, r3
 8003d04:	091b      	lsrs	r3, r3, #4
 8003d06:	009a      	lsls	r2, r3, #2
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f001 fc45 	bl	800559c <DMA_CalcBaseAndBitshift>
 8003d12:	4603      	mov	r3, r0
 8003d14:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	2201      	movs	r2, #1
 8003d20:	409a      	lsls	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	605a      	str	r2, [r3, #4]
 8003d26:	e008      	b.n	8003d3a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2240      	movs	r2, #64	; 0x40
 8003d2c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2203      	movs	r2, #3
 8003d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e0b7      	b.n	8003eaa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a5f      	ldr	r2, [pc, #380]	; (8003ebc <HAL_DMA_Init+0x658>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d072      	beq.n	8003e2a <HAL_DMA_Init+0x5c6>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a5d      	ldr	r2, [pc, #372]	; (8003ec0 <HAL_DMA_Init+0x65c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d06d      	beq.n	8003e2a <HAL_DMA_Init+0x5c6>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a5c      	ldr	r2, [pc, #368]	; (8003ec4 <HAL_DMA_Init+0x660>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d068      	beq.n	8003e2a <HAL_DMA_Init+0x5c6>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a5a      	ldr	r2, [pc, #360]	; (8003ec8 <HAL_DMA_Init+0x664>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d063      	beq.n	8003e2a <HAL_DMA_Init+0x5c6>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a59      	ldr	r2, [pc, #356]	; (8003ecc <HAL_DMA_Init+0x668>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d05e      	beq.n	8003e2a <HAL_DMA_Init+0x5c6>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a57      	ldr	r2, [pc, #348]	; (8003ed0 <HAL_DMA_Init+0x66c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d059      	beq.n	8003e2a <HAL_DMA_Init+0x5c6>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a56      	ldr	r2, [pc, #344]	; (8003ed4 <HAL_DMA_Init+0x670>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d054      	beq.n	8003e2a <HAL_DMA_Init+0x5c6>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a54      	ldr	r2, [pc, #336]	; (8003ed8 <HAL_DMA_Init+0x674>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d04f      	beq.n	8003e2a <HAL_DMA_Init+0x5c6>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a53      	ldr	r2, [pc, #332]	; (8003edc <HAL_DMA_Init+0x678>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d04a      	beq.n	8003e2a <HAL_DMA_Init+0x5c6>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a51      	ldr	r2, [pc, #324]	; (8003ee0 <HAL_DMA_Init+0x67c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d045      	beq.n	8003e2a <HAL_DMA_Init+0x5c6>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a50      	ldr	r2, [pc, #320]	; (8003ee4 <HAL_DMA_Init+0x680>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d040      	beq.n	8003e2a <HAL_DMA_Init+0x5c6>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a4e      	ldr	r2, [pc, #312]	; (8003ee8 <HAL_DMA_Init+0x684>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d03b      	beq.n	8003e2a <HAL_DMA_Init+0x5c6>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a4d      	ldr	r2, [pc, #308]	; (8003eec <HAL_DMA_Init+0x688>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d036      	beq.n	8003e2a <HAL_DMA_Init+0x5c6>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a4b      	ldr	r2, [pc, #300]	; (8003ef0 <HAL_DMA_Init+0x68c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d031      	beq.n	8003e2a <HAL_DMA_Init+0x5c6>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a4a      	ldr	r2, [pc, #296]	; (8003ef4 <HAL_DMA_Init+0x690>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d02c      	beq.n	8003e2a <HAL_DMA_Init+0x5c6>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a48      	ldr	r2, [pc, #288]	; (8003ef8 <HAL_DMA_Init+0x694>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d027      	beq.n	8003e2a <HAL_DMA_Init+0x5c6>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a47      	ldr	r2, [pc, #284]	; (8003efc <HAL_DMA_Init+0x698>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d022      	beq.n	8003e2a <HAL_DMA_Init+0x5c6>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a45      	ldr	r2, [pc, #276]	; (8003f00 <HAL_DMA_Init+0x69c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d01d      	beq.n	8003e2a <HAL_DMA_Init+0x5c6>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a44      	ldr	r2, [pc, #272]	; (8003f04 <HAL_DMA_Init+0x6a0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d018      	beq.n	8003e2a <HAL_DMA_Init+0x5c6>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a42      	ldr	r2, [pc, #264]	; (8003f08 <HAL_DMA_Init+0x6a4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d013      	beq.n	8003e2a <HAL_DMA_Init+0x5c6>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a41      	ldr	r2, [pc, #260]	; (8003f0c <HAL_DMA_Init+0x6a8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00e      	beq.n	8003e2a <HAL_DMA_Init+0x5c6>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a3f      	ldr	r2, [pc, #252]	; (8003f10 <HAL_DMA_Init+0x6ac>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d009      	beq.n	8003e2a <HAL_DMA_Init+0x5c6>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a3e      	ldr	r2, [pc, #248]	; (8003f14 <HAL_DMA_Init+0x6b0>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d004      	beq.n	8003e2a <HAL_DMA_Init+0x5c6>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a3c      	ldr	r2, [pc, #240]	; (8003f18 <HAL_DMA_Init+0x6b4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d101      	bne.n	8003e2e <HAL_DMA_Init+0x5ca>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <HAL_DMA_Init+0x5cc>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d032      	beq.n	8003e9a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f001 fcdf 	bl	80057f8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	2b80      	cmp	r3, #128	; 0x80
 8003e40:	d102      	bne.n	8003e48 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003e5c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d010      	beq.n	8003e88 <HAL_DMA_Init+0x624>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d80c      	bhi.n	8003e88 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f001 fd5c 	bl	800592c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	e008      	b.n	8003e9a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	a7fdabf8 	.word	0xa7fdabf8
 8003eb8:	cccccccd 	.word	0xcccccccd
 8003ebc:	40020010 	.word	0x40020010
 8003ec0:	40020028 	.word	0x40020028
 8003ec4:	40020040 	.word	0x40020040
 8003ec8:	40020058 	.word	0x40020058
 8003ecc:	40020070 	.word	0x40020070
 8003ed0:	40020088 	.word	0x40020088
 8003ed4:	400200a0 	.word	0x400200a0
 8003ed8:	400200b8 	.word	0x400200b8
 8003edc:	40020410 	.word	0x40020410
 8003ee0:	40020428 	.word	0x40020428
 8003ee4:	40020440 	.word	0x40020440
 8003ee8:	40020458 	.word	0x40020458
 8003eec:	40020470 	.word	0x40020470
 8003ef0:	40020488 	.word	0x40020488
 8003ef4:	400204a0 	.word	0x400204a0
 8003ef8:	400204b8 	.word	0x400204b8
 8003efc:	58025408 	.word	0x58025408
 8003f00:	5802541c 	.word	0x5802541c
 8003f04:	58025430 	.word	0x58025430
 8003f08:	58025444 	.word	0x58025444
 8003f0c:	58025458 	.word	0x58025458
 8003f10:	5802546c 	.word	0x5802546c
 8003f14:	58025480 	.word	0x58025480
 8003f18:	58025494 	.word	0x58025494

08003f1c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e226      	b.n	8004386 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_DMA_Start_IT+0x2a>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e21f      	b.n	8004386 <HAL_DMA_Start_IT+0x46a>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	f040 820a 	bne.w	8004370 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a68      	ldr	r2, [pc, #416]	; (8004110 <HAL_DMA_Start_IT+0x1f4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d04a      	beq.n	800400a <HAL_DMA_Start_IT+0xee>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a66      	ldr	r2, [pc, #408]	; (8004114 <HAL_DMA_Start_IT+0x1f8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d045      	beq.n	800400a <HAL_DMA_Start_IT+0xee>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a65      	ldr	r2, [pc, #404]	; (8004118 <HAL_DMA_Start_IT+0x1fc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d040      	beq.n	800400a <HAL_DMA_Start_IT+0xee>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a63      	ldr	r2, [pc, #396]	; (800411c <HAL_DMA_Start_IT+0x200>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d03b      	beq.n	800400a <HAL_DMA_Start_IT+0xee>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a62      	ldr	r2, [pc, #392]	; (8004120 <HAL_DMA_Start_IT+0x204>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d036      	beq.n	800400a <HAL_DMA_Start_IT+0xee>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a60      	ldr	r2, [pc, #384]	; (8004124 <HAL_DMA_Start_IT+0x208>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d031      	beq.n	800400a <HAL_DMA_Start_IT+0xee>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a5f      	ldr	r2, [pc, #380]	; (8004128 <HAL_DMA_Start_IT+0x20c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d02c      	beq.n	800400a <HAL_DMA_Start_IT+0xee>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a5d      	ldr	r2, [pc, #372]	; (800412c <HAL_DMA_Start_IT+0x210>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d027      	beq.n	800400a <HAL_DMA_Start_IT+0xee>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a5c      	ldr	r2, [pc, #368]	; (8004130 <HAL_DMA_Start_IT+0x214>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d022      	beq.n	800400a <HAL_DMA_Start_IT+0xee>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a5a      	ldr	r2, [pc, #360]	; (8004134 <HAL_DMA_Start_IT+0x218>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d01d      	beq.n	800400a <HAL_DMA_Start_IT+0xee>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a59      	ldr	r2, [pc, #356]	; (8004138 <HAL_DMA_Start_IT+0x21c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d018      	beq.n	800400a <HAL_DMA_Start_IT+0xee>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a57      	ldr	r2, [pc, #348]	; (800413c <HAL_DMA_Start_IT+0x220>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d013      	beq.n	800400a <HAL_DMA_Start_IT+0xee>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a56      	ldr	r2, [pc, #344]	; (8004140 <HAL_DMA_Start_IT+0x224>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00e      	beq.n	800400a <HAL_DMA_Start_IT+0xee>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a54      	ldr	r2, [pc, #336]	; (8004144 <HAL_DMA_Start_IT+0x228>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d009      	beq.n	800400a <HAL_DMA_Start_IT+0xee>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a53      	ldr	r2, [pc, #332]	; (8004148 <HAL_DMA_Start_IT+0x22c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d004      	beq.n	800400a <HAL_DMA_Start_IT+0xee>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a51      	ldr	r2, [pc, #324]	; (800414c <HAL_DMA_Start_IT+0x230>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d108      	bne.n	800401c <HAL_DMA_Start_IT+0x100>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0201 	bic.w	r2, r2, #1
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	e007      	b.n	800402c <HAL_DMA_Start_IT+0x110>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0201 	bic.w	r2, r2, #1
 800402a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f001 f906 	bl	8005244 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a34      	ldr	r2, [pc, #208]	; (8004110 <HAL_DMA_Start_IT+0x1f4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d04a      	beq.n	80040d8 <HAL_DMA_Start_IT+0x1bc>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a33      	ldr	r2, [pc, #204]	; (8004114 <HAL_DMA_Start_IT+0x1f8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d045      	beq.n	80040d8 <HAL_DMA_Start_IT+0x1bc>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a31      	ldr	r2, [pc, #196]	; (8004118 <HAL_DMA_Start_IT+0x1fc>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d040      	beq.n	80040d8 <HAL_DMA_Start_IT+0x1bc>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a30      	ldr	r2, [pc, #192]	; (800411c <HAL_DMA_Start_IT+0x200>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d03b      	beq.n	80040d8 <HAL_DMA_Start_IT+0x1bc>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a2e      	ldr	r2, [pc, #184]	; (8004120 <HAL_DMA_Start_IT+0x204>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d036      	beq.n	80040d8 <HAL_DMA_Start_IT+0x1bc>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a2d      	ldr	r2, [pc, #180]	; (8004124 <HAL_DMA_Start_IT+0x208>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d031      	beq.n	80040d8 <HAL_DMA_Start_IT+0x1bc>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a2b      	ldr	r2, [pc, #172]	; (8004128 <HAL_DMA_Start_IT+0x20c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d02c      	beq.n	80040d8 <HAL_DMA_Start_IT+0x1bc>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a2a      	ldr	r2, [pc, #168]	; (800412c <HAL_DMA_Start_IT+0x210>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d027      	beq.n	80040d8 <HAL_DMA_Start_IT+0x1bc>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a28      	ldr	r2, [pc, #160]	; (8004130 <HAL_DMA_Start_IT+0x214>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d022      	beq.n	80040d8 <HAL_DMA_Start_IT+0x1bc>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a27      	ldr	r2, [pc, #156]	; (8004134 <HAL_DMA_Start_IT+0x218>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d01d      	beq.n	80040d8 <HAL_DMA_Start_IT+0x1bc>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a25      	ldr	r2, [pc, #148]	; (8004138 <HAL_DMA_Start_IT+0x21c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d018      	beq.n	80040d8 <HAL_DMA_Start_IT+0x1bc>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a24      	ldr	r2, [pc, #144]	; (800413c <HAL_DMA_Start_IT+0x220>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d013      	beq.n	80040d8 <HAL_DMA_Start_IT+0x1bc>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a22      	ldr	r2, [pc, #136]	; (8004140 <HAL_DMA_Start_IT+0x224>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00e      	beq.n	80040d8 <HAL_DMA_Start_IT+0x1bc>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a21      	ldr	r2, [pc, #132]	; (8004144 <HAL_DMA_Start_IT+0x228>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d009      	beq.n	80040d8 <HAL_DMA_Start_IT+0x1bc>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1f      	ldr	r2, [pc, #124]	; (8004148 <HAL_DMA_Start_IT+0x22c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d004      	beq.n	80040d8 <HAL_DMA_Start_IT+0x1bc>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a1e      	ldr	r2, [pc, #120]	; (800414c <HAL_DMA_Start_IT+0x230>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d101      	bne.n	80040dc <HAL_DMA_Start_IT+0x1c0>
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <HAL_DMA_Start_IT+0x1c2>
 80040dc:	2300      	movs	r3, #0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d036      	beq.n	8004150 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f023 021e 	bic.w	r2, r3, #30
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0216 	orr.w	r2, r2, #22
 80040f4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d03e      	beq.n	800417c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f042 0208 	orr.w	r2, r2, #8
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	e035      	b.n	800417c <HAL_DMA_Start_IT+0x260>
 8004110:	40020010 	.word	0x40020010
 8004114:	40020028 	.word	0x40020028
 8004118:	40020040 	.word	0x40020040
 800411c:	40020058 	.word	0x40020058
 8004120:	40020070 	.word	0x40020070
 8004124:	40020088 	.word	0x40020088
 8004128:	400200a0 	.word	0x400200a0
 800412c:	400200b8 	.word	0x400200b8
 8004130:	40020410 	.word	0x40020410
 8004134:	40020428 	.word	0x40020428
 8004138:	40020440 	.word	0x40020440
 800413c:	40020458 	.word	0x40020458
 8004140:	40020470 	.word	0x40020470
 8004144:	40020488 	.word	0x40020488
 8004148:	400204a0 	.word	0x400204a0
 800414c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f023 020e 	bic.w	r2, r3, #14
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 020a 	orr.w	r2, r2, #10
 8004162:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	2b00      	cmp	r3, #0
 800416a:	d007      	beq.n	800417c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0204 	orr.w	r2, r2, #4
 800417a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a83      	ldr	r2, [pc, #524]	; (8004390 <HAL_DMA_Start_IT+0x474>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d072      	beq.n	800426c <HAL_DMA_Start_IT+0x350>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a82      	ldr	r2, [pc, #520]	; (8004394 <HAL_DMA_Start_IT+0x478>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d06d      	beq.n	800426c <HAL_DMA_Start_IT+0x350>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a80      	ldr	r2, [pc, #512]	; (8004398 <HAL_DMA_Start_IT+0x47c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d068      	beq.n	800426c <HAL_DMA_Start_IT+0x350>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a7f      	ldr	r2, [pc, #508]	; (800439c <HAL_DMA_Start_IT+0x480>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d063      	beq.n	800426c <HAL_DMA_Start_IT+0x350>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a7d      	ldr	r2, [pc, #500]	; (80043a0 <HAL_DMA_Start_IT+0x484>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d05e      	beq.n	800426c <HAL_DMA_Start_IT+0x350>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a7c      	ldr	r2, [pc, #496]	; (80043a4 <HAL_DMA_Start_IT+0x488>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d059      	beq.n	800426c <HAL_DMA_Start_IT+0x350>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a7a      	ldr	r2, [pc, #488]	; (80043a8 <HAL_DMA_Start_IT+0x48c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d054      	beq.n	800426c <HAL_DMA_Start_IT+0x350>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a79      	ldr	r2, [pc, #484]	; (80043ac <HAL_DMA_Start_IT+0x490>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d04f      	beq.n	800426c <HAL_DMA_Start_IT+0x350>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a77      	ldr	r2, [pc, #476]	; (80043b0 <HAL_DMA_Start_IT+0x494>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d04a      	beq.n	800426c <HAL_DMA_Start_IT+0x350>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a76      	ldr	r2, [pc, #472]	; (80043b4 <HAL_DMA_Start_IT+0x498>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d045      	beq.n	800426c <HAL_DMA_Start_IT+0x350>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a74      	ldr	r2, [pc, #464]	; (80043b8 <HAL_DMA_Start_IT+0x49c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d040      	beq.n	800426c <HAL_DMA_Start_IT+0x350>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a73      	ldr	r2, [pc, #460]	; (80043bc <HAL_DMA_Start_IT+0x4a0>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d03b      	beq.n	800426c <HAL_DMA_Start_IT+0x350>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a71      	ldr	r2, [pc, #452]	; (80043c0 <HAL_DMA_Start_IT+0x4a4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d036      	beq.n	800426c <HAL_DMA_Start_IT+0x350>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a70      	ldr	r2, [pc, #448]	; (80043c4 <HAL_DMA_Start_IT+0x4a8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d031      	beq.n	800426c <HAL_DMA_Start_IT+0x350>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a6e      	ldr	r2, [pc, #440]	; (80043c8 <HAL_DMA_Start_IT+0x4ac>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d02c      	beq.n	800426c <HAL_DMA_Start_IT+0x350>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a6d      	ldr	r2, [pc, #436]	; (80043cc <HAL_DMA_Start_IT+0x4b0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d027      	beq.n	800426c <HAL_DMA_Start_IT+0x350>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a6b      	ldr	r2, [pc, #428]	; (80043d0 <HAL_DMA_Start_IT+0x4b4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d022      	beq.n	800426c <HAL_DMA_Start_IT+0x350>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a6a      	ldr	r2, [pc, #424]	; (80043d4 <HAL_DMA_Start_IT+0x4b8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d01d      	beq.n	800426c <HAL_DMA_Start_IT+0x350>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a68      	ldr	r2, [pc, #416]	; (80043d8 <HAL_DMA_Start_IT+0x4bc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d018      	beq.n	800426c <HAL_DMA_Start_IT+0x350>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a67      	ldr	r2, [pc, #412]	; (80043dc <HAL_DMA_Start_IT+0x4c0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d013      	beq.n	800426c <HAL_DMA_Start_IT+0x350>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a65      	ldr	r2, [pc, #404]	; (80043e0 <HAL_DMA_Start_IT+0x4c4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00e      	beq.n	800426c <HAL_DMA_Start_IT+0x350>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a64      	ldr	r2, [pc, #400]	; (80043e4 <HAL_DMA_Start_IT+0x4c8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d009      	beq.n	800426c <HAL_DMA_Start_IT+0x350>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a62      	ldr	r2, [pc, #392]	; (80043e8 <HAL_DMA_Start_IT+0x4cc>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d004      	beq.n	800426c <HAL_DMA_Start_IT+0x350>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a61      	ldr	r2, [pc, #388]	; (80043ec <HAL_DMA_Start_IT+0x4d0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d101      	bne.n	8004270 <HAL_DMA_Start_IT+0x354>
 800426c:	2301      	movs	r3, #1
 800426e:	e000      	b.n	8004272 <HAL_DMA_Start_IT+0x356>
 8004270:	2300      	movs	r3, #0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d01a      	beq.n	80042ac <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d007      	beq.n	8004294 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800428e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004292:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004298:	2b00      	cmp	r3, #0
 800429a:	d007      	beq.n	80042ac <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042aa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a37      	ldr	r2, [pc, #220]	; (8004390 <HAL_DMA_Start_IT+0x474>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d04a      	beq.n	800434c <HAL_DMA_Start_IT+0x430>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a36      	ldr	r2, [pc, #216]	; (8004394 <HAL_DMA_Start_IT+0x478>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d045      	beq.n	800434c <HAL_DMA_Start_IT+0x430>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a34      	ldr	r2, [pc, #208]	; (8004398 <HAL_DMA_Start_IT+0x47c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d040      	beq.n	800434c <HAL_DMA_Start_IT+0x430>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a33      	ldr	r2, [pc, #204]	; (800439c <HAL_DMA_Start_IT+0x480>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d03b      	beq.n	800434c <HAL_DMA_Start_IT+0x430>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a31      	ldr	r2, [pc, #196]	; (80043a0 <HAL_DMA_Start_IT+0x484>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d036      	beq.n	800434c <HAL_DMA_Start_IT+0x430>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a30      	ldr	r2, [pc, #192]	; (80043a4 <HAL_DMA_Start_IT+0x488>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d031      	beq.n	800434c <HAL_DMA_Start_IT+0x430>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a2e      	ldr	r2, [pc, #184]	; (80043a8 <HAL_DMA_Start_IT+0x48c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d02c      	beq.n	800434c <HAL_DMA_Start_IT+0x430>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a2d      	ldr	r2, [pc, #180]	; (80043ac <HAL_DMA_Start_IT+0x490>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d027      	beq.n	800434c <HAL_DMA_Start_IT+0x430>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a2b      	ldr	r2, [pc, #172]	; (80043b0 <HAL_DMA_Start_IT+0x494>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d022      	beq.n	800434c <HAL_DMA_Start_IT+0x430>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a2a      	ldr	r2, [pc, #168]	; (80043b4 <HAL_DMA_Start_IT+0x498>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d01d      	beq.n	800434c <HAL_DMA_Start_IT+0x430>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a28      	ldr	r2, [pc, #160]	; (80043b8 <HAL_DMA_Start_IT+0x49c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d018      	beq.n	800434c <HAL_DMA_Start_IT+0x430>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a27      	ldr	r2, [pc, #156]	; (80043bc <HAL_DMA_Start_IT+0x4a0>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d013      	beq.n	800434c <HAL_DMA_Start_IT+0x430>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a25      	ldr	r2, [pc, #148]	; (80043c0 <HAL_DMA_Start_IT+0x4a4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00e      	beq.n	800434c <HAL_DMA_Start_IT+0x430>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a24      	ldr	r2, [pc, #144]	; (80043c4 <HAL_DMA_Start_IT+0x4a8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d009      	beq.n	800434c <HAL_DMA_Start_IT+0x430>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a22      	ldr	r2, [pc, #136]	; (80043c8 <HAL_DMA_Start_IT+0x4ac>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d004      	beq.n	800434c <HAL_DMA_Start_IT+0x430>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a21      	ldr	r2, [pc, #132]	; (80043cc <HAL_DMA_Start_IT+0x4b0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d108      	bne.n	800435e <HAL_DMA_Start_IT+0x442>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	e012      	b.n	8004384 <HAL_DMA_Start_IT+0x468>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f042 0201 	orr.w	r2, r2, #1
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	e009      	b.n	8004384 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004376:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004384:	7dfb      	ldrb	r3, [r7, #23]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40020010 	.word	0x40020010
 8004394:	40020028 	.word	0x40020028
 8004398:	40020040 	.word	0x40020040
 800439c:	40020058 	.word	0x40020058
 80043a0:	40020070 	.word	0x40020070
 80043a4:	40020088 	.word	0x40020088
 80043a8:	400200a0 	.word	0x400200a0
 80043ac:	400200b8 	.word	0x400200b8
 80043b0:	40020410 	.word	0x40020410
 80043b4:	40020428 	.word	0x40020428
 80043b8:	40020440 	.word	0x40020440
 80043bc:	40020458 	.word	0x40020458
 80043c0:	40020470 	.word	0x40020470
 80043c4:	40020488 	.word	0x40020488
 80043c8:	400204a0 	.word	0x400204a0
 80043cc:	400204b8 	.word	0x400204b8
 80043d0:	58025408 	.word	0x58025408
 80043d4:	5802541c 	.word	0x5802541c
 80043d8:	58025430 	.word	0x58025430
 80043dc:	58025444 	.word	0x58025444
 80043e0:	58025458 	.word	0x58025458
 80043e4:	5802546c 	.word	0x5802546c
 80043e8:	58025480 	.word	0x58025480
 80043ec:	58025494 	.word	0x58025494

080043f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08a      	sub	sp, #40	; 0x28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043fc:	4b67      	ldr	r3, [pc, #412]	; (800459c <HAL_DMA_IRQHandler+0x1ac>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a67      	ldr	r2, [pc, #412]	; (80045a0 <HAL_DMA_IRQHandler+0x1b0>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	0a9b      	lsrs	r3, r3, #10
 8004408:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004414:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a5f      	ldr	r2, [pc, #380]	; (80045a4 <HAL_DMA_IRQHandler+0x1b4>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d04a      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xd2>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a5d      	ldr	r2, [pc, #372]	; (80045a8 <HAL_DMA_IRQHandler+0x1b8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d045      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xd2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a5c      	ldr	r2, [pc, #368]	; (80045ac <HAL_DMA_IRQHandler+0x1bc>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d040      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xd2>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a5a      	ldr	r2, [pc, #360]	; (80045b0 <HAL_DMA_IRQHandler+0x1c0>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d03b      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xd2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a59      	ldr	r2, [pc, #356]	; (80045b4 <HAL_DMA_IRQHandler+0x1c4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d036      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xd2>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a57      	ldr	r2, [pc, #348]	; (80045b8 <HAL_DMA_IRQHandler+0x1c8>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d031      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xd2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a56      	ldr	r2, [pc, #344]	; (80045bc <HAL_DMA_IRQHandler+0x1cc>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d02c      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xd2>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a54      	ldr	r2, [pc, #336]	; (80045c0 <HAL_DMA_IRQHandler+0x1d0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d027      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xd2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a53      	ldr	r2, [pc, #332]	; (80045c4 <HAL_DMA_IRQHandler+0x1d4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d022      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xd2>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a51      	ldr	r2, [pc, #324]	; (80045c8 <HAL_DMA_IRQHandler+0x1d8>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d01d      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xd2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a50      	ldr	r2, [pc, #320]	; (80045cc <HAL_DMA_IRQHandler+0x1dc>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d018      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xd2>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a4e      	ldr	r2, [pc, #312]	; (80045d0 <HAL_DMA_IRQHandler+0x1e0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d013      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xd2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a4d      	ldr	r2, [pc, #308]	; (80045d4 <HAL_DMA_IRQHandler+0x1e4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00e      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xd2>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a4b      	ldr	r2, [pc, #300]	; (80045d8 <HAL_DMA_IRQHandler+0x1e8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d009      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xd2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a4a      	ldr	r2, [pc, #296]	; (80045dc <HAL_DMA_IRQHandler+0x1ec>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d004      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xd2>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a48      	ldr	r2, [pc, #288]	; (80045e0 <HAL_DMA_IRQHandler+0x1f0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d101      	bne.n	80044c6 <HAL_DMA_IRQHandler+0xd6>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <HAL_DMA_IRQHandler+0xd8>
 80044c6:	2300      	movs	r3, #0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 842b 	beq.w	8004d24 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d2:	f003 031f 	and.w	r3, r3, #31
 80044d6:	2208      	movs	r2, #8
 80044d8:	409a      	lsls	r2, r3
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	4013      	ands	r3, r2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 80a2 	beq.w	8004628 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a2e      	ldr	r2, [pc, #184]	; (80045a4 <HAL_DMA_IRQHandler+0x1b4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d04a      	beq.n	8004584 <HAL_DMA_IRQHandler+0x194>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a2d      	ldr	r2, [pc, #180]	; (80045a8 <HAL_DMA_IRQHandler+0x1b8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d045      	beq.n	8004584 <HAL_DMA_IRQHandler+0x194>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a2b      	ldr	r2, [pc, #172]	; (80045ac <HAL_DMA_IRQHandler+0x1bc>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d040      	beq.n	8004584 <HAL_DMA_IRQHandler+0x194>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a2a      	ldr	r2, [pc, #168]	; (80045b0 <HAL_DMA_IRQHandler+0x1c0>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d03b      	beq.n	8004584 <HAL_DMA_IRQHandler+0x194>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a28      	ldr	r2, [pc, #160]	; (80045b4 <HAL_DMA_IRQHandler+0x1c4>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d036      	beq.n	8004584 <HAL_DMA_IRQHandler+0x194>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a27      	ldr	r2, [pc, #156]	; (80045b8 <HAL_DMA_IRQHandler+0x1c8>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d031      	beq.n	8004584 <HAL_DMA_IRQHandler+0x194>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a25      	ldr	r2, [pc, #148]	; (80045bc <HAL_DMA_IRQHandler+0x1cc>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d02c      	beq.n	8004584 <HAL_DMA_IRQHandler+0x194>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a24      	ldr	r2, [pc, #144]	; (80045c0 <HAL_DMA_IRQHandler+0x1d0>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d027      	beq.n	8004584 <HAL_DMA_IRQHandler+0x194>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a22      	ldr	r2, [pc, #136]	; (80045c4 <HAL_DMA_IRQHandler+0x1d4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d022      	beq.n	8004584 <HAL_DMA_IRQHandler+0x194>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a21      	ldr	r2, [pc, #132]	; (80045c8 <HAL_DMA_IRQHandler+0x1d8>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d01d      	beq.n	8004584 <HAL_DMA_IRQHandler+0x194>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a1f      	ldr	r2, [pc, #124]	; (80045cc <HAL_DMA_IRQHandler+0x1dc>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d018      	beq.n	8004584 <HAL_DMA_IRQHandler+0x194>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1e      	ldr	r2, [pc, #120]	; (80045d0 <HAL_DMA_IRQHandler+0x1e0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d013      	beq.n	8004584 <HAL_DMA_IRQHandler+0x194>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a1c      	ldr	r2, [pc, #112]	; (80045d4 <HAL_DMA_IRQHandler+0x1e4>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d00e      	beq.n	8004584 <HAL_DMA_IRQHandler+0x194>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a1b      	ldr	r2, [pc, #108]	; (80045d8 <HAL_DMA_IRQHandler+0x1e8>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d009      	beq.n	8004584 <HAL_DMA_IRQHandler+0x194>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a19      	ldr	r2, [pc, #100]	; (80045dc <HAL_DMA_IRQHandler+0x1ec>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d004      	beq.n	8004584 <HAL_DMA_IRQHandler+0x194>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a18      	ldr	r2, [pc, #96]	; (80045e0 <HAL_DMA_IRQHandler+0x1f0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d12f      	bne.n	80045e4 <HAL_DMA_IRQHandler+0x1f4>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0304 	and.w	r3, r3, #4
 800458e:	2b00      	cmp	r3, #0
 8004590:	bf14      	ite	ne
 8004592:	2301      	movne	r3, #1
 8004594:	2300      	moveq	r3, #0
 8004596:	b2db      	uxtb	r3, r3
 8004598:	e02e      	b.n	80045f8 <HAL_DMA_IRQHandler+0x208>
 800459a:	bf00      	nop
 800459c:	24000000 	.word	0x24000000
 80045a0:	1b4e81b5 	.word	0x1b4e81b5
 80045a4:	40020010 	.word	0x40020010
 80045a8:	40020028 	.word	0x40020028
 80045ac:	40020040 	.word	0x40020040
 80045b0:	40020058 	.word	0x40020058
 80045b4:	40020070 	.word	0x40020070
 80045b8:	40020088 	.word	0x40020088
 80045bc:	400200a0 	.word	0x400200a0
 80045c0:	400200b8 	.word	0x400200b8
 80045c4:	40020410 	.word	0x40020410
 80045c8:	40020428 	.word	0x40020428
 80045cc:	40020440 	.word	0x40020440
 80045d0:	40020458 	.word	0x40020458
 80045d4:	40020470 	.word	0x40020470
 80045d8:	40020488 	.word	0x40020488
 80045dc:	400204a0 	.word	0x400204a0
 80045e0:	400204b8 	.word	0x400204b8
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	bf14      	ite	ne
 80045f2:	2301      	movne	r3, #1
 80045f4:	2300      	moveq	r3, #0
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d015      	beq.n	8004628 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0204 	bic.w	r2, r2, #4
 800460a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004610:	f003 031f 	and.w	r3, r3, #31
 8004614:	2208      	movs	r2, #8
 8004616:	409a      	lsls	r2, r3
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004620:	f043 0201 	orr.w	r2, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462c:	f003 031f 	and.w	r3, r3, #31
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	fa22 f303 	lsr.w	r3, r2, r3
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d06e      	beq.n	800471c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a69      	ldr	r2, [pc, #420]	; (80047e8 <HAL_DMA_IRQHandler+0x3f8>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d04a      	beq.n	80046de <HAL_DMA_IRQHandler+0x2ee>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a67      	ldr	r2, [pc, #412]	; (80047ec <HAL_DMA_IRQHandler+0x3fc>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d045      	beq.n	80046de <HAL_DMA_IRQHandler+0x2ee>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a66      	ldr	r2, [pc, #408]	; (80047f0 <HAL_DMA_IRQHandler+0x400>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d040      	beq.n	80046de <HAL_DMA_IRQHandler+0x2ee>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a64      	ldr	r2, [pc, #400]	; (80047f4 <HAL_DMA_IRQHandler+0x404>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d03b      	beq.n	80046de <HAL_DMA_IRQHandler+0x2ee>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a63      	ldr	r2, [pc, #396]	; (80047f8 <HAL_DMA_IRQHandler+0x408>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d036      	beq.n	80046de <HAL_DMA_IRQHandler+0x2ee>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a61      	ldr	r2, [pc, #388]	; (80047fc <HAL_DMA_IRQHandler+0x40c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d031      	beq.n	80046de <HAL_DMA_IRQHandler+0x2ee>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a60      	ldr	r2, [pc, #384]	; (8004800 <HAL_DMA_IRQHandler+0x410>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d02c      	beq.n	80046de <HAL_DMA_IRQHandler+0x2ee>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a5e      	ldr	r2, [pc, #376]	; (8004804 <HAL_DMA_IRQHandler+0x414>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d027      	beq.n	80046de <HAL_DMA_IRQHandler+0x2ee>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a5d      	ldr	r2, [pc, #372]	; (8004808 <HAL_DMA_IRQHandler+0x418>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d022      	beq.n	80046de <HAL_DMA_IRQHandler+0x2ee>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a5b      	ldr	r2, [pc, #364]	; (800480c <HAL_DMA_IRQHandler+0x41c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d01d      	beq.n	80046de <HAL_DMA_IRQHandler+0x2ee>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a5a      	ldr	r2, [pc, #360]	; (8004810 <HAL_DMA_IRQHandler+0x420>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d018      	beq.n	80046de <HAL_DMA_IRQHandler+0x2ee>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a58      	ldr	r2, [pc, #352]	; (8004814 <HAL_DMA_IRQHandler+0x424>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d013      	beq.n	80046de <HAL_DMA_IRQHandler+0x2ee>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a57      	ldr	r2, [pc, #348]	; (8004818 <HAL_DMA_IRQHandler+0x428>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00e      	beq.n	80046de <HAL_DMA_IRQHandler+0x2ee>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a55      	ldr	r2, [pc, #340]	; (800481c <HAL_DMA_IRQHandler+0x42c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d009      	beq.n	80046de <HAL_DMA_IRQHandler+0x2ee>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a54      	ldr	r2, [pc, #336]	; (8004820 <HAL_DMA_IRQHandler+0x430>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d004      	beq.n	80046de <HAL_DMA_IRQHandler+0x2ee>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a52      	ldr	r2, [pc, #328]	; (8004824 <HAL_DMA_IRQHandler+0x434>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d10a      	bne.n	80046f4 <HAL_DMA_IRQHandler+0x304>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	bf14      	ite	ne
 80046ec:	2301      	movne	r3, #1
 80046ee:	2300      	moveq	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	e003      	b.n	80046fc <HAL_DMA_IRQHandler+0x30c>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2300      	movs	r3, #0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00d      	beq.n	800471c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004704:	f003 031f 	and.w	r3, r3, #31
 8004708:	2201      	movs	r2, #1
 800470a:	409a      	lsls	r2, r3
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004714:	f043 0202 	orr.w	r2, r3, #2
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004720:	f003 031f 	and.w	r3, r3, #31
 8004724:	2204      	movs	r2, #4
 8004726:	409a      	lsls	r2, r3
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	4013      	ands	r3, r2
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 808f 	beq.w	8004850 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a2c      	ldr	r2, [pc, #176]	; (80047e8 <HAL_DMA_IRQHandler+0x3f8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d04a      	beq.n	80047d2 <HAL_DMA_IRQHandler+0x3e2>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a2a      	ldr	r2, [pc, #168]	; (80047ec <HAL_DMA_IRQHandler+0x3fc>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d045      	beq.n	80047d2 <HAL_DMA_IRQHandler+0x3e2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a29      	ldr	r2, [pc, #164]	; (80047f0 <HAL_DMA_IRQHandler+0x400>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d040      	beq.n	80047d2 <HAL_DMA_IRQHandler+0x3e2>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a27      	ldr	r2, [pc, #156]	; (80047f4 <HAL_DMA_IRQHandler+0x404>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d03b      	beq.n	80047d2 <HAL_DMA_IRQHandler+0x3e2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a26      	ldr	r2, [pc, #152]	; (80047f8 <HAL_DMA_IRQHandler+0x408>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d036      	beq.n	80047d2 <HAL_DMA_IRQHandler+0x3e2>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a24      	ldr	r2, [pc, #144]	; (80047fc <HAL_DMA_IRQHandler+0x40c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d031      	beq.n	80047d2 <HAL_DMA_IRQHandler+0x3e2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a23      	ldr	r2, [pc, #140]	; (8004800 <HAL_DMA_IRQHandler+0x410>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d02c      	beq.n	80047d2 <HAL_DMA_IRQHandler+0x3e2>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a21      	ldr	r2, [pc, #132]	; (8004804 <HAL_DMA_IRQHandler+0x414>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d027      	beq.n	80047d2 <HAL_DMA_IRQHandler+0x3e2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a20      	ldr	r2, [pc, #128]	; (8004808 <HAL_DMA_IRQHandler+0x418>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d022      	beq.n	80047d2 <HAL_DMA_IRQHandler+0x3e2>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1e      	ldr	r2, [pc, #120]	; (800480c <HAL_DMA_IRQHandler+0x41c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d01d      	beq.n	80047d2 <HAL_DMA_IRQHandler+0x3e2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1d      	ldr	r2, [pc, #116]	; (8004810 <HAL_DMA_IRQHandler+0x420>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d018      	beq.n	80047d2 <HAL_DMA_IRQHandler+0x3e2>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1b      	ldr	r2, [pc, #108]	; (8004814 <HAL_DMA_IRQHandler+0x424>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d013      	beq.n	80047d2 <HAL_DMA_IRQHandler+0x3e2>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a1a      	ldr	r2, [pc, #104]	; (8004818 <HAL_DMA_IRQHandler+0x428>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00e      	beq.n	80047d2 <HAL_DMA_IRQHandler+0x3e2>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a18      	ldr	r2, [pc, #96]	; (800481c <HAL_DMA_IRQHandler+0x42c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d009      	beq.n	80047d2 <HAL_DMA_IRQHandler+0x3e2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a17      	ldr	r2, [pc, #92]	; (8004820 <HAL_DMA_IRQHandler+0x430>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d004      	beq.n	80047d2 <HAL_DMA_IRQHandler+0x3e2>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a15      	ldr	r2, [pc, #84]	; (8004824 <HAL_DMA_IRQHandler+0x434>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d12a      	bne.n	8004828 <HAL_DMA_IRQHandler+0x438>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	bf14      	ite	ne
 80047e0:	2301      	movne	r3, #1
 80047e2:	2300      	moveq	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	e023      	b.n	8004830 <HAL_DMA_IRQHandler+0x440>
 80047e8:	40020010 	.word	0x40020010
 80047ec:	40020028 	.word	0x40020028
 80047f0:	40020040 	.word	0x40020040
 80047f4:	40020058 	.word	0x40020058
 80047f8:	40020070 	.word	0x40020070
 80047fc:	40020088 	.word	0x40020088
 8004800:	400200a0 	.word	0x400200a0
 8004804:	400200b8 	.word	0x400200b8
 8004808:	40020410 	.word	0x40020410
 800480c:	40020428 	.word	0x40020428
 8004810:	40020440 	.word	0x40020440
 8004814:	40020458 	.word	0x40020458
 8004818:	40020470 	.word	0x40020470
 800481c:	40020488 	.word	0x40020488
 8004820:	400204a0 	.word	0x400204a0
 8004824:	400204b8 	.word	0x400204b8
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2300      	movs	r3, #0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00d      	beq.n	8004850 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	2204      	movs	r2, #4
 800483e:	409a      	lsls	r2, r3
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004848:	f043 0204 	orr.w	r2, r3, #4
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004854:	f003 031f 	and.w	r3, r3, #31
 8004858:	2210      	movs	r2, #16
 800485a:	409a      	lsls	r2, r3
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	4013      	ands	r3, r2
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 80a6 	beq.w	80049b2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a85      	ldr	r2, [pc, #532]	; (8004a80 <HAL_DMA_IRQHandler+0x690>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d04a      	beq.n	8004906 <HAL_DMA_IRQHandler+0x516>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a83      	ldr	r2, [pc, #524]	; (8004a84 <HAL_DMA_IRQHandler+0x694>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d045      	beq.n	8004906 <HAL_DMA_IRQHandler+0x516>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a82      	ldr	r2, [pc, #520]	; (8004a88 <HAL_DMA_IRQHandler+0x698>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d040      	beq.n	8004906 <HAL_DMA_IRQHandler+0x516>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a80      	ldr	r2, [pc, #512]	; (8004a8c <HAL_DMA_IRQHandler+0x69c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d03b      	beq.n	8004906 <HAL_DMA_IRQHandler+0x516>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a7f      	ldr	r2, [pc, #508]	; (8004a90 <HAL_DMA_IRQHandler+0x6a0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d036      	beq.n	8004906 <HAL_DMA_IRQHandler+0x516>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a7d      	ldr	r2, [pc, #500]	; (8004a94 <HAL_DMA_IRQHandler+0x6a4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d031      	beq.n	8004906 <HAL_DMA_IRQHandler+0x516>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a7c      	ldr	r2, [pc, #496]	; (8004a98 <HAL_DMA_IRQHandler+0x6a8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d02c      	beq.n	8004906 <HAL_DMA_IRQHandler+0x516>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a7a      	ldr	r2, [pc, #488]	; (8004a9c <HAL_DMA_IRQHandler+0x6ac>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d027      	beq.n	8004906 <HAL_DMA_IRQHandler+0x516>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a79      	ldr	r2, [pc, #484]	; (8004aa0 <HAL_DMA_IRQHandler+0x6b0>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d022      	beq.n	8004906 <HAL_DMA_IRQHandler+0x516>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a77      	ldr	r2, [pc, #476]	; (8004aa4 <HAL_DMA_IRQHandler+0x6b4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d01d      	beq.n	8004906 <HAL_DMA_IRQHandler+0x516>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a76      	ldr	r2, [pc, #472]	; (8004aa8 <HAL_DMA_IRQHandler+0x6b8>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d018      	beq.n	8004906 <HAL_DMA_IRQHandler+0x516>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a74      	ldr	r2, [pc, #464]	; (8004aac <HAL_DMA_IRQHandler+0x6bc>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d013      	beq.n	8004906 <HAL_DMA_IRQHandler+0x516>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a73      	ldr	r2, [pc, #460]	; (8004ab0 <HAL_DMA_IRQHandler+0x6c0>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d00e      	beq.n	8004906 <HAL_DMA_IRQHandler+0x516>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a71      	ldr	r2, [pc, #452]	; (8004ab4 <HAL_DMA_IRQHandler+0x6c4>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d009      	beq.n	8004906 <HAL_DMA_IRQHandler+0x516>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a70      	ldr	r2, [pc, #448]	; (8004ab8 <HAL_DMA_IRQHandler+0x6c8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d004      	beq.n	8004906 <HAL_DMA_IRQHandler+0x516>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a6e      	ldr	r2, [pc, #440]	; (8004abc <HAL_DMA_IRQHandler+0x6cc>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d10a      	bne.n	800491c <HAL_DMA_IRQHandler+0x52c>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b00      	cmp	r3, #0
 8004912:	bf14      	ite	ne
 8004914:	2301      	movne	r3, #1
 8004916:	2300      	moveq	r3, #0
 8004918:	b2db      	uxtb	r3, r3
 800491a:	e009      	b.n	8004930 <HAL_DMA_IRQHandler+0x540>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	bf14      	ite	ne
 800492a:	2301      	movne	r3, #1
 800492c:	2300      	moveq	r3, #0
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	d03e      	beq.n	80049b2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004938:	f003 031f 	and.w	r3, r3, #31
 800493c:	2210      	movs	r2, #16
 800493e:	409a      	lsls	r2, r3
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d018      	beq.n	8004984 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d108      	bne.n	8004972 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004964:	2b00      	cmp	r3, #0
 8004966:	d024      	beq.n	80049b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	4798      	blx	r3
 8004970:	e01f      	b.n	80049b2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004976:	2b00      	cmp	r3, #0
 8004978:	d01b      	beq.n	80049b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	4798      	blx	r3
 8004982:	e016      	b.n	80049b2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498e:	2b00      	cmp	r3, #0
 8004990:	d107      	bne.n	80049a2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0208 	bic.w	r2, r2, #8
 80049a0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b6:	f003 031f 	and.w	r3, r3, #31
 80049ba:	2220      	movs	r2, #32
 80049bc:	409a      	lsls	r2, r3
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	4013      	ands	r3, r2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 8110 	beq.w	8004be8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a2c      	ldr	r2, [pc, #176]	; (8004a80 <HAL_DMA_IRQHandler+0x690>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d04a      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x678>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a2b      	ldr	r2, [pc, #172]	; (8004a84 <HAL_DMA_IRQHandler+0x694>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d045      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x678>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a29      	ldr	r2, [pc, #164]	; (8004a88 <HAL_DMA_IRQHandler+0x698>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d040      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x678>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a28      	ldr	r2, [pc, #160]	; (8004a8c <HAL_DMA_IRQHandler+0x69c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d03b      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x678>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a26      	ldr	r2, [pc, #152]	; (8004a90 <HAL_DMA_IRQHandler+0x6a0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d036      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x678>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a25      	ldr	r2, [pc, #148]	; (8004a94 <HAL_DMA_IRQHandler+0x6a4>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d031      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x678>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a23      	ldr	r2, [pc, #140]	; (8004a98 <HAL_DMA_IRQHandler+0x6a8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d02c      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x678>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a22      	ldr	r2, [pc, #136]	; (8004a9c <HAL_DMA_IRQHandler+0x6ac>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d027      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x678>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a20      	ldr	r2, [pc, #128]	; (8004aa0 <HAL_DMA_IRQHandler+0x6b0>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d022      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x678>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a1f      	ldr	r2, [pc, #124]	; (8004aa4 <HAL_DMA_IRQHandler+0x6b4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d01d      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x678>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a1d      	ldr	r2, [pc, #116]	; (8004aa8 <HAL_DMA_IRQHandler+0x6b8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d018      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x678>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a1c      	ldr	r2, [pc, #112]	; (8004aac <HAL_DMA_IRQHandler+0x6bc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d013      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x678>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a1a      	ldr	r2, [pc, #104]	; (8004ab0 <HAL_DMA_IRQHandler+0x6c0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00e      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x678>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a19      	ldr	r2, [pc, #100]	; (8004ab4 <HAL_DMA_IRQHandler+0x6c4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d009      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x678>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a17      	ldr	r2, [pc, #92]	; (8004ab8 <HAL_DMA_IRQHandler+0x6c8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d004      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x678>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a16      	ldr	r2, [pc, #88]	; (8004abc <HAL_DMA_IRQHandler+0x6cc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d12b      	bne.n	8004ac0 <HAL_DMA_IRQHandler+0x6d0>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0310 	and.w	r3, r3, #16
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	bf14      	ite	ne
 8004a76:	2301      	movne	r3, #1
 8004a78:	2300      	moveq	r3, #0
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	e02a      	b.n	8004ad4 <HAL_DMA_IRQHandler+0x6e4>
 8004a7e:	bf00      	nop
 8004a80:	40020010 	.word	0x40020010
 8004a84:	40020028 	.word	0x40020028
 8004a88:	40020040 	.word	0x40020040
 8004a8c:	40020058 	.word	0x40020058
 8004a90:	40020070 	.word	0x40020070
 8004a94:	40020088 	.word	0x40020088
 8004a98:	400200a0 	.word	0x400200a0
 8004a9c:	400200b8 	.word	0x400200b8
 8004aa0:	40020410 	.word	0x40020410
 8004aa4:	40020428 	.word	0x40020428
 8004aa8:	40020440 	.word	0x40020440
 8004aac:	40020458 	.word	0x40020458
 8004ab0:	40020470 	.word	0x40020470
 8004ab4:	40020488 	.word	0x40020488
 8004ab8:	400204a0 	.word	0x400204a0
 8004abc:	400204b8 	.word	0x400204b8
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bf14      	ite	ne
 8004ace:	2301      	movne	r3, #1
 8004ad0:	2300      	moveq	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 8087 	beq.w	8004be8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ade:	f003 031f 	and.w	r3, r3, #31
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	409a      	lsls	r2, r3
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d139      	bne.n	8004b6a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0216 	bic.w	r2, r2, #22
 8004b04:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695a      	ldr	r2, [r3, #20]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b14:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d103      	bne.n	8004b26 <HAL_DMA_IRQHandler+0x736>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0208 	bic.w	r2, r2, #8
 8004b34:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3a:	f003 031f 	and.w	r3, r3, #31
 8004b3e:	223f      	movs	r2, #63	; 0x3f
 8004b40:	409a      	lsls	r2, r3
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 834a 	beq.w	80051f4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	4798      	blx	r3
          }
          return;
 8004b68:	e344      	b.n	80051f4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d018      	beq.n	8004baa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d108      	bne.n	8004b98 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d02c      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	4798      	blx	r3
 8004b96:	e027      	b.n	8004be8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d023      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	4798      	blx	r3
 8004ba8:	e01e      	b.n	8004be8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10f      	bne.n	8004bd8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 0210 	bic.w	r2, r2, #16
 8004bc6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 8306 	beq.w	80051fe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 8088 	beq.w	8004d10 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2204      	movs	r2, #4
 8004c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a7a      	ldr	r2, [pc, #488]	; (8004df8 <HAL_DMA_IRQHandler+0xa08>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d04a      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x8b8>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a79      	ldr	r2, [pc, #484]	; (8004dfc <HAL_DMA_IRQHandler+0xa0c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d045      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x8b8>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a77      	ldr	r2, [pc, #476]	; (8004e00 <HAL_DMA_IRQHandler+0xa10>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d040      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x8b8>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a76      	ldr	r2, [pc, #472]	; (8004e04 <HAL_DMA_IRQHandler+0xa14>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d03b      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x8b8>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a74      	ldr	r2, [pc, #464]	; (8004e08 <HAL_DMA_IRQHandler+0xa18>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d036      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x8b8>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a73      	ldr	r2, [pc, #460]	; (8004e0c <HAL_DMA_IRQHandler+0xa1c>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d031      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x8b8>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a71      	ldr	r2, [pc, #452]	; (8004e10 <HAL_DMA_IRQHandler+0xa20>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d02c      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x8b8>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a70      	ldr	r2, [pc, #448]	; (8004e14 <HAL_DMA_IRQHandler+0xa24>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d027      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x8b8>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a6e      	ldr	r2, [pc, #440]	; (8004e18 <HAL_DMA_IRQHandler+0xa28>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d022      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x8b8>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a6d      	ldr	r2, [pc, #436]	; (8004e1c <HAL_DMA_IRQHandler+0xa2c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d01d      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x8b8>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a6b      	ldr	r2, [pc, #428]	; (8004e20 <HAL_DMA_IRQHandler+0xa30>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d018      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x8b8>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a6a      	ldr	r2, [pc, #424]	; (8004e24 <HAL_DMA_IRQHandler+0xa34>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d013      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x8b8>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a68      	ldr	r2, [pc, #416]	; (8004e28 <HAL_DMA_IRQHandler+0xa38>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00e      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x8b8>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a67      	ldr	r2, [pc, #412]	; (8004e2c <HAL_DMA_IRQHandler+0xa3c>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d009      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x8b8>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a65      	ldr	r2, [pc, #404]	; (8004e30 <HAL_DMA_IRQHandler+0xa40>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d004      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x8b8>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a64      	ldr	r2, [pc, #400]	; (8004e34 <HAL_DMA_IRQHandler+0xa44>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d108      	bne.n	8004cba <HAL_DMA_IRQHandler+0x8ca>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0201 	bic.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	e007      	b.n	8004cca <HAL_DMA_IRQHandler+0x8da>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0201 	bic.w	r2, r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d307      	bcc.n	8004ce6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1f2      	bne.n	8004cca <HAL_DMA_IRQHandler+0x8da>
 8004ce4:	e000      	b.n	8004ce8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004ce6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d004      	beq.n	8004d00 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2203      	movs	r2, #3
 8004cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004cfe:	e003      	b.n	8004d08 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 8272 	beq.w	80051fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	4798      	blx	r3
 8004d22:	e26c      	b.n	80051fe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a43      	ldr	r2, [pc, #268]	; (8004e38 <HAL_DMA_IRQHandler+0xa48>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d022      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x984>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a42      	ldr	r2, [pc, #264]	; (8004e3c <HAL_DMA_IRQHandler+0xa4c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d01d      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x984>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a40      	ldr	r2, [pc, #256]	; (8004e40 <HAL_DMA_IRQHandler+0xa50>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d018      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x984>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a3f      	ldr	r2, [pc, #252]	; (8004e44 <HAL_DMA_IRQHandler+0xa54>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d013      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x984>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a3d      	ldr	r2, [pc, #244]	; (8004e48 <HAL_DMA_IRQHandler+0xa58>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00e      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x984>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a3c      	ldr	r2, [pc, #240]	; (8004e4c <HAL_DMA_IRQHandler+0xa5c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d009      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x984>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a3a      	ldr	r2, [pc, #232]	; (8004e50 <HAL_DMA_IRQHandler+0xa60>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d004      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x984>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a39      	ldr	r2, [pc, #228]	; (8004e54 <HAL_DMA_IRQHandler+0xa64>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d101      	bne.n	8004d78 <HAL_DMA_IRQHandler+0x988>
 8004d74:	2301      	movs	r3, #1
 8004d76:	e000      	b.n	8004d7a <HAL_DMA_IRQHandler+0x98a>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 823f 	beq.w	80051fe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d8c:	f003 031f 	and.w	r3, r3, #31
 8004d90:	2204      	movs	r2, #4
 8004d92:	409a      	lsls	r2, r3
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	4013      	ands	r3, r2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 80cd 	beq.w	8004f38 <HAL_DMA_IRQHandler+0xb48>
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 80c7 	beq.w	8004f38 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dae:	f003 031f 	and.w	r3, r3, #31
 8004db2:	2204      	movs	r2, #4
 8004db4:	409a      	lsls	r2, r3
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d049      	beq.n	8004e58 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d109      	bne.n	8004de2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 8210 	beq.w	80051f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004de0:	e20a      	b.n	80051f8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 8206 	beq.w	80051f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004df4:	e200      	b.n	80051f8 <HAL_DMA_IRQHandler+0xe08>
 8004df6:	bf00      	nop
 8004df8:	40020010 	.word	0x40020010
 8004dfc:	40020028 	.word	0x40020028
 8004e00:	40020040 	.word	0x40020040
 8004e04:	40020058 	.word	0x40020058
 8004e08:	40020070 	.word	0x40020070
 8004e0c:	40020088 	.word	0x40020088
 8004e10:	400200a0 	.word	0x400200a0
 8004e14:	400200b8 	.word	0x400200b8
 8004e18:	40020410 	.word	0x40020410
 8004e1c:	40020428 	.word	0x40020428
 8004e20:	40020440 	.word	0x40020440
 8004e24:	40020458 	.word	0x40020458
 8004e28:	40020470 	.word	0x40020470
 8004e2c:	40020488 	.word	0x40020488
 8004e30:	400204a0 	.word	0x400204a0
 8004e34:	400204b8 	.word	0x400204b8
 8004e38:	58025408 	.word	0x58025408
 8004e3c:	5802541c 	.word	0x5802541c
 8004e40:	58025430 	.word	0x58025430
 8004e44:	58025444 	.word	0x58025444
 8004e48:	58025458 	.word	0x58025458
 8004e4c:	5802546c 	.word	0x5802546c
 8004e50:	58025480 	.word	0x58025480
 8004e54:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f003 0320 	and.w	r3, r3, #32
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d160      	bne.n	8004f24 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a7f      	ldr	r2, [pc, #508]	; (8005064 <HAL_DMA_IRQHandler+0xc74>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d04a      	beq.n	8004f02 <HAL_DMA_IRQHandler+0xb12>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a7d      	ldr	r2, [pc, #500]	; (8005068 <HAL_DMA_IRQHandler+0xc78>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d045      	beq.n	8004f02 <HAL_DMA_IRQHandler+0xb12>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a7c      	ldr	r2, [pc, #496]	; (800506c <HAL_DMA_IRQHandler+0xc7c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d040      	beq.n	8004f02 <HAL_DMA_IRQHandler+0xb12>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a7a      	ldr	r2, [pc, #488]	; (8005070 <HAL_DMA_IRQHandler+0xc80>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d03b      	beq.n	8004f02 <HAL_DMA_IRQHandler+0xb12>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a79      	ldr	r2, [pc, #484]	; (8005074 <HAL_DMA_IRQHandler+0xc84>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d036      	beq.n	8004f02 <HAL_DMA_IRQHandler+0xb12>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a77      	ldr	r2, [pc, #476]	; (8005078 <HAL_DMA_IRQHandler+0xc88>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d031      	beq.n	8004f02 <HAL_DMA_IRQHandler+0xb12>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a76      	ldr	r2, [pc, #472]	; (800507c <HAL_DMA_IRQHandler+0xc8c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d02c      	beq.n	8004f02 <HAL_DMA_IRQHandler+0xb12>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a74      	ldr	r2, [pc, #464]	; (8005080 <HAL_DMA_IRQHandler+0xc90>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d027      	beq.n	8004f02 <HAL_DMA_IRQHandler+0xb12>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a73      	ldr	r2, [pc, #460]	; (8005084 <HAL_DMA_IRQHandler+0xc94>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d022      	beq.n	8004f02 <HAL_DMA_IRQHandler+0xb12>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a71      	ldr	r2, [pc, #452]	; (8005088 <HAL_DMA_IRQHandler+0xc98>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d01d      	beq.n	8004f02 <HAL_DMA_IRQHandler+0xb12>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a70      	ldr	r2, [pc, #448]	; (800508c <HAL_DMA_IRQHandler+0xc9c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d018      	beq.n	8004f02 <HAL_DMA_IRQHandler+0xb12>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a6e      	ldr	r2, [pc, #440]	; (8005090 <HAL_DMA_IRQHandler+0xca0>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d013      	beq.n	8004f02 <HAL_DMA_IRQHandler+0xb12>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a6d      	ldr	r2, [pc, #436]	; (8005094 <HAL_DMA_IRQHandler+0xca4>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00e      	beq.n	8004f02 <HAL_DMA_IRQHandler+0xb12>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a6b      	ldr	r2, [pc, #428]	; (8005098 <HAL_DMA_IRQHandler+0xca8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d009      	beq.n	8004f02 <HAL_DMA_IRQHandler+0xb12>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a6a      	ldr	r2, [pc, #424]	; (800509c <HAL_DMA_IRQHandler+0xcac>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d004      	beq.n	8004f02 <HAL_DMA_IRQHandler+0xb12>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a68      	ldr	r2, [pc, #416]	; (80050a0 <HAL_DMA_IRQHandler+0xcb0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d108      	bne.n	8004f14 <HAL_DMA_IRQHandler+0xb24>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0208 	bic.w	r2, r2, #8
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	e007      	b.n	8004f24 <HAL_DMA_IRQHandler+0xb34>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0204 	bic.w	r2, r2, #4
 8004f22:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 8165 	beq.w	80051f8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f36:	e15f      	b.n	80051f8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f3c:	f003 031f 	and.w	r3, r3, #31
 8004f40:	2202      	movs	r2, #2
 8004f42:	409a      	lsls	r2, r3
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	4013      	ands	r3, r2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 80c5 	beq.w	80050d8 <HAL_DMA_IRQHandler+0xce8>
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 80bf 	beq.w	80050d8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f5e:	f003 031f 	and.w	r3, r3, #31
 8004f62:	2202      	movs	r2, #2
 8004f64:	409a      	lsls	r2, r3
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d018      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d109      	bne.n	8004f92 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 813a 	beq.w	80051fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f90:	e134      	b.n	80051fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 8130 	beq.w	80051fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fa4:	e12a      	b.n	80051fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f040 8089 	bne.w	80050c4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a2b      	ldr	r2, [pc, #172]	; (8005064 <HAL_DMA_IRQHandler+0xc74>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d04a      	beq.n	8005052 <HAL_DMA_IRQHandler+0xc62>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a29      	ldr	r2, [pc, #164]	; (8005068 <HAL_DMA_IRQHandler+0xc78>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d045      	beq.n	8005052 <HAL_DMA_IRQHandler+0xc62>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a28      	ldr	r2, [pc, #160]	; (800506c <HAL_DMA_IRQHandler+0xc7c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d040      	beq.n	8005052 <HAL_DMA_IRQHandler+0xc62>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a26      	ldr	r2, [pc, #152]	; (8005070 <HAL_DMA_IRQHandler+0xc80>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d03b      	beq.n	8005052 <HAL_DMA_IRQHandler+0xc62>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a25      	ldr	r2, [pc, #148]	; (8005074 <HAL_DMA_IRQHandler+0xc84>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d036      	beq.n	8005052 <HAL_DMA_IRQHandler+0xc62>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a23      	ldr	r2, [pc, #140]	; (8005078 <HAL_DMA_IRQHandler+0xc88>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d031      	beq.n	8005052 <HAL_DMA_IRQHandler+0xc62>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a22      	ldr	r2, [pc, #136]	; (800507c <HAL_DMA_IRQHandler+0xc8c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d02c      	beq.n	8005052 <HAL_DMA_IRQHandler+0xc62>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a20      	ldr	r2, [pc, #128]	; (8005080 <HAL_DMA_IRQHandler+0xc90>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d027      	beq.n	8005052 <HAL_DMA_IRQHandler+0xc62>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a1f      	ldr	r2, [pc, #124]	; (8005084 <HAL_DMA_IRQHandler+0xc94>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d022      	beq.n	8005052 <HAL_DMA_IRQHandler+0xc62>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a1d      	ldr	r2, [pc, #116]	; (8005088 <HAL_DMA_IRQHandler+0xc98>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d01d      	beq.n	8005052 <HAL_DMA_IRQHandler+0xc62>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a1c      	ldr	r2, [pc, #112]	; (800508c <HAL_DMA_IRQHandler+0xc9c>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d018      	beq.n	8005052 <HAL_DMA_IRQHandler+0xc62>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a1a      	ldr	r2, [pc, #104]	; (8005090 <HAL_DMA_IRQHandler+0xca0>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d013      	beq.n	8005052 <HAL_DMA_IRQHandler+0xc62>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a19      	ldr	r2, [pc, #100]	; (8005094 <HAL_DMA_IRQHandler+0xca4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d00e      	beq.n	8005052 <HAL_DMA_IRQHandler+0xc62>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a17      	ldr	r2, [pc, #92]	; (8005098 <HAL_DMA_IRQHandler+0xca8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d009      	beq.n	8005052 <HAL_DMA_IRQHandler+0xc62>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a16      	ldr	r2, [pc, #88]	; (800509c <HAL_DMA_IRQHandler+0xcac>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d004      	beq.n	8005052 <HAL_DMA_IRQHandler+0xc62>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a14      	ldr	r2, [pc, #80]	; (80050a0 <HAL_DMA_IRQHandler+0xcb0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d128      	bne.n	80050a4 <HAL_DMA_IRQHandler+0xcb4>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0214 	bic.w	r2, r2, #20
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	e027      	b.n	80050b4 <HAL_DMA_IRQHandler+0xcc4>
 8005064:	40020010 	.word	0x40020010
 8005068:	40020028 	.word	0x40020028
 800506c:	40020040 	.word	0x40020040
 8005070:	40020058 	.word	0x40020058
 8005074:	40020070 	.word	0x40020070
 8005078:	40020088 	.word	0x40020088
 800507c:	400200a0 	.word	0x400200a0
 8005080:	400200b8 	.word	0x400200b8
 8005084:	40020410 	.word	0x40020410
 8005088:	40020428 	.word	0x40020428
 800508c:	40020440 	.word	0x40020440
 8005090:	40020458 	.word	0x40020458
 8005094:	40020470 	.word	0x40020470
 8005098:	40020488 	.word	0x40020488
 800509c:	400204a0 	.word	0x400204a0
 80050a0:	400204b8 	.word	0x400204b8
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 020a 	bic.w	r2, r2, #10
 80050b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 8097 	beq.w	80051fc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050d6:	e091      	b.n	80051fc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050dc:	f003 031f 	and.w	r3, r3, #31
 80050e0:	2208      	movs	r2, #8
 80050e2:	409a      	lsls	r2, r3
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	4013      	ands	r3, r2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 8088 	beq.w	80051fe <HAL_DMA_IRQHandler+0xe0e>
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 8082 	beq.w	80051fe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a41      	ldr	r2, [pc, #260]	; (8005204 <HAL_DMA_IRQHandler+0xe14>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d04a      	beq.n	800519a <HAL_DMA_IRQHandler+0xdaa>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a3f      	ldr	r2, [pc, #252]	; (8005208 <HAL_DMA_IRQHandler+0xe18>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d045      	beq.n	800519a <HAL_DMA_IRQHandler+0xdaa>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a3e      	ldr	r2, [pc, #248]	; (800520c <HAL_DMA_IRQHandler+0xe1c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d040      	beq.n	800519a <HAL_DMA_IRQHandler+0xdaa>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a3c      	ldr	r2, [pc, #240]	; (8005210 <HAL_DMA_IRQHandler+0xe20>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d03b      	beq.n	800519a <HAL_DMA_IRQHandler+0xdaa>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a3b      	ldr	r2, [pc, #236]	; (8005214 <HAL_DMA_IRQHandler+0xe24>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d036      	beq.n	800519a <HAL_DMA_IRQHandler+0xdaa>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a39      	ldr	r2, [pc, #228]	; (8005218 <HAL_DMA_IRQHandler+0xe28>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d031      	beq.n	800519a <HAL_DMA_IRQHandler+0xdaa>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a38      	ldr	r2, [pc, #224]	; (800521c <HAL_DMA_IRQHandler+0xe2c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d02c      	beq.n	800519a <HAL_DMA_IRQHandler+0xdaa>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a36      	ldr	r2, [pc, #216]	; (8005220 <HAL_DMA_IRQHandler+0xe30>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d027      	beq.n	800519a <HAL_DMA_IRQHandler+0xdaa>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a35      	ldr	r2, [pc, #212]	; (8005224 <HAL_DMA_IRQHandler+0xe34>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d022      	beq.n	800519a <HAL_DMA_IRQHandler+0xdaa>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a33      	ldr	r2, [pc, #204]	; (8005228 <HAL_DMA_IRQHandler+0xe38>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d01d      	beq.n	800519a <HAL_DMA_IRQHandler+0xdaa>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a32      	ldr	r2, [pc, #200]	; (800522c <HAL_DMA_IRQHandler+0xe3c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d018      	beq.n	800519a <HAL_DMA_IRQHandler+0xdaa>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a30      	ldr	r2, [pc, #192]	; (8005230 <HAL_DMA_IRQHandler+0xe40>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d013      	beq.n	800519a <HAL_DMA_IRQHandler+0xdaa>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a2f      	ldr	r2, [pc, #188]	; (8005234 <HAL_DMA_IRQHandler+0xe44>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d00e      	beq.n	800519a <HAL_DMA_IRQHandler+0xdaa>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a2d      	ldr	r2, [pc, #180]	; (8005238 <HAL_DMA_IRQHandler+0xe48>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d009      	beq.n	800519a <HAL_DMA_IRQHandler+0xdaa>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a2c      	ldr	r2, [pc, #176]	; (800523c <HAL_DMA_IRQHandler+0xe4c>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d004      	beq.n	800519a <HAL_DMA_IRQHandler+0xdaa>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a2a      	ldr	r2, [pc, #168]	; (8005240 <HAL_DMA_IRQHandler+0xe50>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d108      	bne.n	80051ac <HAL_DMA_IRQHandler+0xdbc>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 021c 	bic.w	r2, r2, #28
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	e007      	b.n	80051bc <HAL_DMA_IRQHandler+0xdcc>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 020e 	bic.w	r2, r2, #14
 80051ba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c0:	f003 031f 	and.w	r3, r3, #31
 80051c4:	2201      	movs	r2, #1
 80051c6:	409a      	lsls	r2, r3
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d009      	beq.n	80051fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	4798      	blx	r3
 80051f2:	e004      	b.n	80051fe <HAL_DMA_IRQHandler+0xe0e>
          return;
 80051f4:	bf00      	nop
 80051f6:	e002      	b.n	80051fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051f8:	bf00      	nop
 80051fa:	e000      	b.n	80051fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051fc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80051fe:	3728      	adds	r7, #40	; 0x28
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40020010 	.word	0x40020010
 8005208:	40020028 	.word	0x40020028
 800520c:	40020040 	.word	0x40020040
 8005210:	40020058 	.word	0x40020058
 8005214:	40020070 	.word	0x40020070
 8005218:	40020088 	.word	0x40020088
 800521c:	400200a0 	.word	0x400200a0
 8005220:	400200b8 	.word	0x400200b8
 8005224:	40020410 	.word	0x40020410
 8005228:	40020428 	.word	0x40020428
 800522c:	40020440 	.word	0x40020440
 8005230:	40020458 	.word	0x40020458
 8005234:	40020470 	.word	0x40020470
 8005238:	40020488 	.word	0x40020488
 800523c:	400204a0 	.word	0x400204a0
 8005240:	400204b8 	.word	0x400204b8

08005244 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005256:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a7f      	ldr	r2, [pc, #508]	; (8005460 <DMA_SetConfig+0x21c>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d072      	beq.n	800534e <DMA_SetConfig+0x10a>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a7d      	ldr	r2, [pc, #500]	; (8005464 <DMA_SetConfig+0x220>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d06d      	beq.n	800534e <DMA_SetConfig+0x10a>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a7c      	ldr	r2, [pc, #496]	; (8005468 <DMA_SetConfig+0x224>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d068      	beq.n	800534e <DMA_SetConfig+0x10a>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a7a      	ldr	r2, [pc, #488]	; (800546c <DMA_SetConfig+0x228>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d063      	beq.n	800534e <DMA_SetConfig+0x10a>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a79      	ldr	r2, [pc, #484]	; (8005470 <DMA_SetConfig+0x22c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d05e      	beq.n	800534e <DMA_SetConfig+0x10a>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a77      	ldr	r2, [pc, #476]	; (8005474 <DMA_SetConfig+0x230>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d059      	beq.n	800534e <DMA_SetConfig+0x10a>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a76      	ldr	r2, [pc, #472]	; (8005478 <DMA_SetConfig+0x234>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d054      	beq.n	800534e <DMA_SetConfig+0x10a>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a74      	ldr	r2, [pc, #464]	; (800547c <DMA_SetConfig+0x238>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d04f      	beq.n	800534e <DMA_SetConfig+0x10a>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a73      	ldr	r2, [pc, #460]	; (8005480 <DMA_SetConfig+0x23c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d04a      	beq.n	800534e <DMA_SetConfig+0x10a>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a71      	ldr	r2, [pc, #452]	; (8005484 <DMA_SetConfig+0x240>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d045      	beq.n	800534e <DMA_SetConfig+0x10a>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a70      	ldr	r2, [pc, #448]	; (8005488 <DMA_SetConfig+0x244>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d040      	beq.n	800534e <DMA_SetConfig+0x10a>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a6e      	ldr	r2, [pc, #440]	; (800548c <DMA_SetConfig+0x248>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d03b      	beq.n	800534e <DMA_SetConfig+0x10a>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a6d      	ldr	r2, [pc, #436]	; (8005490 <DMA_SetConfig+0x24c>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d036      	beq.n	800534e <DMA_SetConfig+0x10a>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a6b      	ldr	r2, [pc, #428]	; (8005494 <DMA_SetConfig+0x250>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d031      	beq.n	800534e <DMA_SetConfig+0x10a>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a6a      	ldr	r2, [pc, #424]	; (8005498 <DMA_SetConfig+0x254>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d02c      	beq.n	800534e <DMA_SetConfig+0x10a>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a68      	ldr	r2, [pc, #416]	; (800549c <DMA_SetConfig+0x258>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d027      	beq.n	800534e <DMA_SetConfig+0x10a>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a67      	ldr	r2, [pc, #412]	; (80054a0 <DMA_SetConfig+0x25c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d022      	beq.n	800534e <DMA_SetConfig+0x10a>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a65      	ldr	r2, [pc, #404]	; (80054a4 <DMA_SetConfig+0x260>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d01d      	beq.n	800534e <DMA_SetConfig+0x10a>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a64      	ldr	r2, [pc, #400]	; (80054a8 <DMA_SetConfig+0x264>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d018      	beq.n	800534e <DMA_SetConfig+0x10a>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a62      	ldr	r2, [pc, #392]	; (80054ac <DMA_SetConfig+0x268>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d013      	beq.n	800534e <DMA_SetConfig+0x10a>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a61      	ldr	r2, [pc, #388]	; (80054b0 <DMA_SetConfig+0x26c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d00e      	beq.n	800534e <DMA_SetConfig+0x10a>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a5f      	ldr	r2, [pc, #380]	; (80054b4 <DMA_SetConfig+0x270>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d009      	beq.n	800534e <DMA_SetConfig+0x10a>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a5e      	ldr	r2, [pc, #376]	; (80054b8 <DMA_SetConfig+0x274>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d004      	beq.n	800534e <DMA_SetConfig+0x10a>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a5c      	ldr	r2, [pc, #368]	; (80054bc <DMA_SetConfig+0x278>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d101      	bne.n	8005352 <DMA_SetConfig+0x10e>
 800534e:	2301      	movs	r3, #1
 8005350:	e000      	b.n	8005354 <DMA_SetConfig+0x110>
 8005352:	2300      	movs	r3, #0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00d      	beq.n	8005374 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005360:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005366:	2b00      	cmp	r3, #0
 8005368:	d004      	beq.n	8005374 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005372:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a39      	ldr	r2, [pc, #228]	; (8005460 <DMA_SetConfig+0x21c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d04a      	beq.n	8005414 <DMA_SetConfig+0x1d0>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a38      	ldr	r2, [pc, #224]	; (8005464 <DMA_SetConfig+0x220>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d045      	beq.n	8005414 <DMA_SetConfig+0x1d0>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a36      	ldr	r2, [pc, #216]	; (8005468 <DMA_SetConfig+0x224>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d040      	beq.n	8005414 <DMA_SetConfig+0x1d0>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a35      	ldr	r2, [pc, #212]	; (800546c <DMA_SetConfig+0x228>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d03b      	beq.n	8005414 <DMA_SetConfig+0x1d0>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a33      	ldr	r2, [pc, #204]	; (8005470 <DMA_SetConfig+0x22c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d036      	beq.n	8005414 <DMA_SetConfig+0x1d0>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a32      	ldr	r2, [pc, #200]	; (8005474 <DMA_SetConfig+0x230>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d031      	beq.n	8005414 <DMA_SetConfig+0x1d0>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a30      	ldr	r2, [pc, #192]	; (8005478 <DMA_SetConfig+0x234>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d02c      	beq.n	8005414 <DMA_SetConfig+0x1d0>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a2f      	ldr	r2, [pc, #188]	; (800547c <DMA_SetConfig+0x238>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d027      	beq.n	8005414 <DMA_SetConfig+0x1d0>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a2d      	ldr	r2, [pc, #180]	; (8005480 <DMA_SetConfig+0x23c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d022      	beq.n	8005414 <DMA_SetConfig+0x1d0>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a2c      	ldr	r2, [pc, #176]	; (8005484 <DMA_SetConfig+0x240>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d01d      	beq.n	8005414 <DMA_SetConfig+0x1d0>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a2a      	ldr	r2, [pc, #168]	; (8005488 <DMA_SetConfig+0x244>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d018      	beq.n	8005414 <DMA_SetConfig+0x1d0>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a29      	ldr	r2, [pc, #164]	; (800548c <DMA_SetConfig+0x248>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d013      	beq.n	8005414 <DMA_SetConfig+0x1d0>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a27      	ldr	r2, [pc, #156]	; (8005490 <DMA_SetConfig+0x24c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00e      	beq.n	8005414 <DMA_SetConfig+0x1d0>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a26      	ldr	r2, [pc, #152]	; (8005494 <DMA_SetConfig+0x250>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d009      	beq.n	8005414 <DMA_SetConfig+0x1d0>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a24      	ldr	r2, [pc, #144]	; (8005498 <DMA_SetConfig+0x254>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d004      	beq.n	8005414 <DMA_SetConfig+0x1d0>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a23      	ldr	r2, [pc, #140]	; (800549c <DMA_SetConfig+0x258>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d101      	bne.n	8005418 <DMA_SetConfig+0x1d4>
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <DMA_SetConfig+0x1d6>
 8005418:	2300      	movs	r3, #0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d059      	beq.n	80054d2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005422:	f003 031f 	and.w	r3, r3, #31
 8005426:	223f      	movs	r2, #63	; 0x3f
 8005428:	409a      	lsls	r2, r3
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800543c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	2b40      	cmp	r3, #64	; 0x40
 800544c:	d138      	bne.n	80054c0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800545e:	e086      	b.n	800556e <DMA_SetConfig+0x32a>
 8005460:	40020010 	.word	0x40020010
 8005464:	40020028 	.word	0x40020028
 8005468:	40020040 	.word	0x40020040
 800546c:	40020058 	.word	0x40020058
 8005470:	40020070 	.word	0x40020070
 8005474:	40020088 	.word	0x40020088
 8005478:	400200a0 	.word	0x400200a0
 800547c:	400200b8 	.word	0x400200b8
 8005480:	40020410 	.word	0x40020410
 8005484:	40020428 	.word	0x40020428
 8005488:	40020440 	.word	0x40020440
 800548c:	40020458 	.word	0x40020458
 8005490:	40020470 	.word	0x40020470
 8005494:	40020488 	.word	0x40020488
 8005498:	400204a0 	.word	0x400204a0
 800549c:	400204b8 	.word	0x400204b8
 80054a0:	58025408 	.word	0x58025408
 80054a4:	5802541c 	.word	0x5802541c
 80054a8:	58025430 	.word	0x58025430
 80054ac:	58025444 	.word	0x58025444
 80054b0:	58025458 	.word	0x58025458
 80054b4:	5802546c 	.word	0x5802546c
 80054b8:	58025480 	.word	0x58025480
 80054bc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	60da      	str	r2, [r3, #12]
}
 80054d0:	e04d      	b.n	800556e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a29      	ldr	r2, [pc, #164]	; (800557c <DMA_SetConfig+0x338>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d022      	beq.n	8005522 <DMA_SetConfig+0x2de>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a27      	ldr	r2, [pc, #156]	; (8005580 <DMA_SetConfig+0x33c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d01d      	beq.n	8005522 <DMA_SetConfig+0x2de>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a26      	ldr	r2, [pc, #152]	; (8005584 <DMA_SetConfig+0x340>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d018      	beq.n	8005522 <DMA_SetConfig+0x2de>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a24      	ldr	r2, [pc, #144]	; (8005588 <DMA_SetConfig+0x344>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d013      	beq.n	8005522 <DMA_SetConfig+0x2de>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a23      	ldr	r2, [pc, #140]	; (800558c <DMA_SetConfig+0x348>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00e      	beq.n	8005522 <DMA_SetConfig+0x2de>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a21      	ldr	r2, [pc, #132]	; (8005590 <DMA_SetConfig+0x34c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d009      	beq.n	8005522 <DMA_SetConfig+0x2de>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a20      	ldr	r2, [pc, #128]	; (8005594 <DMA_SetConfig+0x350>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d004      	beq.n	8005522 <DMA_SetConfig+0x2de>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a1e      	ldr	r2, [pc, #120]	; (8005598 <DMA_SetConfig+0x354>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d101      	bne.n	8005526 <DMA_SetConfig+0x2e2>
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <DMA_SetConfig+0x2e4>
 8005526:	2300      	movs	r3, #0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d020      	beq.n	800556e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005530:	f003 031f 	and.w	r3, r3, #31
 8005534:	2201      	movs	r2, #1
 8005536:	409a      	lsls	r2, r3
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	2b40      	cmp	r3, #64	; 0x40
 800554a:	d108      	bne.n	800555e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	60da      	str	r2, [r3, #12]
}
 800555c:	e007      	b.n	800556e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	60da      	str	r2, [r3, #12]
}
 800556e:	bf00      	nop
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	58025408 	.word	0x58025408
 8005580:	5802541c 	.word	0x5802541c
 8005584:	58025430 	.word	0x58025430
 8005588:	58025444 	.word	0x58025444
 800558c:	58025458 	.word	0x58025458
 8005590:	5802546c 	.word	0x5802546c
 8005594:	58025480 	.word	0x58025480
 8005598:	58025494 	.word	0x58025494

0800559c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a42      	ldr	r2, [pc, #264]	; (80056b4 <DMA_CalcBaseAndBitshift+0x118>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d04a      	beq.n	8005644 <DMA_CalcBaseAndBitshift+0xa8>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a41      	ldr	r2, [pc, #260]	; (80056b8 <DMA_CalcBaseAndBitshift+0x11c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d045      	beq.n	8005644 <DMA_CalcBaseAndBitshift+0xa8>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a3f      	ldr	r2, [pc, #252]	; (80056bc <DMA_CalcBaseAndBitshift+0x120>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d040      	beq.n	8005644 <DMA_CalcBaseAndBitshift+0xa8>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a3e      	ldr	r2, [pc, #248]	; (80056c0 <DMA_CalcBaseAndBitshift+0x124>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d03b      	beq.n	8005644 <DMA_CalcBaseAndBitshift+0xa8>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a3c      	ldr	r2, [pc, #240]	; (80056c4 <DMA_CalcBaseAndBitshift+0x128>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d036      	beq.n	8005644 <DMA_CalcBaseAndBitshift+0xa8>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a3b      	ldr	r2, [pc, #236]	; (80056c8 <DMA_CalcBaseAndBitshift+0x12c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d031      	beq.n	8005644 <DMA_CalcBaseAndBitshift+0xa8>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a39      	ldr	r2, [pc, #228]	; (80056cc <DMA_CalcBaseAndBitshift+0x130>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d02c      	beq.n	8005644 <DMA_CalcBaseAndBitshift+0xa8>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a38      	ldr	r2, [pc, #224]	; (80056d0 <DMA_CalcBaseAndBitshift+0x134>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d027      	beq.n	8005644 <DMA_CalcBaseAndBitshift+0xa8>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a36      	ldr	r2, [pc, #216]	; (80056d4 <DMA_CalcBaseAndBitshift+0x138>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d022      	beq.n	8005644 <DMA_CalcBaseAndBitshift+0xa8>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a35      	ldr	r2, [pc, #212]	; (80056d8 <DMA_CalcBaseAndBitshift+0x13c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d01d      	beq.n	8005644 <DMA_CalcBaseAndBitshift+0xa8>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a33      	ldr	r2, [pc, #204]	; (80056dc <DMA_CalcBaseAndBitshift+0x140>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d018      	beq.n	8005644 <DMA_CalcBaseAndBitshift+0xa8>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a32      	ldr	r2, [pc, #200]	; (80056e0 <DMA_CalcBaseAndBitshift+0x144>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d013      	beq.n	8005644 <DMA_CalcBaseAndBitshift+0xa8>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a30      	ldr	r2, [pc, #192]	; (80056e4 <DMA_CalcBaseAndBitshift+0x148>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d00e      	beq.n	8005644 <DMA_CalcBaseAndBitshift+0xa8>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a2f      	ldr	r2, [pc, #188]	; (80056e8 <DMA_CalcBaseAndBitshift+0x14c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d009      	beq.n	8005644 <DMA_CalcBaseAndBitshift+0xa8>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a2d      	ldr	r2, [pc, #180]	; (80056ec <DMA_CalcBaseAndBitshift+0x150>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d004      	beq.n	8005644 <DMA_CalcBaseAndBitshift+0xa8>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a2c      	ldr	r2, [pc, #176]	; (80056f0 <DMA_CalcBaseAndBitshift+0x154>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d101      	bne.n	8005648 <DMA_CalcBaseAndBitshift+0xac>
 8005644:	2301      	movs	r3, #1
 8005646:	e000      	b.n	800564a <DMA_CalcBaseAndBitshift+0xae>
 8005648:	2300      	movs	r3, #0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d024      	beq.n	8005698 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	b2db      	uxtb	r3, r3
 8005654:	3b10      	subs	r3, #16
 8005656:	4a27      	ldr	r2, [pc, #156]	; (80056f4 <DMA_CalcBaseAndBitshift+0x158>)
 8005658:	fba2 2303 	umull	r2, r3, r2, r3
 800565c:	091b      	lsrs	r3, r3, #4
 800565e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	4a24      	ldr	r2, [pc, #144]	; (80056f8 <DMA_CalcBaseAndBitshift+0x15c>)
 8005668:	5cd3      	ldrb	r3, [r2, r3]
 800566a:	461a      	mov	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b03      	cmp	r3, #3
 8005674:	d908      	bls.n	8005688 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	4b1f      	ldr	r3, [pc, #124]	; (80056fc <DMA_CalcBaseAndBitshift+0x160>)
 800567e:	4013      	ands	r3, r2
 8005680:	1d1a      	adds	r2, r3, #4
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	659a      	str	r2, [r3, #88]	; 0x58
 8005686:	e00d      	b.n	80056a4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	461a      	mov	r2, r3
 800568e:	4b1b      	ldr	r3, [pc, #108]	; (80056fc <DMA_CalcBaseAndBitshift+0x160>)
 8005690:	4013      	ands	r3, r2
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	6593      	str	r3, [r2, #88]	; 0x58
 8005696:	e005      	b.n	80056a4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	40020010 	.word	0x40020010
 80056b8:	40020028 	.word	0x40020028
 80056bc:	40020040 	.word	0x40020040
 80056c0:	40020058 	.word	0x40020058
 80056c4:	40020070 	.word	0x40020070
 80056c8:	40020088 	.word	0x40020088
 80056cc:	400200a0 	.word	0x400200a0
 80056d0:	400200b8 	.word	0x400200b8
 80056d4:	40020410 	.word	0x40020410
 80056d8:	40020428 	.word	0x40020428
 80056dc:	40020440 	.word	0x40020440
 80056e0:	40020458 	.word	0x40020458
 80056e4:	40020470 	.word	0x40020470
 80056e8:	40020488 	.word	0x40020488
 80056ec:	400204a0 	.word	0x400204a0
 80056f0:	400204b8 	.word	0x400204b8
 80056f4:	aaaaaaab 	.word	0xaaaaaaab
 80056f8:	0800f28c 	.word	0x0800f28c
 80056fc:	fffffc00 	.word	0xfffffc00

08005700 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005708:	2300      	movs	r3, #0
 800570a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d120      	bne.n	8005756 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005718:	2b03      	cmp	r3, #3
 800571a:	d858      	bhi.n	80057ce <DMA_CheckFifoParam+0xce>
 800571c:	a201      	add	r2, pc, #4	; (adr r2, 8005724 <DMA_CheckFifoParam+0x24>)
 800571e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005722:	bf00      	nop
 8005724:	08005735 	.word	0x08005735
 8005728:	08005747 	.word	0x08005747
 800572c:	08005735 	.word	0x08005735
 8005730:	080057cf 	.word	0x080057cf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d048      	beq.n	80057d2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005744:	e045      	b.n	80057d2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800574e:	d142      	bne.n	80057d6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005754:	e03f      	b.n	80057d6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800575e:	d123      	bne.n	80057a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005764:	2b03      	cmp	r3, #3
 8005766:	d838      	bhi.n	80057da <DMA_CheckFifoParam+0xda>
 8005768:	a201      	add	r2, pc, #4	; (adr r2, 8005770 <DMA_CheckFifoParam+0x70>)
 800576a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576e:	bf00      	nop
 8005770:	08005781 	.word	0x08005781
 8005774:	08005787 	.word	0x08005787
 8005778:	08005781 	.word	0x08005781
 800577c:	08005799 	.word	0x08005799
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	73fb      	strb	r3, [r7, #15]
        break;
 8005784:	e030      	b.n	80057e8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d025      	beq.n	80057de <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005796:	e022      	b.n	80057de <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057a0:	d11f      	bne.n	80057e2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057a6:	e01c      	b.n	80057e2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d902      	bls.n	80057b6 <DMA_CheckFifoParam+0xb6>
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d003      	beq.n	80057bc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80057b4:	e018      	b.n	80057e8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	73fb      	strb	r3, [r7, #15]
        break;
 80057ba:	e015      	b.n	80057e8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00e      	beq.n	80057e6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	73fb      	strb	r3, [r7, #15]
    break;
 80057cc:	e00b      	b.n	80057e6 <DMA_CheckFifoParam+0xe6>
        break;
 80057ce:	bf00      	nop
 80057d0:	e00a      	b.n	80057e8 <DMA_CheckFifoParam+0xe8>
        break;
 80057d2:	bf00      	nop
 80057d4:	e008      	b.n	80057e8 <DMA_CheckFifoParam+0xe8>
        break;
 80057d6:	bf00      	nop
 80057d8:	e006      	b.n	80057e8 <DMA_CheckFifoParam+0xe8>
        break;
 80057da:	bf00      	nop
 80057dc:	e004      	b.n	80057e8 <DMA_CheckFifoParam+0xe8>
        break;
 80057de:	bf00      	nop
 80057e0:	e002      	b.n	80057e8 <DMA_CheckFifoParam+0xe8>
        break;
 80057e2:	bf00      	nop
 80057e4:	e000      	b.n	80057e8 <DMA_CheckFifoParam+0xe8>
    break;
 80057e6:	bf00      	nop
    }
  }

  return status;
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop

080057f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a38      	ldr	r2, [pc, #224]	; (80058ec <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d022      	beq.n	8005856 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a36      	ldr	r2, [pc, #216]	; (80058f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d01d      	beq.n	8005856 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a35      	ldr	r2, [pc, #212]	; (80058f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d018      	beq.n	8005856 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a33      	ldr	r2, [pc, #204]	; (80058f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d013      	beq.n	8005856 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a32      	ldr	r2, [pc, #200]	; (80058fc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00e      	beq.n	8005856 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a30      	ldr	r2, [pc, #192]	; (8005900 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d009      	beq.n	8005856 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a2f      	ldr	r2, [pc, #188]	; (8005904 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d004      	beq.n	8005856 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a2d      	ldr	r2, [pc, #180]	; (8005908 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d101      	bne.n	800585a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005856:	2301      	movs	r3, #1
 8005858:	e000      	b.n	800585c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800585a:	2300      	movs	r3, #0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d01a      	beq.n	8005896 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	b2db      	uxtb	r3, r3
 8005866:	3b08      	subs	r3, #8
 8005868:	4a28      	ldr	r2, [pc, #160]	; (800590c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800586a:	fba2 2303 	umull	r2, r3, r2, r3
 800586e:	091b      	lsrs	r3, r3, #4
 8005870:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4b26      	ldr	r3, [pc, #152]	; (8005910 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005876:	4413      	add	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	461a      	mov	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a24      	ldr	r2, [pc, #144]	; (8005914 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005884:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f003 031f 	and.w	r3, r3, #31
 800588c:	2201      	movs	r2, #1
 800588e:	409a      	lsls	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005894:	e024      	b.n	80058e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	b2db      	uxtb	r3, r3
 800589c:	3b10      	subs	r3, #16
 800589e:	4a1e      	ldr	r2, [pc, #120]	; (8005918 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80058a0:	fba2 2303 	umull	r2, r3, r2, r3
 80058a4:	091b      	lsrs	r3, r3, #4
 80058a6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	4a1c      	ldr	r2, [pc, #112]	; (800591c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d806      	bhi.n	80058be <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	4a1b      	ldr	r2, [pc, #108]	; (8005920 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d902      	bls.n	80058be <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	3308      	adds	r3, #8
 80058bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4b18      	ldr	r3, [pc, #96]	; (8005924 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80058c2:	4413      	add	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	461a      	mov	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a16      	ldr	r2, [pc, #88]	; (8005928 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80058d0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f003 031f 	and.w	r3, r3, #31
 80058d8:	2201      	movs	r2, #1
 80058da:	409a      	lsls	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	669a      	str	r2, [r3, #104]	; 0x68
}
 80058e0:	bf00      	nop
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	58025408 	.word	0x58025408
 80058f0:	5802541c 	.word	0x5802541c
 80058f4:	58025430 	.word	0x58025430
 80058f8:	58025444 	.word	0x58025444
 80058fc:	58025458 	.word	0x58025458
 8005900:	5802546c 	.word	0x5802546c
 8005904:	58025480 	.word	0x58025480
 8005908:	58025494 	.word	0x58025494
 800590c:	cccccccd 	.word	0xcccccccd
 8005910:	16009600 	.word	0x16009600
 8005914:	58025880 	.word	0x58025880
 8005918:	aaaaaaab 	.word	0xaaaaaaab
 800591c:	400204b8 	.word	0x400204b8
 8005920:	4002040f 	.word	0x4002040f
 8005924:	10008200 	.word	0x10008200
 8005928:	40020880 	.word	0x40020880

0800592c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	b2db      	uxtb	r3, r3
 800593a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d04a      	beq.n	80059d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b08      	cmp	r3, #8
 8005946:	d847      	bhi.n	80059d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a25      	ldr	r2, [pc, #148]	; (80059e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d022      	beq.n	8005998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a24      	ldr	r2, [pc, #144]	; (80059e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d01d      	beq.n	8005998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a22      	ldr	r2, [pc, #136]	; (80059ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d018      	beq.n	8005998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a21      	ldr	r2, [pc, #132]	; (80059f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d013      	beq.n	8005998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a1f      	ldr	r2, [pc, #124]	; (80059f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d00e      	beq.n	8005998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a1e      	ldr	r2, [pc, #120]	; (80059f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d009      	beq.n	8005998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a1c      	ldr	r2, [pc, #112]	; (80059fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d004      	beq.n	8005998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a1b      	ldr	r2, [pc, #108]	; (8005a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d101      	bne.n	800599c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005998:	2301      	movs	r3, #1
 800599a:	e000      	b.n	800599e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800599c:	2300      	movs	r3, #0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00a      	beq.n	80059b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	4b17      	ldr	r3, [pc, #92]	; (8005a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80059a6:	4413      	add	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	461a      	mov	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a15      	ldr	r2, [pc, #84]	; (8005a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80059b4:	671a      	str	r2, [r3, #112]	; 0x70
 80059b6:	e009      	b.n	80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4b14      	ldr	r3, [pc, #80]	; (8005a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80059bc:	4413      	add	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	461a      	mov	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a11      	ldr	r2, [pc, #68]	; (8005a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80059ca:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	2201      	movs	r2, #1
 80059d2:	409a      	lsls	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80059d8:	bf00      	nop
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	58025408 	.word	0x58025408
 80059e8:	5802541c 	.word	0x5802541c
 80059ec:	58025430 	.word	0x58025430
 80059f0:	58025444 	.word	0x58025444
 80059f4:	58025458 	.word	0x58025458
 80059f8:	5802546c 	.word	0x5802546c
 80059fc:	58025480 	.word	0x58025480
 8005a00:	58025494 	.word	0x58025494
 8005a04:	1600963f 	.word	0x1600963f
 8005a08:	58025940 	.word	0x58025940
 8005a0c:	1000823f 	.word	0x1000823f
 8005a10:	40020940 	.word	0x40020940

08005a14 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e0cf      	b.n	8005bc6 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d106      	bne.n	8005a3e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2223      	movs	r2, #35	; 0x23
 8005a34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7fb fb0f 	bl	800105c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a3e:	4b64      	ldr	r3, [pc, #400]	; (8005bd0 <HAL_ETH_Init+0x1bc>)
 8005a40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a44:	4a62      	ldr	r2, [pc, #392]	; (8005bd0 <HAL_ETH_Init+0x1bc>)
 8005a46:	f043 0302 	orr.w	r3, r3, #2
 8005a4a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005a4e:	4b60      	ldr	r3, [pc, #384]	; (8005bd0 <HAL_ETH_Init+0x1bc>)
 8005a50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	60bb      	str	r3, [r7, #8]
 8005a5a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	7a1b      	ldrb	r3, [r3, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d103      	bne.n	8005a6c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005a64:	2000      	movs	r0, #0
 8005a66:	f7fc f813 	bl	8001a90 <HAL_SYSCFG_ETHInterfaceSelect>
 8005a6a:	e003      	b.n	8005a74 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005a6c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005a70:	f7fc f80e 	bl	8001a90 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8005a74:	4b57      	ldr	r3, [pc, #348]	; (8005bd4 <HAL_ETH_Init+0x1c0>)
 8005a76:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	6812      	ldr	r2, [r2, #0]
 8005a86:	f043 0301 	orr.w	r3, r3, #1
 8005a8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005a8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a90:	f7fb ffc2 	bl	8001a18 <HAL_GetTick>
 8005a94:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005a96:	e011      	b.n	8005abc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005a98:	f7fb ffbe 	bl	8001a18 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005aa6:	d909      	bls.n	8005abc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2204      	movs	r2, #4
 8005aac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	22e0      	movs	r2, #224	; 0xe0
 8005ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e084      	b.n	8005bc6 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1e4      	bne.n	8005a98 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f886 	bl	8005be0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005ad4:	f001 fee6 	bl	80078a4 <HAL_RCC_GetHCLKFreq>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	4a3f      	ldr	r2, [pc, #252]	; (8005bd8 <HAL_ETH_Init+0x1c4>)
 8005adc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae0:	0c9a      	lsrs	r2, r3, #18
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3a01      	subs	r2, #1
 8005ae8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fa71 	bl	8005fd4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005afa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005afe:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6812      	ldr	r2, [r2, #0]
 8005b06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005b0e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d009      	beq.n	8005b32 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	22e0      	movs	r2, #224	; 0xe0
 8005b2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e049      	b.n	8005bc6 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b3a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005b3e:	4b27      	ldr	r3, [pc, #156]	; (8005bdc <HAL_ETH_Init+0x1c8>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6952      	ldr	r2, [r2, #20]
 8005b46:	0051      	lsls	r1, r2, #1
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6812      	ldr	r2, [r2, #0]
 8005b4c:	430b      	orrs	r3, r1
 8005b4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005b52:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fad9 	bl	800610e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 fb1f 	bl	80061a0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	3305      	adds	r3, #5
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	021a      	lsls	r2, r3, #8
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	3304      	adds	r3, #4
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	4619      	mov	r1, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	3303      	adds	r3, #3
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	061a      	lsls	r2, r3, #24
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	3302      	adds	r3, #2
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	041b      	lsls	r3, r3, #16
 8005b94:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005ba0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005bae:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005bb0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2210      	movs	r2, #16
 8005bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	58024400 	.word	0x58024400
 8005bd4:	58000400 	.word	0x58000400
 8005bd8:	431bde83 	.word	0x431bde83
 8005bdc:	ffff8001 	.word	0xffff8001

08005be0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005bf8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005bfa:	f001 fe53 	bl	80078a4 <HAL_RCC_GetHCLKFreq>
 8005bfe:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	4a1e      	ldr	r2, [pc, #120]	; (8005c7c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d908      	bls.n	8005c1a <HAL_ETH_SetMDIOClockRange+0x3a>
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	4a1d      	ldr	r2, [pc, #116]	; (8005c80 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d804      	bhi.n	8005c1a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	e027      	b.n	8005c6a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	4a18      	ldr	r2, [pc, #96]	; (8005c80 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d908      	bls.n	8005c34 <HAL_ETH_SetMDIOClockRange+0x54>
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	4a17      	ldr	r2, [pc, #92]	; (8005c84 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d204      	bcs.n	8005c34 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005c30:	60fb      	str	r3, [r7, #12]
 8005c32:	e01a      	b.n	8005c6a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4a13      	ldr	r2, [pc, #76]	; (8005c84 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d303      	bcc.n	8005c44 <HAL_ETH_SetMDIOClockRange+0x64>
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	4a12      	ldr	r2, [pc, #72]	; (8005c88 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d911      	bls.n	8005c68 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	4a10      	ldr	r2, [pc, #64]	; (8005c88 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d908      	bls.n	8005c5e <HAL_ETH_SetMDIOClockRange+0x7e>
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	4a0f      	ldr	r2, [pc, #60]	; (8005c8c <HAL_ETH_SetMDIOClockRange+0xac>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d804      	bhi.n	8005c5e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	e005      	b.n	8005c6a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	e000      	b.n	8005c6a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005c68:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005c74:	bf00      	nop
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	01312cff 	.word	0x01312cff
 8005c80:	02160ebf 	.word	0x02160ebf
 8005c84:	03938700 	.word	0x03938700
 8005c88:	05f5e0ff 	.word	0x05f5e0ff
 8005c8c:	08f0d17f 	.word	0x08f0d17f

08005c90 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8005ca2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	791b      	ldrb	r3, [r3, #4]
 8005ca8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005caa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	7b1b      	ldrb	r3, [r3, #12]
 8005cb0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005cb2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	7b5b      	ldrb	r3, [r3, #13]
 8005cb8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005cba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	7b9b      	ldrb	r3, [r3, #14]
 8005cc0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005cc2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	7bdb      	ldrb	r3, [r3, #15]
 8005cc8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005cca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	7c12      	ldrb	r2, [r2, #16]
 8005cd0:	2a00      	cmp	r2, #0
 8005cd2:	d102      	bne.n	8005cda <ETH_SetMACConfig+0x4a>
 8005cd4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005cd8:	e000      	b.n	8005cdc <ETH_SetMACConfig+0x4c>
 8005cda:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005cdc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	7c52      	ldrb	r2, [r2, #17]
 8005ce2:	2a00      	cmp	r2, #0
 8005ce4:	d102      	bne.n	8005cec <ETH_SetMACConfig+0x5c>
 8005ce6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005cea:	e000      	b.n	8005cee <ETH_SetMACConfig+0x5e>
 8005cec:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005cee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	7c9b      	ldrb	r3, [r3, #18]
 8005cf4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005cf6:	431a      	orrs	r2, r3
               macconf->Speed |
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005cfc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8005d02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	7f1b      	ldrb	r3, [r3, #28]
 8005d08:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005d0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	7f5b      	ldrb	r3, [r3, #29]
 8005d10:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005d12:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	7f92      	ldrb	r2, [r2, #30]
 8005d18:	2a00      	cmp	r2, #0
 8005d1a:	d102      	bne.n	8005d22 <ETH_SetMACConfig+0x92>
 8005d1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d20:	e000      	b.n	8005d24 <ETH_SetMACConfig+0x94>
 8005d22:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005d24:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	7fdb      	ldrb	r3, [r3, #31]
 8005d2a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005d2c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005d34:	2a00      	cmp	r2, #0
 8005d36:	d102      	bne.n	8005d3e <ETH_SetMACConfig+0xae>
 8005d38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d3c:	e000      	b.n	8005d40 <ETH_SetMACConfig+0xb0>
 8005d3e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005d40:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005d46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d4e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005d50:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	4b56      	ldr	r3, [pc, #344]	; (8005ebc <ETH_SetMACConfig+0x22c>)
 8005d62:	4013      	ands	r3, r2
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6812      	ldr	r2, [r2, #0]
 8005d68:	68f9      	ldr	r1, [r7, #12]
 8005d6a:	430b      	orrs	r3, r1
 8005d6c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d72:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d7a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005d7c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d84:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005d86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005d8e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005d90:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005d98:	2a00      	cmp	r2, #0
 8005d9a:	d102      	bne.n	8005da2 <ETH_SetMACConfig+0x112>
 8005d9c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005da0:	e000      	b.n	8005da4 <ETH_SetMACConfig+0x114>
 8005da2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005da4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	4b42      	ldr	r3, [pc, #264]	; (8005ec0 <ETH_SetMACConfig+0x230>)
 8005db6:	4013      	ands	r3, r2
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6812      	ldr	r2, [r2, #0]
 8005dbc:	68f9      	ldr	r1, [r7, #12]
 8005dbe:	430b      	orrs	r3, r1
 8005dc0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dc8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	4b3a      	ldr	r3, [pc, #232]	; (8005ec4 <ETH_SetMACConfig+0x234>)
 8005dda:	4013      	ands	r3, r2
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6812      	ldr	r2, [r2, #0]
 8005de0:	68f9      	ldr	r1, [r7, #12]
 8005de2:	430b      	orrs	r3, r1
 8005de4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005dec:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005df2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005dfa:	2a00      	cmp	r2, #0
 8005dfc:	d101      	bne.n	8005e02 <ETH_SetMACConfig+0x172>
 8005dfe:	2280      	movs	r2, #128	; 0x80
 8005e00:	e000      	b.n	8005e04 <ETH_SetMACConfig+0x174>
 8005e02:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005e04:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e0a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e16:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6812      	ldr	r2, [r2, #0]
 8005e20:	68f9      	ldr	r1, [r7, #12]
 8005e22:	430b      	orrs	r3, r1
 8005e24:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005e2c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005e34:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e42:	f023 0103 	bic.w	r1, r3, #3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005e5a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005e76:	2a00      	cmp	r2, #0
 8005e78:	d101      	bne.n	8005e7e <ETH_SetMACConfig+0x1ee>
 8005e7a:	2240      	movs	r2, #64	; 0x40
 8005e7c:	e000      	b.n	8005e80 <ETH_SetMACConfig+0x1f0>
 8005e7e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005e80:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005e88:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005e8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005e92:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005ea0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005eb0:	bf00      	nop
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	00048083 	.word	0x00048083
 8005ec0:	c0f88000 	.word	0xc0f88000
 8005ec4:	fffffef0 	.word	0xfffffef0

08005ec8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	4b38      	ldr	r3, [pc, #224]	; (8005fc0 <ETH_SetDMAConfig+0xf8>)
 8005ede:	4013      	ands	r3, r2
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	6811      	ldr	r1, [r2, #0]
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	6812      	ldr	r2, [r2, #0]
 8005ee8:	430b      	orrs	r3, r1
 8005eea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005eee:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	791b      	ldrb	r3, [r3, #4]
 8005ef4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005efa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	7b1b      	ldrb	r3, [r3, #12]
 8005f00:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	4b2c      	ldr	r3, [pc, #176]	; (8005fc4 <ETH_SetDMAConfig+0xfc>)
 8005f12:	4013      	ands	r3, r2
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6812      	ldr	r2, [r2, #0]
 8005f18:	68f9      	ldr	r1, [r7, #12]
 8005f1a:	430b      	orrs	r3, r1
 8005f1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005f20:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	7b5b      	ldrb	r3, [r3, #13]
 8005f26:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f38:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005f3c:	4b22      	ldr	r3, [pc, #136]	; (8005fc8 <ETH_SetDMAConfig+0x100>)
 8005f3e:	4013      	ands	r3, r2
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	68f9      	ldr	r1, [r7, #12]
 8005f46:	430b      	orrs	r3, r1
 8005f48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005f4c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	7d1b      	ldrb	r3, [r3, #20]
 8005f58:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005f5a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	7f5b      	ldrb	r3, [r3, #29]
 8005f60:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005f62:	4313      	orrs	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f6e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8005f72:	4b16      	ldr	r3, [pc, #88]	; (8005fcc <ETH_SetDMAConfig+0x104>)
 8005f74:	4013      	ands	r3, r2
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	6812      	ldr	r2, [r2, #0]
 8005f7a:	68f9      	ldr	r1, [r7, #12]
 8005f7c:	430b      	orrs	r3, r1
 8005f7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005f82:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	7f1b      	ldrb	r3, [r3, #28]
 8005f8a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f9c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005fa0:	4b0b      	ldr	r3, [pc, #44]	; (8005fd0 <ETH_SetDMAConfig+0x108>)
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	6812      	ldr	r2, [r2, #0]
 8005fa8:	68f9      	ldr	r1, [r7, #12]
 8005faa:	430b      	orrs	r3, r1
 8005fac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005fb0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005fb4:	bf00      	nop
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	ffff87fd 	.word	0xffff87fd
 8005fc4:	ffff2ffe 	.word	0xffff2ffe
 8005fc8:	fffec000 	.word	0xfffec000
 8005fcc:	ffc0efef 	.word	0xffc0efef
 8005fd0:	7fc0ffff 	.word	0x7fc0ffff

08005fd4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b0a4      	sub	sp, #144	; 0x90
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005fec:	2300      	movs	r3, #0
 8005fee:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005ffe:	2301      	movs	r3, #1
 8006000:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8006004:	2300      	movs	r3, #0
 8006006:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800600a:	2301      	movs	r3, #1
 800600c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006014:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8006016:	2300      	movs	r3, #0
 8006018:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800601c:	2300      	movs	r3, #0
 800601e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8006020:	2300      	movs	r3, #0
 8006022:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8006026:	2300      	movs	r3, #0
 8006028:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800602c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8006030:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8006032:	2300      	movs	r3, #0
 8006034:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006038:	2300      	movs	r3, #0
 800603a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800603c:	2301      	movs	r3, #1
 800603e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8006042:	2300      	movs	r3, #0
 8006044:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006048:	2300      	movs	r3, #0
 800604a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800604e:	2300      	movs	r3, #0
 8006050:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8006052:	2300      	movs	r3, #0
 8006054:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8006056:	2300      	movs	r3, #0
 8006058:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800605a:	2300      	movs	r3, #0
 800605c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006060:	2300      	movs	r3, #0
 8006062:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8006066:	2301      	movs	r3, #1
 8006068:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800606c:	2320      	movs	r3, #32
 800606e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8006072:	2301      	movs	r3, #1
 8006074:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006078:	2300      	movs	r3, #0
 800607a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800607e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006082:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006084:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006088:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800608a:	2300      	movs	r3, #0
 800608c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8006090:	2302      	movs	r3, #2
 8006092:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006096:	2300      	movs	r3, #0
 8006098:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800609c:	2300      	movs	r3, #0
 800609e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80060a2:	2300      	movs	r3, #0
 80060a4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80060a8:	2301      	movs	r3, #1
 80060aa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80060ae:	2300      	movs	r3, #0
 80060b0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80060b2:	2301      	movs	r3, #1
 80060b4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80060b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060bc:	4619      	mov	r1, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff fde6 	bl	8005c90 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80060c4:	2301      	movs	r3, #1
 80060c6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80060c8:	2301      	movs	r3, #1
 80060ca:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80060cc:	2300      	movs	r3, #0
 80060ce:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80060d0:	2300      	movs	r3, #0
 80060d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80060d6:	2300      	movs	r3, #0
 80060d8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80060da:	2300      	movs	r3, #0
 80060dc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80060de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80060e2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80060e4:	2300      	movs	r3, #0
 80060e6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80060e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80060ec:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80060ee:	2300      	movs	r3, #0
 80060f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80060f4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80060f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80060fa:	f107 0308 	add.w	r3, r7, #8
 80060fe:	4619      	mov	r1, r3
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7ff fee1 	bl	8005ec8 <ETH_SetDMAConfig>
}
 8006106:	bf00      	nop
 8006108:	3790      	adds	r7, #144	; 0x90
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800610e:	b480      	push	{r7}
 8006110:	b085      	sub	sp, #20
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006116:	2300      	movs	r3, #0
 8006118:	60fb      	str	r3, [r7, #12]
 800611a:	e01d      	b.n	8006158 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68d9      	ldr	r1, [r3, #12]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4613      	mov	r3, r2
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	4413      	add	r3, r2
 8006128:	00db      	lsls	r3, r3, #3
 800612a:	440b      	add	r3, r1
 800612c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2200      	movs	r2, #0
 8006132:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2200      	movs	r2, #0
 8006138:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2200      	movs	r2, #0
 800613e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2200      	movs	r2, #0
 8006144:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006146:	68b9      	ldr	r1, [r7, #8]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	3206      	adds	r2, #6
 800614e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3301      	adds	r3, #1
 8006156:	60fb      	str	r3, [r7, #12]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2b03      	cmp	r3, #3
 800615c:	d9de      	bls.n	800611c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800616c:	461a      	mov	r2, r3
 800616e:	2303      	movs	r3, #3
 8006170:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68da      	ldr	r2, [r3, #12]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006180:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68da      	ldr	r2, [r3, #12]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006190:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8006194:	bf00      	nop
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80061a8:	2300      	movs	r3, #0
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	e023      	b.n	80061f6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6919      	ldr	r1, [r3, #16]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	4613      	mov	r3, r2
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	4413      	add	r3, r2
 80061ba:	00db      	lsls	r3, r3, #3
 80061bc:	440b      	add	r3, r1
 80061be:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2200      	movs	r2, #0
 80061ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2200      	movs	r2, #0
 80061d0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2200      	movs	r2, #0
 80061d6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2200      	movs	r2, #0
 80061dc:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2200      	movs	r2, #0
 80061e2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80061e4:	68b9      	ldr	r1, [r7, #8]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	3212      	adds	r2, #18
 80061ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	3301      	adds	r3, #1
 80061f4:	60fb      	str	r3, [r7, #12]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b03      	cmp	r3, #3
 80061fa:	d9d8      	bls.n	80061ae <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006222:	461a      	mov	r2, r3
 8006224:	2303      	movs	r3, #3
 8006226:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	691a      	ldr	r2, [r3, #16]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006236:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800624a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800624e:	bf00      	nop
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
	...

0800625c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800625c:	b480      	push	{r7}
 800625e:	b089      	sub	sp, #36	; 0x24
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006266:	2300      	movs	r3, #0
 8006268:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800626a:	4b89      	ldr	r3, [pc, #548]	; (8006490 <HAL_GPIO_Init+0x234>)
 800626c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800626e:	e194      	b.n	800659a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	2101      	movs	r1, #1
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	fa01 f303 	lsl.w	r3, r1, r3
 800627c:	4013      	ands	r3, r2
 800627e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 8186 	beq.w	8006594 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f003 0303 	and.w	r3, r3, #3
 8006290:	2b01      	cmp	r3, #1
 8006292:	d005      	beq.n	80062a0 <HAL_GPIO_Init+0x44>
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f003 0303 	and.w	r3, r3, #3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d130      	bne.n	8006302 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	2203      	movs	r2, #3
 80062ac:	fa02 f303 	lsl.w	r3, r2, r3
 80062b0:	43db      	mvns	r3, r3
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	4013      	ands	r3, r2
 80062b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	fa02 f303 	lsl.w	r3, r2, r3
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80062d6:	2201      	movs	r2, #1
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	fa02 f303 	lsl.w	r3, r2, r3
 80062de:	43db      	mvns	r3, r3
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	4013      	ands	r3, r2
 80062e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	091b      	lsrs	r3, r3, #4
 80062ec:	f003 0201 	and.w	r2, r3, #1
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	fa02 f303 	lsl.w	r3, r2, r3
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	69ba      	ldr	r2, [r7, #24]
 8006300:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f003 0303 	and.w	r3, r3, #3
 800630a:	2b03      	cmp	r3, #3
 800630c:	d017      	beq.n	800633e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	2203      	movs	r2, #3
 800631a:	fa02 f303 	lsl.w	r3, r2, r3
 800631e:	43db      	mvns	r3, r3
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	4013      	ands	r3, r2
 8006324:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	689a      	ldr	r2, [r3, #8]
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	005b      	lsls	r3, r3, #1
 800632e:	fa02 f303 	lsl.w	r3, r2, r3
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	4313      	orrs	r3, r2
 8006336:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	69ba      	ldr	r2, [r7, #24]
 800633c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f003 0303 	and.w	r3, r3, #3
 8006346:	2b02      	cmp	r3, #2
 8006348:	d123      	bne.n	8006392 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	08da      	lsrs	r2, r3, #3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	3208      	adds	r2, #8
 8006352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	f003 0307 	and.w	r3, r3, #7
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	220f      	movs	r2, #15
 8006362:	fa02 f303 	lsl.w	r3, r2, r3
 8006366:	43db      	mvns	r3, r3
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	4013      	ands	r3, r2
 800636c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	691a      	ldr	r2, [r3, #16]
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	f003 0307 	and.w	r3, r3, #7
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	fa02 f303 	lsl.w	r3, r2, r3
 800637e:	69ba      	ldr	r2, [r7, #24]
 8006380:	4313      	orrs	r3, r2
 8006382:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	08da      	lsrs	r2, r3, #3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3208      	adds	r2, #8
 800638c:	69b9      	ldr	r1, [r7, #24]
 800638e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	2203      	movs	r2, #3
 800639e:	fa02 f303 	lsl.w	r3, r2, r3
 80063a2:	43db      	mvns	r3, r3
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	4013      	ands	r3, r2
 80063a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f003 0203 	and.w	r2, r3, #3
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ba:	69ba      	ldr	r2, [r7, #24]
 80063bc:	4313      	orrs	r3, r2
 80063be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f000 80e0 	beq.w	8006594 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063d4:	4b2f      	ldr	r3, [pc, #188]	; (8006494 <HAL_GPIO_Init+0x238>)
 80063d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80063da:	4a2e      	ldr	r2, [pc, #184]	; (8006494 <HAL_GPIO_Init+0x238>)
 80063dc:	f043 0302 	orr.w	r3, r3, #2
 80063e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80063e4:	4b2b      	ldr	r3, [pc, #172]	; (8006494 <HAL_GPIO_Init+0x238>)
 80063e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	60fb      	str	r3, [r7, #12]
 80063f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063f2:	4a29      	ldr	r2, [pc, #164]	; (8006498 <HAL_GPIO_Init+0x23c>)
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	089b      	lsrs	r3, r3, #2
 80063f8:	3302      	adds	r3, #2
 80063fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	220f      	movs	r2, #15
 800640a:	fa02 f303 	lsl.w	r3, r2, r3
 800640e:	43db      	mvns	r3, r3
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	4013      	ands	r3, r2
 8006414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a20      	ldr	r2, [pc, #128]	; (800649c <HAL_GPIO_Init+0x240>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d052      	beq.n	80064c4 <HAL_GPIO_Init+0x268>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a1f      	ldr	r2, [pc, #124]	; (80064a0 <HAL_GPIO_Init+0x244>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d031      	beq.n	800648a <HAL_GPIO_Init+0x22e>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a1e      	ldr	r2, [pc, #120]	; (80064a4 <HAL_GPIO_Init+0x248>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d02b      	beq.n	8006486 <HAL_GPIO_Init+0x22a>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a1d      	ldr	r2, [pc, #116]	; (80064a8 <HAL_GPIO_Init+0x24c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d025      	beq.n	8006482 <HAL_GPIO_Init+0x226>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a1c      	ldr	r2, [pc, #112]	; (80064ac <HAL_GPIO_Init+0x250>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d01f      	beq.n	800647e <HAL_GPIO_Init+0x222>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a1b      	ldr	r2, [pc, #108]	; (80064b0 <HAL_GPIO_Init+0x254>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d019      	beq.n	800647a <HAL_GPIO_Init+0x21e>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a1a      	ldr	r2, [pc, #104]	; (80064b4 <HAL_GPIO_Init+0x258>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d013      	beq.n	8006476 <HAL_GPIO_Init+0x21a>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a19      	ldr	r2, [pc, #100]	; (80064b8 <HAL_GPIO_Init+0x25c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d00d      	beq.n	8006472 <HAL_GPIO_Init+0x216>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a18      	ldr	r2, [pc, #96]	; (80064bc <HAL_GPIO_Init+0x260>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d007      	beq.n	800646e <HAL_GPIO_Init+0x212>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a17      	ldr	r2, [pc, #92]	; (80064c0 <HAL_GPIO_Init+0x264>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d101      	bne.n	800646a <HAL_GPIO_Init+0x20e>
 8006466:	2309      	movs	r3, #9
 8006468:	e02d      	b.n	80064c6 <HAL_GPIO_Init+0x26a>
 800646a:	230a      	movs	r3, #10
 800646c:	e02b      	b.n	80064c6 <HAL_GPIO_Init+0x26a>
 800646e:	2308      	movs	r3, #8
 8006470:	e029      	b.n	80064c6 <HAL_GPIO_Init+0x26a>
 8006472:	2307      	movs	r3, #7
 8006474:	e027      	b.n	80064c6 <HAL_GPIO_Init+0x26a>
 8006476:	2306      	movs	r3, #6
 8006478:	e025      	b.n	80064c6 <HAL_GPIO_Init+0x26a>
 800647a:	2305      	movs	r3, #5
 800647c:	e023      	b.n	80064c6 <HAL_GPIO_Init+0x26a>
 800647e:	2304      	movs	r3, #4
 8006480:	e021      	b.n	80064c6 <HAL_GPIO_Init+0x26a>
 8006482:	2303      	movs	r3, #3
 8006484:	e01f      	b.n	80064c6 <HAL_GPIO_Init+0x26a>
 8006486:	2302      	movs	r3, #2
 8006488:	e01d      	b.n	80064c6 <HAL_GPIO_Init+0x26a>
 800648a:	2301      	movs	r3, #1
 800648c:	e01b      	b.n	80064c6 <HAL_GPIO_Init+0x26a>
 800648e:	bf00      	nop
 8006490:	58000080 	.word	0x58000080
 8006494:	58024400 	.word	0x58024400
 8006498:	58000400 	.word	0x58000400
 800649c:	58020000 	.word	0x58020000
 80064a0:	58020400 	.word	0x58020400
 80064a4:	58020800 	.word	0x58020800
 80064a8:	58020c00 	.word	0x58020c00
 80064ac:	58021000 	.word	0x58021000
 80064b0:	58021400 	.word	0x58021400
 80064b4:	58021800 	.word	0x58021800
 80064b8:	58021c00 	.word	0x58021c00
 80064bc:	58022000 	.word	0x58022000
 80064c0:	58022400 	.word	0x58022400
 80064c4:	2300      	movs	r3, #0
 80064c6:	69fa      	ldr	r2, [r7, #28]
 80064c8:	f002 0203 	and.w	r2, r2, #3
 80064cc:	0092      	lsls	r2, r2, #2
 80064ce:	4093      	lsls	r3, r2
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80064d6:	4938      	ldr	r1, [pc, #224]	; (80065b8 <HAL_GPIO_Init+0x35c>)
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	089b      	lsrs	r3, r3, #2
 80064dc:	3302      	adds	r3, #2
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80064e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	43db      	mvns	r3, r3
 80064f0:	69ba      	ldr	r2, [r7, #24]
 80064f2:	4013      	ands	r3, r2
 80064f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	4313      	orrs	r3, r2
 8006508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800650a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	43db      	mvns	r3, r3
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	4013      	ands	r3, r2
 8006522:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d003      	beq.n	8006538 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	4313      	orrs	r3, r2
 8006536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006538:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	43db      	mvns	r3, r3
 800654a:	69ba      	ldr	r2, [r7, #24]
 800654c:	4013      	ands	r3, r2
 800654e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d003      	beq.n	8006564 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	4313      	orrs	r3, r2
 8006562:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	43db      	mvns	r3, r3
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	4013      	ands	r3, r2
 8006578:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	4313      	orrs	r3, r2
 800658c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	69ba      	ldr	r2, [r7, #24]
 8006592:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	3301      	adds	r3, #1
 8006598:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	fa22 f303 	lsr.w	r3, r2, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f47f ae63 	bne.w	8006270 <HAL_GPIO_Init+0x14>
  }
}
 80065aa:	bf00      	nop
 80065ac:	bf00      	nop
 80065ae:	3724      	adds	r7, #36	; 0x24
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	58000400 	.word	0x58000400

080065bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	807b      	strh	r3, [r7, #2]
 80065c8:	4613      	mov	r3, r2
 80065ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80065cc:	787b      	ldrb	r3, [r7, #1]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065d2:	887a      	ldrh	r2, [r7, #2]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80065d8:	e003      	b.n	80065e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80065da:	887b      	ldrh	r3, [r7, #2]
 80065dc:	041a      	lsls	r2, r3, #16
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	619a      	str	r2, [r3, #24]
}
 80065e2:	bf00      	nop
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b085      	sub	sp, #20
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	460b      	mov	r3, r1
 80065f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006600:	887a      	ldrh	r2, [r7, #2]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	4013      	ands	r3, r2
 8006606:	041a      	lsls	r2, r3, #16
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	43d9      	mvns	r1, r3
 800660c:	887b      	ldrh	r3, [r7, #2]
 800660e:	400b      	ands	r3, r1
 8006610:	431a      	orrs	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	619a      	str	r2, [r3, #24]
}
 8006616:	bf00      	nop
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b082      	sub	sp, #8
 8006626:	af00      	add	r7, sp, #0
 8006628:	4603      	mov	r3, r0
 800662a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800662c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006630:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006634:	88fb      	ldrh	r3, [r7, #6]
 8006636:	4013      	ands	r3, r2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d008      	beq.n	800664e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800663c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006640:	88fb      	ldrh	r3, [r7, #6]
 8006642:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006646:	88fb      	ldrh	r3, [r7, #6]
 8006648:	4618      	mov	r0, r3
 800664a:	f000 f804 	bl	8006656 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800664e:	bf00      	nop
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	4603      	mov	r3, r0
 800665e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800666c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800666e:	b08f      	sub	sp, #60	; 0x3c
 8006670:	af0a      	add	r7, sp, #40	; 0x28
 8006672:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e116      	b.n	80068ac <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	d106      	bne.n	800669e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7fa fe3f 	bl	800131c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2203      	movs	r2, #3
 80066a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d102      	bne.n	80066b8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4618      	mov	r0, r3
 80066be:	f005 fd1b 	bl	800c0f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	603b      	str	r3, [r7, #0]
 80066c8:	687e      	ldr	r6, [r7, #4]
 80066ca:	466d      	mov	r5, sp
 80066cc:	f106 0410 	add.w	r4, r6, #16
 80066d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80066dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80066e0:	1d33      	adds	r3, r6, #4
 80066e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066e4:	6838      	ldr	r0, [r7, #0]
 80066e6:	f005 fc99 	bl	800c01c <USB_CoreInit>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d005      	beq.n	80066fc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e0d7      	b.n	80068ac <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2100      	movs	r1, #0
 8006702:	4618      	mov	r0, r3
 8006704:	f005 fd09 	bl	800c11a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006708:	2300      	movs	r3, #0
 800670a:	73fb      	strb	r3, [r7, #15]
 800670c:	e04a      	b.n	80067a4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800670e:	7bfa      	ldrb	r2, [r7, #15]
 8006710:	6879      	ldr	r1, [r7, #4]
 8006712:	4613      	mov	r3, r2
 8006714:	00db      	lsls	r3, r3, #3
 8006716:	4413      	add	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	440b      	add	r3, r1
 800671c:	333d      	adds	r3, #61	; 0x3d
 800671e:	2201      	movs	r2, #1
 8006720:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006722:	7bfa      	ldrb	r2, [r7, #15]
 8006724:	6879      	ldr	r1, [r7, #4]
 8006726:	4613      	mov	r3, r2
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	4413      	add	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	440b      	add	r3, r1
 8006730:	333c      	adds	r3, #60	; 0x3c
 8006732:	7bfa      	ldrb	r2, [r7, #15]
 8006734:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006736:	7bfa      	ldrb	r2, [r7, #15]
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	b298      	uxth	r0, r3
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	4613      	mov	r3, r2
 8006740:	00db      	lsls	r3, r3, #3
 8006742:	4413      	add	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	440b      	add	r3, r1
 8006748:	3356      	adds	r3, #86	; 0x56
 800674a:	4602      	mov	r2, r0
 800674c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800674e:	7bfa      	ldrb	r2, [r7, #15]
 8006750:	6879      	ldr	r1, [r7, #4]
 8006752:	4613      	mov	r3, r2
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	4413      	add	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	440b      	add	r3, r1
 800675c:	3340      	adds	r3, #64	; 0x40
 800675e:	2200      	movs	r2, #0
 8006760:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006762:	7bfa      	ldrb	r2, [r7, #15]
 8006764:	6879      	ldr	r1, [r7, #4]
 8006766:	4613      	mov	r3, r2
 8006768:	00db      	lsls	r3, r3, #3
 800676a:	4413      	add	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	440b      	add	r3, r1
 8006770:	3344      	adds	r3, #68	; 0x44
 8006772:	2200      	movs	r2, #0
 8006774:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006776:	7bfa      	ldrb	r2, [r7, #15]
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	4613      	mov	r3, r2
 800677c:	00db      	lsls	r3, r3, #3
 800677e:	4413      	add	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	440b      	add	r3, r1
 8006784:	3348      	adds	r3, #72	; 0x48
 8006786:	2200      	movs	r2, #0
 8006788:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800678a:	7bfa      	ldrb	r2, [r7, #15]
 800678c:	6879      	ldr	r1, [r7, #4]
 800678e:	4613      	mov	r3, r2
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	4413      	add	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	440b      	add	r3, r1
 8006798:	334c      	adds	r3, #76	; 0x4c
 800679a:	2200      	movs	r2, #0
 800679c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800679e:	7bfb      	ldrb	r3, [r7, #15]
 80067a0:	3301      	adds	r3, #1
 80067a2:	73fb      	strb	r3, [r7, #15]
 80067a4:	7bfa      	ldrb	r2, [r7, #15]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d3af      	bcc.n	800670e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067ae:	2300      	movs	r3, #0
 80067b0:	73fb      	strb	r3, [r7, #15]
 80067b2:	e044      	b.n	800683e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80067b4:	7bfa      	ldrb	r2, [r7, #15]
 80067b6:	6879      	ldr	r1, [r7, #4]
 80067b8:	4613      	mov	r3, r2
 80067ba:	00db      	lsls	r3, r3, #3
 80067bc:	4413      	add	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	440b      	add	r3, r1
 80067c2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80067c6:	2200      	movs	r2, #0
 80067c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80067ca:	7bfa      	ldrb	r2, [r7, #15]
 80067cc:	6879      	ldr	r1, [r7, #4]
 80067ce:	4613      	mov	r3, r2
 80067d0:	00db      	lsls	r3, r3, #3
 80067d2:	4413      	add	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	440b      	add	r3, r1
 80067d8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80067dc:	7bfa      	ldrb	r2, [r7, #15]
 80067de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80067e0:	7bfa      	ldrb	r2, [r7, #15]
 80067e2:	6879      	ldr	r1, [r7, #4]
 80067e4:	4613      	mov	r3, r2
 80067e6:	00db      	lsls	r3, r3, #3
 80067e8:	4413      	add	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	440b      	add	r3, r1
 80067ee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80067f2:	2200      	movs	r2, #0
 80067f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80067f6:	7bfa      	ldrb	r2, [r7, #15]
 80067f8:	6879      	ldr	r1, [r7, #4]
 80067fa:	4613      	mov	r3, r2
 80067fc:	00db      	lsls	r3, r3, #3
 80067fe:	4413      	add	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	440b      	add	r3, r1
 8006804:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006808:	2200      	movs	r2, #0
 800680a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800680c:	7bfa      	ldrb	r2, [r7, #15]
 800680e:	6879      	ldr	r1, [r7, #4]
 8006810:	4613      	mov	r3, r2
 8006812:	00db      	lsls	r3, r3, #3
 8006814:	4413      	add	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	440b      	add	r3, r1
 800681a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800681e:	2200      	movs	r2, #0
 8006820:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006822:	7bfa      	ldrb	r2, [r7, #15]
 8006824:	6879      	ldr	r1, [r7, #4]
 8006826:	4613      	mov	r3, r2
 8006828:	00db      	lsls	r3, r3, #3
 800682a:	4413      	add	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	440b      	add	r3, r1
 8006830:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006834:	2200      	movs	r2, #0
 8006836:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006838:	7bfb      	ldrb	r3, [r7, #15]
 800683a:	3301      	adds	r3, #1
 800683c:	73fb      	strb	r3, [r7, #15]
 800683e:	7bfa      	ldrb	r2, [r7, #15]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	429a      	cmp	r2, r3
 8006846:	d3b5      	bcc.n	80067b4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	603b      	str	r3, [r7, #0]
 800684e:	687e      	ldr	r6, [r7, #4]
 8006850:	466d      	mov	r5, sp
 8006852:	f106 0410 	add.w	r4, r6, #16
 8006856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800685a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800685c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800685e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006862:	e885 0003 	stmia.w	r5, {r0, r1}
 8006866:	1d33      	adds	r3, r6, #4
 8006868:	cb0e      	ldmia	r3, {r1, r2, r3}
 800686a:	6838      	ldr	r0, [r7, #0]
 800686c:	f005 fca2 	bl	800c1b4 <USB_DevInit>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d005      	beq.n	8006882 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2202      	movs	r2, #2
 800687a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e014      	b.n	80068ac <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006896:	2b01      	cmp	r3, #1
 8006898:	d102      	bne.n	80068a0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f80a 	bl	80068b4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4618      	mov	r0, r3
 80068a6:	f005 fe60 	bl	800c56a <USB_DevDisconnect>

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080068b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068e2:	4b05      	ldr	r3, [pc, #20]	; (80068f8 <HAL_PCDEx_ActivateLPM+0x44>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	10000003 	.word	0x10000003

080068fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006904:	4b19      	ldr	r3, [pc, #100]	; (800696c <HAL_PWREx_ConfigSupply+0x70>)
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f003 0304 	and.w	r3, r3, #4
 800690c:	2b04      	cmp	r3, #4
 800690e:	d00a      	beq.n	8006926 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006910:	4b16      	ldr	r3, [pc, #88]	; (800696c <HAL_PWREx_ConfigSupply+0x70>)
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f003 0307 	and.w	r3, r3, #7
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	429a      	cmp	r2, r3
 800691c:	d001      	beq.n	8006922 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e01f      	b.n	8006962 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	e01d      	b.n	8006962 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006926:	4b11      	ldr	r3, [pc, #68]	; (800696c <HAL_PWREx_ConfigSupply+0x70>)
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	f023 0207 	bic.w	r2, r3, #7
 800692e:	490f      	ldr	r1, [pc, #60]	; (800696c <HAL_PWREx_ConfigSupply+0x70>)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4313      	orrs	r3, r2
 8006934:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006936:	f7fb f86f 	bl	8001a18 <HAL_GetTick>
 800693a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800693c:	e009      	b.n	8006952 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800693e:	f7fb f86b 	bl	8001a18 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800694c:	d901      	bls.n	8006952 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e007      	b.n	8006962 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006952:	4b06      	ldr	r3, [pc, #24]	; (800696c <HAL_PWREx_ConfigSupply+0x70>)
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800695a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800695e:	d1ee      	bne.n	800693e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	58024800 	.word	0x58024800

08006970 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006970:	b480      	push	{r7}
 8006972:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006974:	4b05      	ldr	r3, [pc, #20]	; (800698c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	4a04      	ldr	r2, [pc, #16]	; (800698c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800697a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800697e:	60d3      	str	r3, [r2, #12]
}
 8006980:	bf00      	nop
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	58024800 	.word	0x58024800

08006990 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b08c      	sub	sp, #48	; 0x30
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d102      	bne.n	80069a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	f000 bc48 	b.w	8007234 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 8088 	beq.w	8006ac2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069b2:	4b99      	ldr	r3, [pc, #612]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069bc:	4b96      	ldr	r3, [pc, #600]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 80069be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80069c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c4:	2b10      	cmp	r3, #16
 80069c6:	d007      	beq.n	80069d8 <HAL_RCC_OscConfig+0x48>
 80069c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ca:	2b18      	cmp	r3, #24
 80069cc:	d111      	bne.n	80069f2 <HAL_RCC_OscConfig+0x62>
 80069ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d0:	f003 0303 	and.w	r3, r3, #3
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d10c      	bne.n	80069f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069d8:	4b8f      	ldr	r3, [pc, #572]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d06d      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x130>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d169      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	f000 bc21 	b.w	8007234 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069fa:	d106      	bne.n	8006a0a <HAL_RCC_OscConfig+0x7a>
 80069fc:	4b86      	ldr	r3, [pc, #536]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a85      	ldr	r2, [pc, #532]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a06:	6013      	str	r3, [r2, #0]
 8006a08:	e02e      	b.n	8006a68 <HAL_RCC_OscConfig+0xd8>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10c      	bne.n	8006a2c <HAL_RCC_OscConfig+0x9c>
 8006a12:	4b81      	ldr	r3, [pc, #516]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a80      	ldr	r2, [pc, #512]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a1c:	6013      	str	r3, [r2, #0]
 8006a1e:	4b7e      	ldr	r3, [pc, #504]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a7d      	ldr	r2, [pc, #500]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006a24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a28:	6013      	str	r3, [r2, #0]
 8006a2a:	e01d      	b.n	8006a68 <HAL_RCC_OscConfig+0xd8>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a34:	d10c      	bne.n	8006a50 <HAL_RCC_OscConfig+0xc0>
 8006a36:	4b78      	ldr	r3, [pc, #480]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a77      	ldr	r2, [pc, #476]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a40:	6013      	str	r3, [r2, #0]
 8006a42:	4b75      	ldr	r3, [pc, #468]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a74      	ldr	r2, [pc, #464]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	e00b      	b.n	8006a68 <HAL_RCC_OscConfig+0xd8>
 8006a50:	4b71      	ldr	r3, [pc, #452]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a70      	ldr	r2, [pc, #448]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a5a:	6013      	str	r3, [r2, #0]
 8006a5c:	4b6e      	ldr	r3, [pc, #440]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a6d      	ldr	r2, [pc, #436]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d013      	beq.n	8006a98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a70:	f7fa ffd2 	bl	8001a18 <HAL_GetTick>
 8006a74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a76:	e008      	b.n	8006a8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a78:	f7fa ffce 	bl	8001a18 <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	2b64      	cmp	r3, #100	; 0x64
 8006a84:	d901      	bls.n	8006a8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e3d4      	b.n	8007234 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a8a:	4b63      	ldr	r3, [pc, #396]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d0f0      	beq.n	8006a78 <HAL_RCC_OscConfig+0xe8>
 8006a96:	e014      	b.n	8006ac2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a98:	f7fa ffbe 	bl	8001a18 <HAL_GetTick>
 8006a9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006aa0:	f7fa ffba 	bl	8001a18 <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b64      	cmp	r3, #100	; 0x64
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e3c0      	b.n	8007234 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ab2:	4b59      	ldr	r3, [pc, #356]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1f0      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x110>
 8006abe:	e000      	b.n	8006ac2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 80ca 	beq.w	8006c64 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ad0:	4b51      	ldr	r3, [pc, #324]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ad8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ada:	4b4f      	ldr	r3, [pc, #316]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ade:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006ae0:	6a3b      	ldr	r3, [r7, #32]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d007      	beq.n	8006af6 <HAL_RCC_OscConfig+0x166>
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	2b18      	cmp	r3, #24
 8006aea:	d156      	bne.n	8006b9a <HAL_RCC_OscConfig+0x20a>
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f003 0303 	and.w	r3, r3, #3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d151      	bne.n	8006b9a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006af6:	4b48      	ldr	r3, [pc, #288]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0304 	and.w	r3, r3, #4
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d005      	beq.n	8006b0e <HAL_RCC_OscConfig+0x17e>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e392      	b.n	8007234 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b0e:	4b42      	ldr	r3, [pc, #264]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f023 0219 	bic.w	r2, r3, #25
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	493f      	ldr	r1, [pc, #252]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b20:	f7fa ff7a 	bl	8001a18 <HAL_GetTick>
 8006b24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b26:	e008      	b.n	8006b3a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b28:	f7fa ff76 	bl	8001a18 <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d901      	bls.n	8006b3a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e37c      	b.n	8007234 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b3a:	4b37      	ldr	r3, [pc, #220]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0304 	and.w	r3, r3, #4
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d0f0      	beq.n	8006b28 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b46:	f7fa ff97 	bl	8001a78 <HAL_GetREVID>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d817      	bhi.n	8006b84 <HAL_RCC_OscConfig+0x1f4>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	2b40      	cmp	r3, #64	; 0x40
 8006b5a:	d108      	bne.n	8006b6e <HAL_RCC_OscConfig+0x1de>
 8006b5c:	4b2e      	ldr	r3, [pc, #184]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006b64:	4a2c      	ldr	r2, [pc, #176]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b6a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b6c:	e07a      	b.n	8006c64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b6e:	4b2a      	ldr	r3, [pc, #168]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	031b      	lsls	r3, r3, #12
 8006b7c:	4926      	ldr	r1, [pc, #152]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b82:	e06f      	b.n	8006c64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b84:	4b24      	ldr	r3, [pc, #144]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	061b      	lsls	r3, r3, #24
 8006b92:	4921      	ldr	r1, [pc, #132]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b98:	e064      	b.n	8006c64 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d047      	beq.n	8006c32 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ba2:	4b1d      	ldr	r3, [pc, #116]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f023 0219 	bic.w	r2, r3, #25
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	491a      	ldr	r1, [pc, #104]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb4:	f7fa ff30 	bl	8001a18 <HAL_GetTick>
 8006bb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bba:	e008      	b.n	8006bce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bbc:	f7fa ff2c 	bl	8001a18 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e332      	b.n	8007234 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bce:	4b12      	ldr	r3, [pc, #72]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0304 	and.w	r3, r3, #4
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0f0      	beq.n	8006bbc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bda:	f7fa ff4d 	bl	8001a78 <HAL_GetREVID>
 8006bde:	4603      	mov	r3, r0
 8006be0:	f241 0203 	movw	r2, #4099	; 0x1003
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d819      	bhi.n	8006c1c <HAL_RCC_OscConfig+0x28c>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	2b40      	cmp	r3, #64	; 0x40
 8006bee:	d108      	bne.n	8006c02 <HAL_RCC_OscConfig+0x272>
 8006bf0:	4b09      	ldr	r3, [pc, #36]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006bf8:	4a07      	ldr	r2, [pc, #28]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bfe:	6053      	str	r3, [r2, #4]
 8006c00:	e030      	b.n	8006c64 <HAL_RCC_OscConfig+0x2d4>
 8006c02:	4b05      	ldr	r3, [pc, #20]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	031b      	lsls	r3, r3, #12
 8006c10:	4901      	ldr	r1, [pc, #4]	; (8006c18 <HAL_RCC_OscConfig+0x288>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	604b      	str	r3, [r1, #4]
 8006c16:	e025      	b.n	8006c64 <HAL_RCC_OscConfig+0x2d4>
 8006c18:	58024400 	.word	0x58024400
 8006c1c:	4b9a      	ldr	r3, [pc, #616]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	061b      	lsls	r3, r3, #24
 8006c2a:	4997      	ldr	r1, [pc, #604]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	604b      	str	r3, [r1, #4]
 8006c30:	e018      	b.n	8006c64 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c32:	4b95      	ldr	r3, [pc, #596]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a94      	ldr	r2, [pc, #592]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006c38:	f023 0301 	bic.w	r3, r3, #1
 8006c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c3e:	f7fa feeb 	bl	8001a18 <HAL_GetTick>
 8006c42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c44:	e008      	b.n	8006c58 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c46:	f7fa fee7 	bl	8001a18 <HAL_GetTick>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d901      	bls.n	8006c58 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e2ed      	b.n	8007234 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c58:	4b8b      	ldr	r3, [pc, #556]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0304 	and.w	r3, r3, #4
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1f0      	bne.n	8006c46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0310 	and.w	r3, r3, #16
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 80a9 	beq.w	8006dc4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c72:	4b85      	ldr	r3, [pc, #532]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c7a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c7c:	4b82      	ldr	r3, [pc, #520]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c80:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	2b08      	cmp	r3, #8
 8006c86:	d007      	beq.n	8006c98 <HAL_RCC_OscConfig+0x308>
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	2b18      	cmp	r3, #24
 8006c8c:	d13a      	bne.n	8006d04 <HAL_RCC_OscConfig+0x374>
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f003 0303 	and.w	r3, r3, #3
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d135      	bne.n	8006d04 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c98:	4b7b      	ldr	r3, [pc, #492]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d005      	beq.n	8006cb0 <HAL_RCC_OscConfig+0x320>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	2b80      	cmp	r3, #128	; 0x80
 8006caa:	d001      	beq.n	8006cb0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e2c1      	b.n	8007234 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006cb0:	f7fa fee2 	bl	8001a78 <HAL_GetREVID>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	f241 0203 	movw	r2, #4099	; 0x1003
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d817      	bhi.n	8006cee <HAL_RCC_OscConfig+0x35e>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	2b20      	cmp	r3, #32
 8006cc4:	d108      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x348>
 8006cc6:	4b70      	ldr	r3, [pc, #448]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006cce:	4a6e      	ldr	r2, [pc, #440]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006cd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cd4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006cd6:	e075      	b.n	8006dc4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006cd8:	4b6b      	ldr	r3, [pc, #428]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a1b      	ldr	r3, [r3, #32]
 8006ce4:	069b      	lsls	r3, r3, #26
 8006ce6:	4968      	ldr	r1, [pc, #416]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006cec:	e06a      	b.n	8006dc4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006cee:	4b66      	ldr	r3, [pc, #408]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	061b      	lsls	r3, r3, #24
 8006cfc:	4962      	ldr	r1, [pc, #392]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d02:	e05f      	b.n	8006dc4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	69db      	ldr	r3, [r3, #28]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d042      	beq.n	8006d92 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006d0c:	4b5e      	ldr	r3, [pc, #376]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a5d      	ldr	r2, [pc, #372]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d18:	f7fa fe7e 	bl	8001a18 <HAL_GetTick>
 8006d1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d1e:	e008      	b.n	8006d32 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006d20:	f7fa fe7a 	bl	8001a18 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d901      	bls.n	8006d32 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e280      	b.n	8007234 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d32:	4b55      	ldr	r3, [pc, #340]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d0f0      	beq.n	8006d20 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d3e:	f7fa fe9b 	bl	8001a78 <HAL_GetREVID>
 8006d42:	4603      	mov	r3, r0
 8006d44:	f241 0203 	movw	r2, #4099	; 0x1003
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d817      	bhi.n	8006d7c <HAL_RCC_OscConfig+0x3ec>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a1b      	ldr	r3, [r3, #32]
 8006d50:	2b20      	cmp	r3, #32
 8006d52:	d108      	bne.n	8006d66 <HAL_RCC_OscConfig+0x3d6>
 8006d54:	4b4c      	ldr	r3, [pc, #304]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006d5c:	4a4a      	ldr	r2, [pc, #296]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006d5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d62:	6053      	str	r3, [r2, #4]
 8006d64:	e02e      	b.n	8006dc4 <HAL_RCC_OscConfig+0x434>
 8006d66:	4b48      	ldr	r3, [pc, #288]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	069b      	lsls	r3, r3, #26
 8006d74:	4944      	ldr	r1, [pc, #272]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	604b      	str	r3, [r1, #4]
 8006d7a:	e023      	b.n	8006dc4 <HAL_RCC_OscConfig+0x434>
 8006d7c:	4b42      	ldr	r3, [pc, #264]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a1b      	ldr	r3, [r3, #32]
 8006d88:	061b      	lsls	r3, r3, #24
 8006d8a:	493f      	ldr	r1, [pc, #252]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	60cb      	str	r3, [r1, #12]
 8006d90:	e018      	b.n	8006dc4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006d92:	4b3d      	ldr	r3, [pc, #244]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a3c      	ldr	r2, [pc, #240]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006d98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d9e:	f7fa fe3b 	bl	8001a18 <HAL_GetTick>
 8006da2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006da4:	e008      	b.n	8006db8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006da6:	f7fa fe37 	bl	8001a18 <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d901      	bls.n	8006db8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e23d      	b.n	8007234 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006db8:	4b33      	ldr	r3, [pc, #204]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1f0      	bne.n	8006da6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0308 	and.w	r3, r3, #8
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d036      	beq.n	8006e3e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d019      	beq.n	8006e0c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dd8:	4b2b      	ldr	r3, [pc, #172]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ddc:	4a2a      	ldr	r2, [pc, #168]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006dde:	f043 0301 	orr.w	r3, r3, #1
 8006de2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006de4:	f7fa fe18 	bl	8001a18 <HAL_GetTick>
 8006de8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006dea:	e008      	b.n	8006dfe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dec:	f7fa fe14 	bl	8001a18 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d901      	bls.n	8006dfe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e21a      	b.n	8007234 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006dfe:	4b22      	ldr	r3, [pc, #136]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e02:	f003 0302 	and.w	r3, r3, #2
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d0f0      	beq.n	8006dec <HAL_RCC_OscConfig+0x45c>
 8006e0a:	e018      	b.n	8006e3e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e0c:	4b1e      	ldr	r3, [pc, #120]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e10:	4a1d      	ldr	r2, [pc, #116]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006e12:	f023 0301 	bic.w	r3, r3, #1
 8006e16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e18:	f7fa fdfe 	bl	8001a18 <HAL_GetTick>
 8006e1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e1e:	e008      	b.n	8006e32 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e20:	f7fa fdfa 	bl	8001a18 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d901      	bls.n	8006e32 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e200      	b.n	8007234 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e32:	4b15      	ldr	r3, [pc, #84]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1f0      	bne.n	8006e20 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0320 	and.w	r3, r3, #32
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d039      	beq.n	8006ebe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d01c      	beq.n	8006e8c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006e52:	4b0d      	ldr	r3, [pc, #52]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a0c      	ldr	r2, [pc, #48]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006e58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006e5e:	f7fa fddb 	bl	8001a18 <HAL_GetTick>
 8006e62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006e64:	e008      	b.n	8006e78 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e66:	f7fa fdd7 	bl	8001a18 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d901      	bls.n	8006e78 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e1dd      	b.n	8007234 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006e78:	4b03      	ldr	r3, [pc, #12]	; (8006e88 <HAL_RCC_OscConfig+0x4f8>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d0f0      	beq.n	8006e66 <HAL_RCC_OscConfig+0x4d6>
 8006e84:	e01b      	b.n	8006ebe <HAL_RCC_OscConfig+0x52e>
 8006e86:	bf00      	nop
 8006e88:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006e8c:	4b9b      	ldr	r3, [pc, #620]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a9a      	ldr	r2, [pc, #616]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8006e92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006e98:	f7fa fdbe 	bl	8001a18 <HAL_GetTick>
 8006e9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ea0:	f7fa fdba 	bl	8001a18 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e1c0      	b.n	8007234 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006eb2:	4b92      	ldr	r3, [pc, #584]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1f0      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0304 	and.w	r3, r3, #4
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 8081 	beq.w	8006fce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ecc:	4b8c      	ldr	r3, [pc, #560]	; (8007100 <HAL_RCC_OscConfig+0x770>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a8b      	ldr	r2, [pc, #556]	; (8007100 <HAL_RCC_OscConfig+0x770>)
 8006ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ed6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ed8:	f7fa fd9e 	bl	8001a18 <HAL_GetTick>
 8006edc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ede:	e008      	b.n	8006ef2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ee0:	f7fa fd9a 	bl	8001a18 <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	2b64      	cmp	r3, #100	; 0x64
 8006eec:	d901      	bls.n	8006ef2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e1a0      	b.n	8007234 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ef2:	4b83      	ldr	r3, [pc, #524]	; (8007100 <HAL_RCC_OscConfig+0x770>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0f0      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d106      	bne.n	8006f14 <HAL_RCC_OscConfig+0x584>
 8006f06:	4b7d      	ldr	r3, [pc, #500]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8006f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0a:	4a7c      	ldr	r2, [pc, #496]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8006f0c:	f043 0301 	orr.w	r3, r3, #1
 8006f10:	6713      	str	r3, [r2, #112]	; 0x70
 8006f12:	e02d      	b.n	8006f70 <HAL_RCC_OscConfig+0x5e0>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10c      	bne.n	8006f36 <HAL_RCC_OscConfig+0x5a6>
 8006f1c:	4b77      	ldr	r3, [pc, #476]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8006f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f20:	4a76      	ldr	r2, [pc, #472]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8006f22:	f023 0301 	bic.w	r3, r3, #1
 8006f26:	6713      	str	r3, [r2, #112]	; 0x70
 8006f28:	4b74      	ldr	r3, [pc, #464]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8006f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2c:	4a73      	ldr	r2, [pc, #460]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8006f2e:	f023 0304 	bic.w	r3, r3, #4
 8006f32:	6713      	str	r3, [r2, #112]	; 0x70
 8006f34:	e01c      	b.n	8006f70 <HAL_RCC_OscConfig+0x5e0>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	2b05      	cmp	r3, #5
 8006f3c:	d10c      	bne.n	8006f58 <HAL_RCC_OscConfig+0x5c8>
 8006f3e:	4b6f      	ldr	r3, [pc, #444]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8006f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f42:	4a6e      	ldr	r2, [pc, #440]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8006f44:	f043 0304 	orr.w	r3, r3, #4
 8006f48:	6713      	str	r3, [r2, #112]	; 0x70
 8006f4a:	4b6c      	ldr	r3, [pc, #432]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8006f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f4e:	4a6b      	ldr	r2, [pc, #428]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8006f50:	f043 0301 	orr.w	r3, r3, #1
 8006f54:	6713      	str	r3, [r2, #112]	; 0x70
 8006f56:	e00b      	b.n	8006f70 <HAL_RCC_OscConfig+0x5e0>
 8006f58:	4b68      	ldr	r3, [pc, #416]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8006f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f5c:	4a67      	ldr	r2, [pc, #412]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8006f5e:	f023 0301 	bic.w	r3, r3, #1
 8006f62:	6713      	str	r3, [r2, #112]	; 0x70
 8006f64:	4b65      	ldr	r3, [pc, #404]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8006f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f68:	4a64      	ldr	r2, [pc, #400]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8006f6a:	f023 0304 	bic.w	r3, r3, #4
 8006f6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d015      	beq.n	8006fa4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f78:	f7fa fd4e 	bl	8001a18 <HAL_GetTick>
 8006f7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f7e:	e00a      	b.n	8006f96 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f80:	f7fa fd4a 	bl	8001a18 <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d901      	bls.n	8006f96 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e14e      	b.n	8007234 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f96:	4b59      	ldr	r3, [pc, #356]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8006f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9a:	f003 0302 	and.w	r3, r3, #2
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d0ee      	beq.n	8006f80 <HAL_RCC_OscConfig+0x5f0>
 8006fa2:	e014      	b.n	8006fce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fa4:	f7fa fd38 	bl	8001a18 <HAL_GetTick>
 8006fa8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006faa:	e00a      	b.n	8006fc2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fac:	f7fa fd34 	bl	8001a18 <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d901      	bls.n	8006fc2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e138      	b.n	8007234 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006fc2:	4b4e      	ldr	r3, [pc, #312]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8006fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc6:	f003 0302 	and.w	r3, r3, #2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1ee      	bne.n	8006fac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f000 812d 	beq.w	8007232 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006fd8:	4b48      	ldr	r3, [pc, #288]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fe0:	2b18      	cmp	r3, #24
 8006fe2:	f000 80bd 	beq.w	8007160 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	f040 809e 	bne.w	800712c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ff0:	4b42      	ldr	r3, [pc, #264]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a41      	ldr	r2, [pc, #260]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8006ff6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ffc:	f7fa fd0c 	bl	8001a18 <HAL_GetTick>
 8007000:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007002:	e008      	b.n	8007016 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007004:	f7fa fd08 	bl	8001a18 <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	2b02      	cmp	r3, #2
 8007010:	d901      	bls.n	8007016 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e10e      	b.n	8007234 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007016:	4b39      	ldr	r3, [pc, #228]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1f0      	bne.n	8007004 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007022:	4b36      	ldr	r3, [pc, #216]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8007024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007026:	4b37      	ldr	r3, [pc, #220]	; (8007104 <HAL_RCC_OscConfig+0x774>)
 8007028:	4013      	ands	r3, r2
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007032:	0112      	lsls	r2, r2, #4
 8007034:	430a      	orrs	r2, r1
 8007036:	4931      	ldr	r1, [pc, #196]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8007038:	4313      	orrs	r3, r2
 800703a:	628b      	str	r3, [r1, #40]	; 0x28
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007040:	3b01      	subs	r3, #1
 8007042:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800704a:	3b01      	subs	r3, #1
 800704c:	025b      	lsls	r3, r3, #9
 800704e:	b29b      	uxth	r3, r3
 8007050:	431a      	orrs	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007056:	3b01      	subs	r3, #1
 8007058:	041b      	lsls	r3, r3, #16
 800705a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800705e:	431a      	orrs	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007064:	3b01      	subs	r3, #1
 8007066:	061b      	lsls	r3, r3, #24
 8007068:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800706c:	4923      	ldr	r1, [pc, #140]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 800706e:	4313      	orrs	r3, r2
 8007070:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007072:	4b22      	ldr	r3, [pc, #136]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8007074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007076:	4a21      	ldr	r2, [pc, #132]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8007078:	f023 0301 	bic.w	r3, r3, #1
 800707c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800707e:	4b1f      	ldr	r3, [pc, #124]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8007080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007082:	4b21      	ldr	r3, [pc, #132]	; (8007108 <HAL_RCC_OscConfig+0x778>)
 8007084:	4013      	ands	r3, r2
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800708a:	00d2      	lsls	r2, r2, #3
 800708c:	491b      	ldr	r1, [pc, #108]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 800708e:	4313      	orrs	r3, r2
 8007090:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007092:	4b1a      	ldr	r3, [pc, #104]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 8007094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007096:	f023 020c 	bic.w	r2, r3, #12
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709e:	4917      	ldr	r1, [pc, #92]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80070a4:	4b15      	ldr	r3, [pc, #84]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 80070a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a8:	f023 0202 	bic.w	r2, r3, #2
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b0:	4912      	ldr	r1, [pc, #72]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80070b6:	4b11      	ldr	r3, [pc, #68]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 80070b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ba:	4a10      	ldr	r2, [pc, #64]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 80070bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070c2:	4b0e      	ldr	r3, [pc, #56]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 80070c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c6:	4a0d      	ldr	r2, [pc, #52]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 80070c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80070ce:	4b0b      	ldr	r3, [pc, #44]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 80070d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d2:	4a0a      	ldr	r2, [pc, #40]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 80070d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80070da:	4b08      	ldr	r3, [pc, #32]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 80070dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070de:	4a07      	ldr	r2, [pc, #28]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 80070e0:	f043 0301 	orr.w	r3, r3, #1
 80070e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070e6:	4b05      	ldr	r3, [pc, #20]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a04      	ldr	r2, [pc, #16]	; (80070fc <HAL_RCC_OscConfig+0x76c>)
 80070ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f2:	f7fa fc91 	bl	8001a18 <HAL_GetTick>
 80070f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80070f8:	e011      	b.n	800711e <HAL_RCC_OscConfig+0x78e>
 80070fa:	bf00      	nop
 80070fc:	58024400 	.word	0x58024400
 8007100:	58024800 	.word	0x58024800
 8007104:	fffffc0c 	.word	0xfffffc0c
 8007108:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800710c:	f7fa fc84 	bl	8001a18 <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	2b02      	cmp	r3, #2
 8007118:	d901      	bls.n	800711e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e08a      	b.n	8007234 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800711e:	4b47      	ldr	r3, [pc, #284]	; (800723c <HAL_RCC_OscConfig+0x8ac>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d0f0      	beq.n	800710c <HAL_RCC_OscConfig+0x77c>
 800712a:	e082      	b.n	8007232 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800712c:	4b43      	ldr	r3, [pc, #268]	; (800723c <HAL_RCC_OscConfig+0x8ac>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a42      	ldr	r2, [pc, #264]	; (800723c <HAL_RCC_OscConfig+0x8ac>)
 8007132:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007138:	f7fa fc6e 	bl	8001a18 <HAL_GetTick>
 800713c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800713e:	e008      	b.n	8007152 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007140:	f7fa fc6a 	bl	8001a18 <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	2b02      	cmp	r3, #2
 800714c:	d901      	bls.n	8007152 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e070      	b.n	8007234 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007152:	4b3a      	ldr	r3, [pc, #232]	; (800723c <HAL_RCC_OscConfig+0x8ac>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1f0      	bne.n	8007140 <HAL_RCC_OscConfig+0x7b0>
 800715e:	e068      	b.n	8007232 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007160:	4b36      	ldr	r3, [pc, #216]	; (800723c <HAL_RCC_OscConfig+0x8ac>)
 8007162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007164:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007166:	4b35      	ldr	r3, [pc, #212]	; (800723c <HAL_RCC_OscConfig+0x8ac>)
 8007168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007170:	2b01      	cmp	r3, #1
 8007172:	d031      	beq.n	80071d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	f003 0203 	and.w	r2, r3, #3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800717e:	429a      	cmp	r2, r3
 8007180:	d12a      	bne.n	80071d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	091b      	lsrs	r3, r3, #4
 8007186:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800718e:	429a      	cmp	r2, r3
 8007190:	d122      	bne.n	80071d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800719e:	429a      	cmp	r2, r3
 80071a0:	d11a      	bne.n	80071d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	0a5b      	lsrs	r3, r3, #9
 80071a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d111      	bne.n	80071d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	0c1b      	lsrs	r3, r3, #16
 80071b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d108      	bne.n	80071d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	0e1b      	lsrs	r3, r3, #24
 80071ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d001      	beq.n	80071dc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e02b      	b.n	8007234 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80071dc:	4b17      	ldr	r3, [pc, #92]	; (800723c <HAL_RCC_OscConfig+0x8ac>)
 80071de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e0:	08db      	lsrs	r3, r3, #3
 80071e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071e6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d01f      	beq.n	8007232 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80071f2:	4b12      	ldr	r3, [pc, #72]	; (800723c <HAL_RCC_OscConfig+0x8ac>)
 80071f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f6:	4a11      	ldr	r2, [pc, #68]	; (800723c <HAL_RCC_OscConfig+0x8ac>)
 80071f8:	f023 0301 	bic.w	r3, r3, #1
 80071fc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80071fe:	f7fa fc0b 	bl	8001a18 <HAL_GetTick>
 8007202:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007204:	bf00      	nop
 8007206:	f7fa fc07 	bl	8001a18 <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	4293      	cmp	r3, r2
 8007210:	d0f9      	beq.n	8007206 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007212:	4b0a      	ldr	r3, [pc, #40]	; (800723c <HAL_RCC_OscConfig+0x8ac>)
 8007214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007216:	4b0a      	ldr	r3, [pc, #40]	; (8007240 <HAL_RCC_OscConfig+0x8b0>)
 8007218:	4013      	ands	r3, r2
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800721e:	00d2      	lsls	r2, r2, #3
 8007220:	4906      	ldr	r1, [pc, #24]	; (800723c <HAL_RCC_OscConfig+0x8ac>)
 8007222:	4313      	orrs	r3, r2
 8007224:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007226:	4b05      	ldr	r3, [pc, #20]	; (800723c <HAL_RCC_OscConfig+0x8ac>)
 8007228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722a:	4a04      	ldr	r2, [pc, #16]	; (800723c <HAL_RCC_OscConfig+0x8ac>)
 800722c:	f043 0301 	orr.w	r3, r3, #1
 8007230:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3730      	adds	r7, #48	; 0x30
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	58024400 	.word	0x58024400
 8007240:	ffff0007 	.word	0xffff0007

08007244 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d101      	bne.n	8007258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e19c      	b.n	8007592 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007258:	4b8a      	ldr	r3, [pc, #552]	; (8007484 <HAL_RCC_ClockConfig+0x240>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 030f 	and.w	r3, r3, #15
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	429a      	cmp	r2, r3
 8007264:	d910      	bls.n	8007288 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007266:	4b87      	ldr	r3, [pc, #540]	; (8007484 <HAL_RCC_ClockConfig+0x240>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f023 020f 	bic.w	r2, r3, #15
 800726e:	4985      	ldr	r1, [pc, #532]	; (8007484 <HAL_RCC_ClockConfig+0x240>)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	4313      	orrs	r3, r2
 8007274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007276:	4b83      	ldr	r3, [pc, #524]	; (8007484 <HAL_RCC_ClockConfig+0x240>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 030f 	and.w	r3, r3, #15
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	429a      	cmp	r2, r3
 8007282:	d001      	beq.n	8007288 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e184      	b.n	8007592 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0304 	and.w	r3, r3, #4
 8007290:	2b00      	cmp	r3, #0
 8007292:	d010      	beq.n	80072b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	691a      	ldr	r2, [r3, #16]
 8007298:	4b7b      	ldr	r3, [pc, #492]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d908      	bls.n	80072b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80072a4:	4b78      	ldr	r3, [pc, #480]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	4975      	ldr	r1, [pc, #468]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0308 	and.w	r3, r3, #8
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d010      	beq.n	80072e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	695a      	ldr	r2, [r3, #20]
 80072c6:	4b70      	ldr	r3, [pc, #448]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d908      	bls.n	80072e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80072d2:	4b6d      	ldr	r3, [pc, #436]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	496a      	ldr	r1, [pc, #424]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0310 	and.w	r3, r3, #16
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d010      	beq.n	8007312 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	699a      	ldr	r2, [r3, #24]
 80072f4:	4b64      	ldr	r3, [pc, #400]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d908      	bls.n	8007312 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007300:	4b61      	ldr	r3, [pc, #388]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 8007302:	69db      	ldr	r3, [r3, #28]
 8007304:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	495e      	ldr	r1, [pc, #376]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 800730e:	4313      	orrs	r3, r2
 8007310:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0320 	and.w	r3, r3, #32
 800731a:	2b00      	cmp	r3, #0
 800731c:	d010      	beq.n	8007340 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	69da      	ldr	r2, [r3, #28]
 8007322:	4b59      	ldr	r3, [pc, #356]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800732a:	429a      	cmp	r2, r3
 800732c:	d908      	bls.n	8007340 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800732e:	4b56      	ldr	r3, [pc, #344]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	4953      	ldr	r1, [pc, #332]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 800733c:	4313      	orrs	r3, r2
 800733e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0302 	and.w	r3, r3, #2
 8007348:	2b00      	cmp	r3, #0
 800734a:	d010      	beq.n	800736e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68da      	ldr	r2, [r3, #12]
 8007350:	4b4d      	ldr	r3, [pc, #308]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	f003 030f 	and.w	r3, r3, #15
 8007358:	429a      	cmp	r2, r3
 800735a:	d908      	bls.n	800736e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800735c:	4b4a      	ldr	r3, [pc, #296]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	f023 020f 	bic.w	r2, r3, #15
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	4947      	ldr	r1, [pc, #284]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 800736a:	4313      	orrs	r3, r2
 800736c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	d055      	beq.n	8007426 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800737a:	4b43      	ldr	r3, [pc, #268]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	4940      	ldr	r1, [pc, #256]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 8007388:	4313      	orrs	r3, r2
 800738a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	2b02      	cmp	r3, #2
 8007392:	d107      	bne.n	80073a4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007394:	4b3c      	ldr	r3, [pc, #240]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d121      	bne.n	80073e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e0f6      	b.n	8007592 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d107      	bne.n	80073bc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073ac:	4b36      	ldr	r3, [pc, #216]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d115      	bne.n	80073e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e0ea      	b.n	8007592 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d107      	bne.n	80073d4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073c4:	4b30      	ldr	r3, [pc, #192]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d109      	bne.n	80073e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e0de      	b.n	8007592 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073d4:	4b2c      	ldr	r3, [pc, #176]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e0d6      	b.n	8007592 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80073e4:	4b28      	ldr	r3, [pc, #160]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	f023 0207 	bic.w	r2, r3, #7
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	4925      	ldr	r1, [pc, #148]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073f6:	f7fa fb0f 	bl	8001a18 <HAL_GetTick>
 80073fa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073fc:	e00a      	b.n	8007414 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073fe:	f7fa fb0b 	bl	8001a18 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	f241 3288 	movw	r2, #5000	; 0x1388
 800740c:	4293      	cmp	r3, r2
 800740e:	d901      	bls.n	8007414 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e0be      	b.n	8007592 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007414:	4b1c      	ldr	r3, [pc, #112]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	429a      	cmp	r2, r3
 8007424:	d1eb      	bne.n	80073fe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	2b00      	cmp	r3, #0
 8007430:	d010      	beq.n	8007454 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68da      	ldr	r2, [r3, #12]
 8007436:	4b14      	ldr	r3, [pc, #80]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	f003 030f 	and.w	r3, r3, #15
 800743e:	429a      	cmp	r2, r3
 8007440:	d208      	bcs.n	8007454 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007442:	4b11      	ldr	r3, [pc, #68]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	f023 020f 	bic.w	r2, r3, #15
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	490e      	ldr	r1, [pc, #56]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 8007450:	4313      	orrs	r3, r2
 8007452:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007454:	4b0b      	ldr	r3, [pc, #44]	; (8007484 <HAL_RCC_ClockConfig+0x240>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 030f 	and.w	r3, r3, #15
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	429a      	cmp	r2, r3
 8007460:	d214      	bcs.n	800748c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007462:	4b08      	ldr	r3, [pc, #32]	; (8007484 <HAL_RCC_ClockConfig+0x240>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f023 020f 	bic.w	r2, r3, #15
 800746a:	4906      	ldr	r1, [pc, #24]	; (8007484 <HAL_RCC_ClockConfig+0x240>)
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	4313      	orrs	r3, r2
 8007470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007472:	4b04      	ldr	r3, [pc, #16]	; (8007484 <HAL_RCC_ClockConfig+0x240>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 030f 	and.w	r3, r3, #15
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	d005      	beq.n	800748c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e086      	b.n	8007592 <HAL_RCC_ClockConfig+0x34e>
 8007484:	52002000 	.word	0x52002000
 8007488:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	2b00      	cmp	r3, #0
 8007496:	d010      	beq.n	80074ba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	691a      	ldr	r2, [r3, #16]
 800749c:	4b3f      	ldr	r3, [pc, #252]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d208      	bcs.n	80074ba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80074a8:	4b3c      	ldr	r3, [pc, #240]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	4939      	ldr	r1, [pc, #228]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0308 	and.w	r3, r3, #8
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d010      	beq.n	80074e8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	695a      	ldr	r2, [r3, #20]
 80074ca:	4b34      	ldr	r3, [pc, #208]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d208      	bcs.n	80074e8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80074d6:	4b31      	ldr	r3, [pc, #196]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	492e      	ldr	r1, [pc, #184]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0310 	and.w	r3, r3, #16
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d010      	beq.n	8007516 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	699a      	ldr	r2, [r3, #24]
 80074f8:	4b28      	ldr	r3, [pc, #160]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 80074fa:	69db      	ldr	r3, [r3, #28]
 80074fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007500:	429a      	cmp	r2, r3
 8007502:	d208      	bcs.n	8007516 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007504:	4b25      	ldr	r3, [pc, #148]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 8007506:	69db      	ldr	r3, [r3, #28]
 8007508:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	4922      	ldr	r1, [pc, #136]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 8007512:	4313      	orrs	r3, r2
 8007514:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 0320 	and.w	r3, r3, #32
 800751e:	2b00      	cmp	r3, #0
 8007520:	d010      	beq.n	8007544 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	69da      	ldr	r2, [r3, #28]
 8007526:	4b1d      	ldr	r3, [pc, #116]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800752e:	429a      	cmp	r2, r3
 8007530:	d208      	bcs.n	8007544 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007532:	4b1a      	ldr	r3, [pc, #104]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	4917      	ldr	r1, [pc, #92]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 8007540:	4313      	orrs	r3, r2
 8007542:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007544:	f000 f834 	bl	80075b0 <HAL_RCC_GetSysClockFreq>
 8007548:	4602      	mov	r2, r0
 800754a:	4b14      	ldr	r3, [pc, #80]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	0a1b      	lsrs	r3, r3, #8
 8007550:	f003 030f 	and.w	r3, r3, #15
 8007554:	4912      	ldr	r1, [pc, #72]	; (80075a0 <HAL_RCC_ClockConfig+0x35c>)
 8007556:	5ccb      	ldrb	r3, [r1, r3]
 8007558:	f003 031f 	and.w	r3, r3, #31
 800755c:	fa22 f303 	lsr.w	r3, r2, r3
 8007560:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007562:	4b0e      	ldr	r3, [pc, #56]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	f003 030f 	and.w	r3, r3, #15
 800756a:	4a0d      	ldr	r2, [pc, #52]	; (80075a0 <HAL_RCC_ClockConfig+0x35c>)
 800756c:	5cd3      	ldrb	r3, [r2, r3]
 800756e:	f003 031f 	and.w	r3, r3, #31
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	fa22 f303 	lsr.w	r3, r2, r3
 8007578:	4a0a      	ldr	r2, [pc, #40]	; (80075a4 <HAL_RCC_ClockConfig+0x360>)
 800757a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800757c:	4a0a      	ldr	r2, [pc, #40]	; (80075a8 <HAL_RCC_ClockConfig+0x364>)
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007582:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <HAL_RCC_ClockConfig+0x368>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4618      	mov	r0, r3
 8007588:	f7fa f9fc 	bl	8001984 <HAL_InitTick>
 800758c:	4603      	mov	r3, r0
 800758e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007590:	7bfb      	ldrb	r3, [r7, #15]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	58024400 	.word	0x58024400
 80075a0:	0800f27c 	.word	0x0800f27c
 80075a4:	24000004 	.word	0x24000004
 80075a8:	24000000 	.word	0x24000000
 80075ac:	24000008 	.word	0x24000008

080075b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b089      	sub	sp, #36	; 0x24
 80075b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075b6:	4bb3      	ldr	r3, [pc, #716]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075be:	2b18      	cmp	r3, #24
 80075c0:	f200 8155 	bhi.w	800786e <HAL_RCC_GetSysClockFreq+0x2be>
 80075c4:	a201      	add	r2, pc, #4	; (adr r2, 80075cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80075c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ca:	bf00      	nop
 80075cc:	08007631 	.word	0x08007631
 80075d0:	0800786f 	.word	0x0800786f
 80075d4:	0800786f 	.word	0x0800786f
 80075d8:	0800786f 	.word	0x0800786f
 80075dc:	0800786f 	.word	0x0800786f
 80075e0:	0800786f 	.word	0x0800786f
 80075e4:	0800786f 	.word	0x0800786f
 80075e8:	0800786f 	.word	0x0800786f
 80075ec:	08007657 	.word	0x08007657
 80075f0:	0800786f 	.word	0x0800786f
 80075f4:	0800786f 	.word	0x0800786f
 80075f8:	0800786f 	.word	0x0800786f
 80075fc:	0800786f 	.word	0x0800786f
 8007600:	0800786f 	.word	0x0800786f
 8007604:	0800786f 	.word	0x0800786f
 8007608:	0800786f 	.word	0x0800786f
 800760c:	0800765d 	.word	0x0800765d
 8007610:	0800786f 	.word	0x0800786f
 8007614:	0800786f 	.word	0x0800786f
 8007618:	0800786f 	.word	0x0800786f
 800761c:	0800786f 	.word	0x0800786f
 8007620:	0800786f 	.word	0x0800786f
 8007624:	0800786f 	.word	0x0800786f
 8007628:	0800786f 	.word	0x0800786f
 800762c:	08007663 	.word	0x08007663
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007630:	4b94      	ldr	r3, [pc, #592]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0320 	and.w	r3, r3, #32
 8007638:	2b00      	cmp	r3, #0
 800763a:	d009      	beq.n	8007650 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800763c:	4b91      	ldr	r3, [pc, #580]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	08db      	lsrs	r3, r3, #3
 8007642:	f003 0303 	and.w	r3, r3, #3
 8007646:	4a90      	ldr	r2, [pc, #576]	; (8007888 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007648:	fa22 f303 	lsr.w	r3, r2, r3
 800764c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800764e:	e111      	b.n	8007874 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007650:	4b8d      	ldr	r3, [pc, #564]	; (8007888 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007652:	61bb      	str	r3, [r7, #24]
      break;
 8007654:	e10e      	b.n	8007874 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007656:	4b8d      	ldr	r3, [pc, #564]	; (800788c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007658:	61bb      	str	r3, [r7, #24]
      break;
 800765a:	e10b      	b.n	8007874 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800765c:	4b8c      	ldr	r3, [pc, #560]	; (8007890 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800765e:	61bb      	str	r3, [r7, #24]
      break;
 8007660:	e108      	b.n	8007874 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007662:	4b88      	ldr	r3, [pc, #544]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007666:	f003 0303 	and.w	r3, r3, #3
 800766a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800766c:	4b85      	ldr	r3, [pc, #532]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800766e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007670:	091b      	lsrs	r3, r3, #4
 8007672:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007676:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007678:	4b82      	ldr	r3, [pc, #520]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	f003 0301 	and.w	r3, r3, #1
 8007680:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007682:	4b80      	ldr	r3, [pc, #512]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007686:	08db      	lsrs	r3, r3, #3
 8007688:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	fb02 f303 	mul.w	r3, r2, r3
 8007692:	ee07 3a90 	vmov	s15, r3
 8007696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800769a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 80e1 	beq.w	8007868 <HAL_RCC_GetSysClockFreq+0x2b8>
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	f000 8083 	beq.w	80077b4 <HAL_RCC_GetSysClockFreq+0x204>
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	f200 80a1 	bhi.w	80077f8 <HAL_RCC_GetSysClockFreq+0x248>
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d003      	beq.n	80076c4 <HAL_RCC_GetSysClockFreq+0x114>
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d056      	beq.n	8007770 <HAL_RCC_GetSysClockFreq+0x1c0>
 80076c2:	e099      	b.n	80077f8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076c4:	4b6f      	ldr	r3, [pc, #444]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0320 	and.w	r3, r3, #32
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d02d      	beq.n	800772c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076d0:	4b6c      	ldr	r3, [pc, #432]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	08db      	lsrs	r3, r3, #3
 80076d6:	f003 0303 	and.w	r3, r3, #3
 80076da:	4a6b      	ldr	r2, [pc, #428]	; (8007888 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80076dc:	fa22 f303 	lsr.w	r3, r2, r3
 80076e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	ee07 3a90 	vmov	s15, r3
 80076e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	ee07 3a90 	vmov	s15, r3
 80076f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076fa:	4b62      	ldr	r3, [pc, #392]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007702:	ee07 3a90 	vmov	s15, r3
 8007706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800770a:	ed97 6a02 	vldr	s12, [r7, #8]
 800770e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007894 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800771a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800771e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007726:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800772a:	e087      	b.n	800783c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	ee07 3a90 	vmov	s15, r3
 8007732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007736:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007898 <HAL_RCC_GetSysClockFreq+0x2e8>
 800773a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800773e:	4b51      	ldr	r3, [pc, #324]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007746:	ee07 3a90 	vmov	s15, r3
 800774a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800774e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007752:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007894 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800775a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800775e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800776a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800776e:	e065      	b.n	800783c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	ee07 3a90 	vmov	s15, r3
 8007776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800789c <HAL_RCC_GetSysClockFreq+0x2ec>
 800777e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007782:	4b40      	ldr	r3, [pc, #256]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800778a:	ee07 3a90 	vmov	s15, r3
 800778e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007792:	ed97 6a02 	vldr	s12, [r7, #8]
 8007796:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007894 <HAL_RCC_GetSysClockFreq+0x2e4>
 800779a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800779e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80077b2:	e043      	b.n	800783c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	ee07 3a90 	vmov	s15, r3
 80077ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077be:	eddf 6a38 	vldr	s13, [pc, #224]	; 80078a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80077c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077c6:	4b2f      	ldr	r3, [pc, #188]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ce:	ee07 3a90 	vmov	s15, r3
 80077d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80077da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007894 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80077f6:	e021      	b.n	800783c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	ee07 3a90 	vmov	s15, r3
 80077fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007802:	eddf 6a26 	vldr	s13, [pc, #152]	; 800789c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800780a:	4b1e      	ldr	r3, [pc, #120]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800780c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800781a:	ed97 6a02 	vldr	s12, [r7, #8]
 800781e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007894 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800782a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800782e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007836:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800783a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800783c:	4b11      	ldr	r3, [pc, #68]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800783e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007840:	0a5b      	lsrs	r3, r3, #9
 8007842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007846:	3301      	adds	r3, #1
 8007848:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	ee07 3a90 	vmov	s15, r3
 8007850:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007854:	edd7 6a07 	vldr	s13, [r7, #28]
 8007858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800785c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007860:	ee17 3a90 	vmov	r3, s15
 8007864:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007866:	e005      	b.n	8007874 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007868:	2300      	movs	r3, #0
 800786a:	61bb      	str	r3, [r7, #24]
      break;
 800786c:	e002      	b.n	8007874 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800786e:	4b07      	ldr	r3, [pc, #28]	; (800788c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007870:	61bb      	str	r3, [r7, #24]
      break;
 8007872:	bf00      	nop
  }

  return sysclockfreq;
 8007874:	69bb      	ldr	r3, [r7, #24]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3724      	adds	r7, #36	; 0x24
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	58024400 	.word	0x58024400
 8007888:	03d09000 	.word	0x03d09000
 800788c:	003d0900 	.word	0x003d0900
 8007890:	007a1200 	.word	0x007a1200
 8007894:	46000000 	.word	0x46000000
 8007898:	4c742400 	.word	0x4c742400
 800789c:	4a742400 	.word	0x4a742400
 80078a0:	4af42400 	.word	0x4af42400

080078a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80078aa:	f7ff fe81 	bl	80075b0 <HAL_RCC_GetSysClockFreq>
 80078ae:	4602      	mov	r2, r0
 80078b0:	4b10      	ldr	r3, [pc, #64]	; (80078f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	0a1b      	lsrs	r3, r3, #8
 80078b6:	f003 030f 	and.w	r3, r3, #15
 80078ba:	490f      	ldr	r1, [pc, #60]	; (80078f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80078bc:	5ccb      	ldrb	r3, [r1, r3]
 80078be:	f003 031f 	and.w	r3, r3, #31
 80078c2:	fa22 f303 	lsr.w	r3, r2, r3
 80078c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80078c8:	4b0a      	ldr	r3, [pc, #40]	; (80078f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	f003 030f 	and.w	r3, r3, #15
 80078d0:	4a09      	ldr	r2, [pc, #36]	; (80078f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80078d2:	5cd3      	ldrb	r3, [r2, r3]
 80078d4:	f003 031f 	and.w	r3, r3, #31
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	fa22 f303 	lsr.w	r3, r2, r3
 80078de:	4a07      	ldr	r2, [pc, #28]	; (80078fc <HAL_RCC_GetHCLKFreq+0x58>)
 80078e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80078e2:	4a07      	ldr	r2, [pc, #28]	; (8007900 <HAL_RCC_GetHCLKFreq+0x5c>)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80078e8:	4b04      	ldr	r3, [pc, #16]	; (80078fc <HAL_RCC_GetHCLKFreq+0x58>)
 80078ea:	681b      	ldr	r3, [r3, #0]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	58024400 	.word	0x58024400
 80078f8:	0800f27c 	.word	0x0800f27c
 80078fc:	24000004 	.word	0x24000004
 8007900:	24000000 	.word	0x24000000

08007904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007908:	f7ff ffcc 	bl	80078a4 <HAL_RCC_GetHCLKFreq>
 800790c:	4602      	mov	r2, r0
 800790e:	4b06      	ldr	r3, [pc, #24]	; (8007928 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007910:	69db      	ldr	r3, [r3, #28]
 8007912:	091b      	lsrs	r3, r3, #4
 8007914:	f003 0307 	and.w	r3, r3, #7
 8007918:	4904      	ldr	r1, [pc, #16]	; (800792c <HAL_RCC_GetPCLK1Freq+0x28>)
 800791a:	5ccb      	ldrb	r3, [r1, r3]
 800791c:	f003 031f 	and.w	r3, r3, #31
 8007920:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007924:	4618      	mov	r0, r3
 8007926:	bd80      	pop	{r7, pc}
 8007928:	58024400 	.word	0x58024400
 800792c:	0800f27c 	.word	0x0800f27c

08007930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007934:	f7ff ffb6 	bl	80078a4 <HAL_RCC_GetHCLKFreq>
 8007938:	4602      	mov	r2, r0
 800793a:	4b06      	ldr	r3, [pc, #24]	; (8007954 <HAL_RCC_GetPCLK2Freq+0x24>)
 800793c:	69db      	ldr	r3, [r3, #28]
 800793e:	0a1b      	lsrs	r3, r3, #8
 8007940:	f003 0307 	and.w	r3, r3, #7
 8007944:	4904      	ldr	r1, [pc, #16]	; (8007958 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007946:	5ccb      	ldrb	r3, [r1, r3]
 8007948:	f003 031f 	and.w	r3, r3, #31
 800794c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007950:	4618      	mov	r0, r3
 8007952:	bd80      	pop	{r7, pc}
 8007954:	58024400 	.word	0x58024400
 8007958:	0800f27c 	.word	0x0800f27c

0800795c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800795c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007960:	b0ca      	sub	sp, #296	; 0x128
 8007962:	af00      	add	r7, sp, #0
 8007964:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007968:	2300      	movs	r3, #0
 800796a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800796e:	2300      	movs	r3, #0
 8007970:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007980:	2500      	movs	r5, #0
 8007982:	ea54 0305 	orrs.w	r3, r4, r5
 8007986:	d049      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800798c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800798e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007992:	d02f      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007994:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007998:	d828      	bhi.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800799a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800799e:	d01a      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80079a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079a4:	d822      	bhi.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d003      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80079aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079ae:	d007      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80079b0:	e01c      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b2:	4bb8      	ldr	r3, [pc, #736]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b6:	4ab7      	ldr	r2, [pc, #732]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80079be:	e01a      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079c4:	3308      	adds	r3, #8
 80079c6:	2102      	movs	r1, #2
 80079c8:	4618      	mov	r0, r3
 80079ca:	f002 fb61 	bl	800a090 <RCCEx_PLL2_Config>
 80079ce:	4603      	mov	r3, r0
 80079d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80079d4:	e00f      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079da:	3328      	adds	r3, #40	; 0x28
 80079dc:	2102      	movs	r1, #2
 80079de:	4618      	mov	r0, r3
 80079e0:	f002 fc08 	bl	800a1f4 <RCCEx_PLL3_Config>
 80079e4:	4603      	mov	r3, r0
 80079e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80079ea:	e004      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079f2:	e000      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80079f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10a      	bne.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80079fe:	4ba5      	ldr	r3, [pc, #660]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a02:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a0c:	4aa1      	ldr	r2, [pc, #644]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a0e:	430b      	orrs	r3, r1
 8007a10:	6513      	str	r3, [r2, #80]	; 0x50
 8007a12:	e003      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007a28:	f04f 0900 	mov.w	r9, #0
 8007a2c:	ea58 0309 	orrs.w	r3, r8, r9
 8007a30:	d047      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a38:	2b04      	cmp	r3, #4
 8007a3a:	d82a      	bhi.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007a3c:	a201      	add	r2, pc, #4	; (adr r2, 8007a44 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a42:	bf00      	nop
 8007a44:	08007a59 	.word	0x08007a59
 8007a48:	08007a67 	.word	0x08007a67
 8007a4c:	08007a7d 	.word	0x08007a7d
 8007a50:	08007a9b 	.word	0x08007a9b
 8007a54:	08007a9b 	.word	0x08007a9b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a58:	4b8e      	ldr	r3, [pc, #568]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5c:	4a8d      	ldr	r2, [pc, #564]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a64:	e01a      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f002 fb0e 	bl	800a090 <RCCEx_PLL2_Config>
 8007a74:	4603      	mov	r3, r0
 8007a76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a7a:	e00f      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a80:	3328      	adds	r3, #40	; 0x28
 8007a82:	2100      	movs	r1, #0
 8007a84:	4618      	mov	r0, r3
 8007a86:	f002 fbb5 	bl	800a1f4 <RCCEx_PLL3_Config>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a90:	e004      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a98:	e000      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007a9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10a      	bne.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007aa4:	4b7b      	ldr	r3, [pc, #492]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa8:	f023 0107 	bic.w	r1, r3, #7
 8007aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ab2:	4a78      	ldr	r2, [pc, #480]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ab4:	430b      	orrs	r3, r1
 8007ab6:	6513      	str	r3, [r2, #80]	; 0x50
 8007ab8:	e003      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007abe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aca:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007ace:	f04f 0b00 	mov.w	fp, #0
 8007ad2:	ea5a 030b 	orrs.w	r3, sl, fp
 8007ad6:	d04c      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ae2:	d030      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ae8:	d829      	bhi.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007aea:	2bc0      	cmp	r3, #192	; 0xc0
 8007aec:	d02d      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007aee:	2bc0      	cmp	r3, #192	; 0xc0
 8007af0:	d825      	bhi.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007af2:	2b80      	cmp	r3, #128	; 0x80
 8007af4:	d018      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007af6:	2b80      	cmp	r3, #128	; 0x80
 8007af8:	d821      	bhi.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d002      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007afe:	2b40      	cmp	r3, #64	; 0x40
 8007b00:	d007      	beq.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007b02:	e01c      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b04:	4b63      	ldr	r3, [pc, #396]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b08:	4a62      	ldr	r2, [pc, #392]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007b10:	e01c      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b16:	3308      	adds	r3, #8
 8007b18:	2100      	movs	r1, #0
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f002 fab8 	bl	800a090 <RCCEx_PLL2_Config>
 8007b20:	4603      	mov	r3, r0
 8007b22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007b26:	e011      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b2c:	3328      	adds	r3, #40	; 0x28
 8007b2e:	2100      	movs	r1, #0
 8007b30:	4618      	mov	r0, r3
 8007b32:	f002 fb5f 	bl	800a1f4 <RCCEx_PLL3_Config>
 8007b36:	4603      	mov	r3, r0
 8007b38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007b3c:	e006      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b44:	e002      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007b46:	bf00      	nop
 8007b48:	e000      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007b4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10a      	bne.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007b54:	4b4f      	ldr	r3, [pc, #316]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b58:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b62:	4a4c      	ldr	r2, [pc, #304]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b64:	430b      	orrs	r3, r1
 8007b66:	6513      	str	r3, [r2, #80]	; 0x50
 8007b68:	e003      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007b7e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007b82:	2300      	movs	r3, #0
 8007b84:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007b88:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	d053      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007b9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b9e:	d035      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007ba0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ba4:	d82e      	bhi.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007ba6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007baa:	d031      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007bac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007bb0:	d828      	bhi.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bb6:	d01a      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bbc:	d822      	bhi.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007bc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bc6:	d007      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007bc8:	e01c      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bca:	4b32      	ldr	r3, [pc, #200]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bce:	4a31      	ldr	r2, [pc, #196]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bd6:	e01c      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bdc:	3308      	adds	r3, #8
 8007bde:	2100      	movs	r1, #0
 8007be0:	4618      	mov	r0, r3
 8007be2:	f002 fa55 	bl	800a090 <RCCEx_PLL2_Config>
 8007be6:	4603      	mov	r3, r0
 8007be8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007bec:	e011      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bf2:	3328      	adds	r3, #40	; 0x28
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f002 fafc 	bl	800a1f4 <RCCEx_PLL3_Config>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c02:	e006      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c0a:	e002      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007c0c:	bf00      	nop
 8007c0e:	e000      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007c10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10b      	bne.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007c1a:	4b1e      	ldr	r3, [pc, #120]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c1e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007c2a:	4a1a      	ldr	r2, [pc, #104]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c2c:	430b      	orrs	r3, r1
 8007c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8007c30:	e003      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c42:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007c46:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c50:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007c54:	460b      	mov	r3, r1
 8007c56:	4313      	orrs	r3, r2
 8007c58:	d056      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c66:	d038      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007c68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c6c:	d831      	bhi.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c72:	d034      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007c74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c78:	d82b      	bhi.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c7e:	d01d      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007c80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c84:	d825      	bhi.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d006      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007c8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c8e:	d00a      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007c90:	e01f      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c92:	bf00      	nop
 8007c94:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c98:	4ba2      	ldr	r3, [pc, #648]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9c:	4aa1      	ldr	r2, [pc, #644]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ca2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ca4:	e01c      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007caa:	3308      	adds	r3, #8
 8007cac:	2100      	movs	r1, #0
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f002 f9ee 	bl	800a090 <RCCEx_PLL2_Config>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007cba:	e011      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cc0:	3328      	adds	r3, #40	; 0x28
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f002 fa95 	bl	800a1f4 <RCCEx_PLL3_Config>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007cd0:	e006      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007cd8:	e002      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007cda:	bf00      	nop
 8007cdc:	e000      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007cde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10b      	bne.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007ce8:	4b8e      	ldr	r3, [pc, #568]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cec:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cf4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007cf8:	4a8a      	ldr	r2, [pc, #552]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cfa:	430b      	orrs	r3, r1
 8007cfc:	6593      	str	r3, [r2, #88]	; 0x58
 8007cfe:	e003      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d10:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007d14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007d1e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007d22:	460b      	mov	r3, r1
 8007d24:	4313      	orrs	r3, r2
 8007d26:	d03a      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d2e:	2b30      	cmp	r3, #48	; 0x30
 8007d30:	d01f      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007d32:	2b30      	cmp	r3, #48	; 0x30
 8007d34:	d819      	bhi.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007d36:	2b20      	cmp	r3, #32
 8007d38:	d00c      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007d3a:	2b20      	cmp	r3, #32
 8007d3c:	d815      	bhi.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d019      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007d42:	2b10      	cmp	r3, #16
 8007d44:	d111      	bne.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d46:	4b77      	ldr	r3, [pc, #476]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4a:	4a76      	ldr	r2, [pc, #472]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007d52:	e011      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d58:	3308      	adds	r3, #8
 8007d5a:	2102      	movs	r1, #2
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f002 f997 	bl	800a090 <RCCEx_PLL2_Config>
 8007d62:	4603      	mov	r3, r0
 8007d64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007d68:	e006      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d70:	e002      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007d72:	bf00      	nop
 8007d74:	e000      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007d76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10a      	bne.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007d80:	4b68      	ldr	r3, [pc, #416]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d84:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d8e:	4a65      	ldr	r2, [pc, #404]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d90:	430b      	orrs	r3, r1
 8007d92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d94:	e003      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007daa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007dae:	2300      	movs	r3, #0
 8007db0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007db4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007db8:	460b      	mov	r3, r1
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	d051      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dc8:	d035      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007dca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dce:	d82e      	bhi.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007dd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007dd4:	d031      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007dd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007dda:	d828      	bhi.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007de0:	d01a      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007de6:	d822      	bhi.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d003      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007df0:	d007      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007df2:	e01c      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007df4:	4b4b      	ldr	r3, [pc, #300]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df8:	4a4a      	ldr	r2, [pc, #296]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e00:	e01c      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e06:	3308      	adds	r3, #8
 8007e08:	2100      	movs	r1, #0
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f002 f940 	bl	800a090 <RCCEx_PLL2_Config>
 8007e10:	4603      	mov	r3, r0
 8007e12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e16:	e011      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e1c:	3328      	adds	r3, #40	; 0x28
 8007e1e:	2100      	movs	r1, #0
 8007e20:	4618      	mov	r0, r3
 8007e22:	f002 f9e7 	bl	800a1f4 <RCCEx_PLL3_Config>
 8007e26:	4603      	mov	r3, r0
 8007e28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e2c:	e006      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e34:	e002      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007e36:	bf00      	nop
 8007e38:	e000      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007e3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10a      	bne.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007e44:	4b37      	ldr	r3, [pc, #220]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e48:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e52:	4a34      	ldr	r2, [pc, #208]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e54:	430b      	orrs	r3, r1
 8007e56:	6513      	str	r3, [r2, #80]	; 0x50
 8007e58:	e003      	b.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007e6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e72:	2300      	movs	r3, #0
 8007e74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007e78:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	d056      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e8c:	d033      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007e8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e92:	d82c      	bhi.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007e94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e98:	d02f      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007e9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e9e:	d826      	bhi.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007ea0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ea4:	d02b      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007ea6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007eaa:	d820      	bhi.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007eac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007eb0:	d012      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007eb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007eb6:	d81a      	bhi.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d022      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ec0:	d115      	bne.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ec6:	3308      	adds	r3, #8
 8007ec8:	2101      	movs	r1, #1
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f002 f8e0 	bl	800a090 <RCCEx_PLL2_Config>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007ed6:	e015      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007edc:	3328      	adds	r3, #40	; 0x28
 8007ede:	2101      	movs	r1, #1
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f002 f987 	bl	800a1f4 <RCCEx_PLL3_Config>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007eec:	e00a      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ef4:	e006      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ef6:	bf00      	nop
 8007ef8:	e004      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007efa:	bf00      	nop
 8007efc:	e002      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007efe:	bf00      	nop
 8007f00:	e000      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007f02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10d      	bne.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007f0c:	4b05      	ldr	r3, [pc, #20]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f10:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f1a:	4a02      	ldr	r2, [pc, #8]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f1c:	430b      	orrs	r3, r1
 8007f1e:	6513      	str	r3, [r2, #80]	; 0x50
 8007f20:	e006      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007f22:	bf00      	nop
 8007f24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007f3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f40:	2300      	movs	r3, #0
 8007f42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f46:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	d055      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f5c:	d033      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007f5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f62:	d82c      	bhi.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f68:	d02f      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f6e:	d826      	bhi.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f74:	d02b      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007f76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f7a:	d820      	bhi.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f80:	d012      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007f82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f86:	d81a      	bhi.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d022      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007f8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f90:	d115      	bne.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f96:	3308      	adds	r3, #8
 8007f98:	2101      	movs	r1, #1
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f002 f878 	bl	800a090 <RCCEx_PLL2_Config>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007fa6:	e015      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fac:	3328      	adds	r3, #40	; 0x28
 8007fae:	2101      	movs	r1, #1
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f002 f91f 	bl	800a1f4 <RCCEx_PLL3_Config>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007fbc:	e00a      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007fc4:	e006      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007fc6:	bf00      	nop
 8007fc8:	e004      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007fca:	bf00      	nop
 8007fcc:	e002      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007fce:	bf00      	nop
 8007fd0:	e000      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10b      	bne.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007fdc:	4ba3      	ldr	r3, [pc, #652]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fe0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fe8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007fec:	4a9f      	ldr	r2, [pc, #636]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fee:	430b      	orrs	r3, r1
 8007ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8007ff2:	e003      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ff8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008004:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008008:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800800c:	2300      	movs	r3, #0
 800800e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008012:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008016:	460b      	mov	r3, r1
 8008018:	4313      	orrs	r3, r2
 800801a:	d037      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800801c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008026:	d00e      	beq.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800802c:	d816      	bhi.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800802e:	2b00      	cmp	r3, #0
 8008030:	d018      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008032:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008036:	d111      	bne.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008038:	4b8c      	ldr	r3, [pc, #560]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800803a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803c:	4a8b      	ldr	r2, [pc, #556]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800803e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008042:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008044:	e00f      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800804a:	3308      	adds	r3, #8
 800804c:	2101      	movs	r1, #1
 800804e:	4618      	mov	r0, r3
 8008050:	f002 f81e 	bl	800a090 <RCCEx_PLL2_Config>
 8008054:	4603      	mov	r3, r0
 8008056:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800805a:	e004      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008062:	e000      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008064:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008066:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10a      	bne.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800806e:	4b7f      	ldr	r3, [pc, #508]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008072:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800807a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800807c:	4a7b      	ldr	r2, [pc, #492]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800807e:	430b      	orrs	r3, r1
 8008080:	6513      	str	r3, [r2, #80]	; 0x50
 8008082:	e003      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008084:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008088:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800808c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008094:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008098:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800809c:	2300      	movs	r3, #0
 800809e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80080a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80080a6:	460b      	mov	r3, r1
 80080a8:	4313      	orrs	r3, r2
 80080aa:	d039      	beq.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80080ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080b2:	2b03      	cmp	r3, #3
 80080b4:	d81c      	bhi.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80080b6:	a201      	add	r2, pc, #4	; (adr r2, 80080bc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80080b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080bc:	080080f9 	.word	0x080080f9
 80080c0:	080080cd 	.word	0x080080cd
 80080c4:	080080db 	.word	0x080080db
 80080c8:	080080f9 	.word	0x080080f9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080cc:	4b67      	ldr	r3, [pc, #412]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d0:	4a66      	ldr	r2, [pc, #408]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80080d8:	e00f      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080de:	3308      	adds	r3, #8
 80080e0:	2102      	movs	r1, #2
 80080e2:	4618      	mov	r0, r3
 80080e4:	f001 ffd4 	bl	800a090 <RCCEx_PLL2_Config>
 80080e8:	4603      	mov	r3, r0
 80080ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80080ee:	e004      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80080f6:	e000      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80080f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10a      	bne.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008102:	4b5a      	ldr	r3, [pc, #360]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008106:	f023 0103 	bic.w	r1, r3, #3
 800810a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800810e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008110:	4a56      	ldr	r2, [pc, #344]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008112:	430b      	orrs	r3, r1
 8008114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008116:	e003      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008118:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800811c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008128:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800812c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008130:	2300      	movs	r3, #0
 8008132:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008136:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800813a:	460b      	mov	r3, r1
 800813c:	4313      	orrs	r3, r2
 800813e:	f000 809f 	beq.w	8008280 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008142:	4b4b      	ldr	r3, [pc, #300]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a4a      	ldr	r2, [pc, #296]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800814c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800814e:	f7f9 fc63 	bl	8001a18 <HAL_GetTick>
 8008152:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008156:	e00b      	b.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008158:	f7f9 fc5e 	bl	8001a18 <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	2b64      	cmp	r3, #100	; 0x64
 8008166:	d903      	bls.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800816e:	e005      	b.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008170:	4b3f      	ldr	r3, [pc, #252]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008178:	2b00      	cmp	r3, #0
 800817a:	d0ed      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800817c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008180:	2b00      	cmp	r3, #0
 8008182:	d179      	bne.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008184:	4b39      	ldr	r3, [pc, #228]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008186:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800818c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008190:	4053      	eors	r3, r2
 8008192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008196:	2b00      	cmp	r3, #0
 8008198:	d015      	beq.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800819a:	4b34      	ldr	r3, [pc, #208]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800819c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800819e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80081a6:	4b31      	ldr	r3, [pc, #196]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081aa:	4a30      	ldr	r2, [pc, #192]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081b0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80081b2:	4b2e      	ldr	r3, [pc, #184]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b6:	4a2d      	ldr	r2, [pc, #180]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081bc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80081be:	4a2b      	ldr	r2, [pc, #172]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80081c4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80081c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80081ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081d2:	d118      	bne.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081d4:	f7f9 fc20 	bl	8001a18 <HAL_GetTick>
 80081d8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081dc:	e00d      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081de:	f7f9 fc1b 	bl	8001a18 <HAL_GetTick>
 80081e2:	4602      	mov	r2, r0
 80081e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80081e8:	1ad2      	subs	r2, r2, r3
 80081ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d903      	bls.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80081f8:	e005      	b.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081fa:	4b1c      	ldr	r3, [pc, #112]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081fe:	f003 0302 	and.w	r3, r3, #2
 8008202:	2b00      	cmp	r3, #0
 8008204:	d0eb      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008206:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800820a:	2b00      	cmp	r3, #0
 800820c:	d129      	bne.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800820e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008212:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800821a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800821e:	d10e      	bne.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008220:	4b12      	ldr	r3, [pc, #72]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800822c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008230:	091a      	lsrs	r2, r3, #4
 8008232:	4b10      	ldr	r3, [pc, #64]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008234:	4013      	ands	r3, r2
 8008236:	4a0d      	ldr	r2, [pc, #52]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008238:	430b      	orrs	r3, r1
 800823a:	6113      	str	r3, [r2, #16]
 800823c:	e005      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800823e:	4b0b      	ldr	r3, [pc, #44]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	4a0a      	ldr	r2, [pc, #40]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008244:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008248:	6113      	str	r3, [r2, #16]
 800824a:	4b08      	ldr	r3, [pc, #32]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800824c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800824e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008252:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800825a:	4a04      	ldr	r2, [pc, #16]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800825c:	430b      	orrs	r3, r1
 800825e:	6713      	str	r3, [r2, #112]	; 0x70
 8008260:	e00e      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008262:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008266:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800826a:	e009      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800826c:	58024400 	.word	0x58024400
 8008270:	58024800 	.word	0x58024800
 8008274:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008278:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800827c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008288:	f002 0301 	and.w	r3, r2, #1
 800828c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008290:	2300      	movs	r3, #0
 8008292:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008296:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800829a:	460b      	mov	r3, r1
 800829c:	4313      	orrs	r3, r2
 800829e:	f000 8089 	beq.w	80083b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80082a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082a8:	2b28      	cmp	r3, #40	; 0x28
 80082aa:	d86b      	bhi.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80082ac:	a201      	add	r2, pc, #4	; (adr r2, 80082b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80082ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b2:	bf00      	nop
 80082b4:	0800838d 	.word	0x0800838d
 80082b8:	08008385 	.word	0x08008385
 80082bc:	08008385 	.word	0x08008385
 80082c0:	08008385 	.word	0x08008385
 80082c4:	08008385 	.word	0x08008385
 80082c8:	08008385 	.word	0x08008385
 80082cc:	08008385 	.word	0x08008385
 80082d0:	08008385 	.word	0x08008385
 80082d4:	08008359 	.word	0x08008359
 80082d8:	08008385 	.word	0x08008385
 80082dc:	08008385 	.word	0x08008385
 80082e0:	08008385 	.word	0x08008385
 80082e4:	08008385 	.word	0x08008385
 80082e8:	08008385 	.word	0x08008385
 80082ec:	08008385 	.word	0x08008385
 80082f0:	08008385 	.word	0x08008385
 80082f4:	0800836f 	.word	0x0800836f
 80082f8:	08008385 	.word	0x08008385
 80082fc:	08008385 	.word	0x08008385
 8008300:	08008385 	.word	0x08008385
 8008304:	08008385 	.word	0x08008385
 8008308:	08008385 	.word	0x08008385
 800830c:	08008385 	.word	0x08008385
 8008310:	08008385 	.word	0x08008385
 8008314:	0800838d 	.word	0x0800838d
 8008318:	08008385 	.word	0x08008385
 800831c:	08008385 	.word	0x08008385
 8008320:	08008385 	.word	0x08008385
 8008324:	08008385 	.word	0x08008385
 8008328:	08008385 	.word	0x08008385
 800832c:	08008385 	.word	0x08008385
 8008330:	08008385 	.word	0x08008385
 8008334:	0800838d 	.word	0x0800838d
 8008338:	08008385 	.word	0x08008385
 800833c:	08008385 	.word	0x08008385
 8008340:	08008385 	.word	0x08008385
 8008344:	08008385 	.word	0x08008385
 8008348:	08008385 	.word	0x08008385
 800834c:	08008385 	.word	0x08008385
 8008350:	08008385 	.word	0x08008385
 8008354:	0800838d 	.word	0x0800838d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800835c:	3308      	adds	r3, #8
 800835e:	2101      	movs	r1, #1
 8008360:	4618      	mov	r0, r3
 8008362:	f001 fe95 	bl	800a090 <RCCEx_PLL2_Config>
 8008366:	4603      	mov	r3, r0
 8008368:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800836c:	e00f      	b.n	800838e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800836e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008372:	3328      	adds	r3, #40	; 0x28
 8008374:	2101      	movs	r1, #1
 8008376:	4618      	mov	r0, r3
 8008378:	f001 ff3c 	bl	800a1f4 <RCCEx_PLL3_Config>
 800837c:	4603      	mov	r3, r0
 800837e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008382:	e004      	b.n	800838e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800838a:	e000      	b.n	800838e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800838c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800838e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008392:	2b00      	cmp	r3, #0
 8008394:	d10a      	bne.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008396:	4bbf      	ldr	r3, [pc, #764]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800839a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800839e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083a4:	4abb      	ldr	r2, [pc, #748]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083a6:	430b      	orrs	r3, r1
 80083a8:	6553      	str	r3, [r2, #84]	; 0x54
 80083aa:	e003      	b.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80083b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083bc:	f002 0302 	and.w	r3, r2, #2
 80083c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083c4:	2300      	movs	r3, #0
 80083c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80083ca:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80083ce:	460b      	mov	r3, r1
 80083d0:	4313      	orrs	r3, r2
 80083d2:	d041      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80083d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083da:	2b05      	cmp	r3, #5
 80083dc:	d824      	bhi.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80083de:	a201      	add	r2, pc, #4	; (adr r2, 80083e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80083e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e4:	08008431 	.word	0x08008431
 80083e8:	080083fd 	.word	0x080083fd
 80083ec:	08008413 	.word	0x08008413
 80083f0:	08008431 	.word	0x08008431
 80083f4:	08008431 	.word	0x08008431
 80083f8:	08008431 	.word	0x08008431
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008400:	3308      	adds	r3, #8
 8008402:	2101      	movs	r1, #1
 8008404:	4618      	mov	r0, r3
 8008406:	f001 fe43 	bl	800a090 <RCCEx_PLL2_Config>
 800840a:	4603      	mov	r3, r0
 800840c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008410:	e00f      	b.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008416:	3328      	adds	r3, #40	; 0x28
 8008418:	2101      	movs	r1, #1
 800841a:	4618      	mov	r0, r3
 800841c:	f001 feea 	bl	800a1f4 <RCCEx_PLL3_Config>
 8008420:	4603      	mov	r3, r0
 8008422:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008426:	e004      	b.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800842e:	e000      	b.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008432:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10a      	bne.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800843a:	4b96      	ldr	r3, [pc, #600]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800843c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800843e:	f023 0107 	bic.w	r1, r3, #7
 8008442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008446:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008448:	4a92      	ldr	r2, [pc, #584]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800844a:	430b      	orrs	r3, r1
 800844c:	6553      	str	r3, [r2, #84]	; 0x54
 800844e:	e003      	b.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008450:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008454:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800845c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008460:	f002 0304 	and.w	r3, r2, #4
 8008464:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008468:	2300      	movs	r3, #0
 800846a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800846e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008472:	460b      	mov	r3, r1
 8008474:	4313      	orrs	r3, r2
 8008476:	d044      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800847c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008480:	2b05      	cmp	r3, #5
 8008482:	d825      	bhi.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008484:	a201      	add	r2, pc, #4	; (adr r2, 800848c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848a:	bf00      	nop
 800848c:	080084d9 	.word	0x080084d9
 8008490:	080084a5 	.word	0x080084a5
 8008494:	080084bb 	.word	0x080084bb
 8008498:	080084d9 	.word	0x080084d9
 800849c:	080084d9 	.word	0x080084d9
 80084a0:	080084d9 	.word	0x080084d9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084a8:	3308      	adds	r3, #8
 80084aa:	2101      	movs	r1, #1
 80084ac:	4618      	mov	r0, r3
 80084ae:	f001 fdef 	bl	800a090 <RCCEx_PLL2_Config>
 80084b2:	4603      	mov	r3, r0
 80084b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80084b8:	e00f      	b.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084be:	3328      	adds	r3, #40	; 0x28
 80084c0:	2101      	movs	r1, #1
 80084c2:	4618      	mov	r0, r3
 80084c4:	f001 fe96 	bl	800a1f4 <RCCEx_PLL3_Config>
 80084c8:	4603      	mov	r3, r0
 80084ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80084ce:	e004      	b.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80084d6:	e000      	b.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80084d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10b      	bne.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80084e2:	4b6c      	ldr	r3, [pc, #432]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e6:	f023 0107 	bic.w	r1, r3, #7
 80084ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084f2:	4a68      	ldr	r2, [pc, #416]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084f4:	430b      	orrs	r3, r1
 80084f6:	6593      	str	r3, [r2, #88]	; 0x58
 80084f8:	e003      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850a:	f002 0320 	and.w	r3, r2, #32
 800850e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008512:	2300      	movs	r3, #0
 8008514:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008518:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800851c:	460b      	mov	r3, r1
 800851e:	4313      	orrs	r3, r2
 8008520:	d055      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800852a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800852e:	d033      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008530:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008534:	d82c      	bhi.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800853a:	d02f      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800853c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008540:	d826      	bhi.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008542:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008546:	d02b      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008548:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800854c:	d820      	bhi.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800854e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008552:	d012      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008558:	d81a      	bhi.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800855a:	2b00      	cmp	r3, #0
 800855c:	d022      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800855e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008562:	d115      	bne.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008568:	3308      	adds	r3, #8
 800856a:	2100      	movs	r1, #0
 800856c:	4618      	mov	r0, r3
 800856e:	f001 fd8f 	bl	800a090 <RCCEx_PLL2_Config>
 8008572:	4603      	mov	r3, r0
 8008574:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008578:	e015      	b.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800857a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800857e:	3328      	adds	r3, #40	; 0x28
 8008580:	2102      	movs	r1, #2
 8008582:	4618      	mov	r0, r3
 8008584:	f001 fe36 	bl	800a1f4 <RCCEx_PLL3_Config>
 8008588:	4603      	mov	r3, r0
 800858a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800858e:	e00a      	b.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008596:	e006      	b.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008598:	bf00      	nop
 800859a:	e004      	b.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800859c:	bf00      	nop
 800859e:	e002      	b.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80085a0:	bf00      	nop
 80085a2:	e000      	b.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80085a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10b      	bne.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80085ae:	4b39      	ldr	r3, [pc, #228]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085b2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80085b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085be:	4a35      	ldr	r2, [pc, #212]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085c0:	430b      	orrs	r3, r1
 80085c2:	6553      	str	r3, [r2, #84]	; 0x54
 80085c4:	e003      	b.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80085ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80085da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80085de:	2300      	movs	r3, #0
 80085e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80085e4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80085e8:	460b      	mov	r3, r1
 80085ea:	4313      	orrs	r3, r2
 80085ec:	d058      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80085ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80085fa:	d033      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80085fc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008600:	d82c      	bhi.n	800865c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008606:	d02f      	beq.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800860c:	d826      	bhi.n	800865c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800860e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008612:	d02b      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008614:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008618:	d820      	bhi.n	800865c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800861a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800861e:	d012      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008624:	d81a      	bhi.n	800865c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008626:	2b00      	cmp	r3, #0
 8008628:	d022      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800862a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800862e:	d115      	bne.n	800865c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008630:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008634:	3308      	adds	r3, #8
 8008636:	2100      	movs	r1, #0
 8008638:	4618      	mov	r0, r3
 800863a:	f001 fd29 	bl	800a090 <RCCEx_PLL2_Config>
 800863e:	4603      	mov	r3, r0
 8008640:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008644:	e015      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800864a:	3328      	adds	r3, #40	; 0x28
 800864c:	2102      	movs	r1, #2
 800864e:	4618      	mov	r0, r3
 8008650:	f001 fdd0 	bl	800a1f4 <RCCEx_PLL3_Config>
 8008654:	4603      	mov	r3, r0
 8008656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800865a:	e00a      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008662:	e006      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008664:	bf00      	nop
 8008666:	e004      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008668:	bf00      	nop
 800866a:	e002      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800866c:	bf00      	nop
 800866e:	e000      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008672:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10e      	bne.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800867a:	4b06      	ldr	r3, [pc, #24]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800867c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800867e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008686:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800868a:	4a02      	ldr	r2, [pc, #8]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800868c:	430b      	orrs	r3, r1
 800868e:	6593      	str	r3, [r2, #88]	; 0x58
 8008690:	e006      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008692:	bf00      	nop
 8008694:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008698:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800869c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80086a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80086ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80086b0:	2300      	movs	r3, #0
 80086b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80086b6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80086ba:	460b      	mov	r3, r1
 80086bc:	4313      	orrs	r3, r2
 80086be:	d055      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80086c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80086c8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80086cc:	d033      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80086ce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80086d2:	d82c      	bhi.n	800872e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80086d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086d8:	d02f      	beq.n	800873a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80086da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086de:	d826      	bhi.n	800872e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80086e0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80086e4:	d02b      	beq.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80086e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80086ea:	d820      	bhi.n	800872e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80086ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086f0:	d012      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80086f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086f6:	d81a      	bhi.n	800872e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d022      	beq.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80086fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008700:	d115      	bne.n	800872e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008706:	3308      	adds	r3, #8
 8008708:	2100      	movs	r1, #0
 800870a:	4618      	mov	r0, r3
 800870c:	f001 fcc0 	bl	800a090 <RCCEx_PLL2_Config>
 8008710:	4603      	mov	r3, r0
 8008712:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008716:	e015      	b.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800871c:	3328      	adds	r3, #40	; 0x28
 800871e:	2102      	movs	r1, #2
 8008720:	4618      	mov	r0, r3
 8008722:	f001 fd67 	bl	800a1f4 <RCCEx_PLL3_Config>
 8008726:	4603      	mov	r3, r0
 8008728:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800872c:	e00a      	b.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008734:	e006      	b.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008736:	bf00      	nop
 8008738:	e004      	b.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800873a:	bf00      	nop
 800873c:	e002      	b.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800873e:	bf00      	nop
 8008740:	e000      	b.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008742:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008744:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10b      	bne.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800874c:	4ba1      	ldr	r3, [pc, #644]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800874e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008750:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008758:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800875c:	4a9d      	ldr	r2, [pc, #628]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800875e:	430b      	orrs	r3, r1
 8008760:	6593      	str	r3, [r2, #88]	; 0x58
 8008762:	e003      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008764:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008768:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800876c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008774:	f002 0308 	and.w	r3, r2, #8
 8008778:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800877c:	2300      	movs	r3, #0
 800877e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008782:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008786:	460b      	mov	r3, r1
 8008788:	4313      	orrs	r3, r2
 800878a:	d01e      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800878c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008798:	d10c      	bne.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800879a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800879e:	3328      	adds	r3, #40	; 0x28
 80087a0:	2102      	movs	r1, #2
 80087a2:	4618      	mov	r0, r3
 80087a4:	f001 fd26 	bl	800a1f4 <RCCEx_PLL3_Config>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d002      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80087b4:	4b87      	ldr	r3, [pc, #540]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087c4:	4a83      	ldr	r2, [pc, #524]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087c6:	430b      	orrs	r3, r1
 80087c8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80087ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d2:	f002 0310 	and.w	r3, r2, #16
 80087d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80087da:	2300      	movs	r3, #0
 80087dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80087e0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80087e4:	460b      	mov	r3, r1
 80087e6:	4313      	orrs	r3, r2
 80087e8:	d01e      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80087ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80087f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087f6:	d10c      	bne.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80087f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087fc:	3328      	adds	r3, #40	; 0x28
 80087fe:	2102      	movs	r1, #2
 8008800:	4618      	mov	r0, r3
 8008802:	f001 fcf7 	bl	800a1f4 <RCCEx_PLL3_Config>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d002      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008812:	4b70      	ldr	r3, [pc, #448]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008816:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800881a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800881e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008822:	4a6c      	ldr	r2, [pc, #432]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008824:	430b      	orrs	r3, r1
 8008826:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800882c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008830:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008834:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008838:	2300      	movs	r3, #0
 800883a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800883e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008842:	460b      	mov	r3, r1
 8008844:	4313      	orrs	r3, r2
 8008846:	d03e      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800884c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008850:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008854:	d022      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008856:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800885a:	d81b      	bhi.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800885c:	2b00      	cmp	r3, #0
 800885e:	d003      	beq.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008864:	d00b      	beq.n	800887e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008866:	e015      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800886c:	3308      	adds	r3, #8
 800886e:	2100      	movs	r1, #0
 8008870:	4618      	mov	r0, r3
 8008872:	f001 fc0d 	bl	800a090 <RCCEx_PLL2_Config>
 8008876:	4603      	mov	r3, r0
 8008878:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800887c:	e00f      	b.n	800889e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800887e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008882:	3328      	adds	r3, #40	; 0x28
 8008884:	2102      	movs	r1, #2
 8008886:	4618      	mov	r0, r3
 8008888:	f001 fcb4 	bl	800a1f4 <RCCEx_PLL3_Config>
 800888c:	4603      	mov	r3, r0
 800888e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008892:	e004      	b.n	800889e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800889a:	e000      	b.n	800889e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800889c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800889e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d10b      	bne.n	80088be <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80088a6:	4b4b      	ldr	r3, [pc, #300]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088aa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80088ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80088b6:	4a47      	ldr	r2, [pc, #284]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088b8:	430b      	orrs	r3, r1
 80088ba:	6593      	str	r3, [r2, #88]	; 0x58
 80088bc:	e003      	b.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80088c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ce:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80088d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80088d4:	2300      	movs	r3, #0
 80088d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088d8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80088dc:	460b      	mov	r3, r1
 80088de:	4313      	orrs	r3, r2
 80088e0:	d03b      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80088e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088ee:	d01f      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80088f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088f4:	d818      	bhi.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80088f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088fa:	d003      	beq.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80088fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008900:	d007      	beq.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008902:	e011      	b.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008904:	4b33      	ldr	r3, [pc, #204]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008908:	4a32      	ldr	r2, [pc, #200]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800890a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800890e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008910:	e00f      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008916:	3328      	adds	r3, #40	; 0x28
 8008918:	2101      	movs	r1, #1
 800891a:	4618      	mov	r0, r3
 800891c:	f001 fc6a 	bl	800a1f4 <RCCEx_PLL3_Config>
 8008920:	4603      	mov	r3, r0
 8008922:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008926:	e004      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800892e:	e000      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008932:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10b      	bne.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800893a:	4b26      	ldr	r3, [pc, #152]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800893c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800893e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800894a:	4a22      	ldr	r2, [pc, #136]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800894c:	430b      	orrs	r3, r1
 800894e:	6553      	str	r3, [r2, #84]	; 0x54
 8008950:	e003      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008952:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008956:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800895a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800895e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008962:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008966:	673b      	str	r3, [r7, #112]	; 0x70
 8008968:	2300      	movs	r3, #0
 800896a:	677b      	str	r3, [r7, #116]	; 0x74
 800896c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008970:	460b      	mov	r3, r1
 8008972:	4313      	orrs	r3, r2
 8008974:	d034      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800897a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800897c:	2b00      	cmp	r3, #0
 800897e:	d003      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008984:	d007      	beq.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008986:	e011      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008988:	4b12      	ldr	r3, [pc, #72]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800898a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898c:	4a11      	ldr	r2, [pc, #68]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800898e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008992:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008994:	e00e      	b.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800899a:	3308      	adds	r3, #8
 800899c:	2102      	movs	r1, #2
 800899e:	4618      	mov	r0, r3
 80089a0:	f001 fb76 	bl	800a090 <RCCEx_PLL2_Config>
 80089a4:	4603      	mov	r3, r0
 80089a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80089aa:	e003      	b.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80089b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10d      	bne.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80089bc:	4b05      	ldr	r3, [pc, #20]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80089c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089ca:	4a02      	ldr	r2, [pc, #8]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089cc:	430b      	orrs	r3, r1
 80089ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80089d0:	e006      	b.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80089d2:	bf00      	nop
 80089d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80089e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80089ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80089ee:	2300      	movs	r3, #0
 80089f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80089f2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80089f6:	460b      	mov	r3, r1
 80089f8:	4313      	orrs	r3, r2
 80089fa:	d00c      	beq.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80089fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a00:	3328      	adds	r3, #40	; 0x28
 8008a02:	2102      	movs	r1, #2
 8008a04:	4618      	mov	r0, r3
 8008a06:	f001 fbf5 	bl	800a1f4 <RCCEx_PLL3_Config>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d002      	beq.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008a22:	663b      	str	r3, [r7, #96]	; 0x60
 8008a24:	2300      	movs	r3, #0
 8008a26:	667b      	str	r3, [r7, #100]	; 0x64
 8008a28:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	d038      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a3e:	d018      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008a40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a44:	d811      	bhi.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a4a:	d014      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a50:	d80b      	bhi.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d011      	beq.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a5a:	d106      	bne.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a5c:	4bc3      	ldr	r3, [pc, #780]	; (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a60:	4ac2      	ldr	r2, [pc, #776]	; (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008a68:	e008      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a70:	e004      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008a72:	bf00      	nop
 8008a74:	e002      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008a76:	bf00      	nop
 8008a78:	e000      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008a7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10b      	bne.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008a84:	4bb9      	ldr	r3, [pc, #740]	; (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a88:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a94:	4ab5      	ldr	r2, [pc, #724]	; (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a96:	430b      	orrs	r3, r1
 8008a98:	6553      	str	r3, [r2, #84]	; 0x54
 8008a9a:	e003      	b.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008aa0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aac:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008ab0:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ab6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008aba:	460b      	mov	r3, r1
 8008abc:	4313      	orrs	r3, r2
 8008abe:	d009      	beq.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008ac0:	4baa      	ldr	r3, [pc, #680]	; (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ace:	4aa7      	ldr	r2, [pc, #668]	; (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ad0:	430b      	orrs	r3, r1
 8008ad2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008adc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008ae0:	653b      	str	r3, [r7, #80]	; 0x50
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	657b      	str	r3, [r7, #84]	; 0x54
 8008ae6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008aea:	460b      	mov	r3, r1
 8008aec:	4313      	orrs	r3, r2
 8008aee:	d00a      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008af0:	4b9e      	ldr	r3, [pc, #632]	; (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008afc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b00:	4a9a      	ldr	r2, [pc, #616]	; (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b02:	430b      	orrs	r3, r1
 8008b04:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008b12:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b14:	2300      	movs	r3, #0
 8008b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b18:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	d009      	beq.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b22:	4b92      	ldr	r3, [pc, #584]	; (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b26:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b30:	4a8e      	ldr	r2, [pc, #568]	; (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b32:	430b      	orrs	r3, r1
 8008b34:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008b42:	643b      	str	r3, [r7, #64]	; 0x40
 8008b44:	2300      	movs	r3, #0
 8008b46:	647b      	str	r3, [r7, #68]	; 0x44
 8008b48:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	d00e      	beq.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008b52:	4b86      	ldr	r3, [pc, #536]	; (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	4a85      	ldr	r2, [pc, #532]	; (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b5c:	6113      	str	r3, [r2, #16]
 8008b5e:	4b83      	ldr	r3, [pc, #524]	; (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b60:	6919      	ldr	r1, [r3, #16]
 8008b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b66:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008b6a:	4a80      	ldr	r2, [pc, #512]	; (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b6c:	430b      	orrs	r3, r1
 8008b6e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b78:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008b7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b7e:	2300      	movs	r3, #0
 8008b80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b82:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008b86:	460b      	mov	r3, r1
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	d009      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008b8c:	4b77      	ldr	r3, [pc, #476]	; (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b90:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b9a:	4a74      	ldr	r2, [pc, #464]	; (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b9c:	430b      	orrs	r3, r1
 8008b9e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008bac:	633b      	str	r3, [r7, #48]	; 0x30
 8008bae:	2300      	movs	r3, #0
 8008bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8008bb2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	d00a      	beq.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008bbc:	4b6b      	ldr	r3, [pc, #428]	; (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bcc:	4a67      	ldr	r2, [pc, #412]	; (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bce:	430b      	orrs	r3, r1
 8008bd0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bda:	2100      	movs	r1, #0
 8008bdc:	62b9      	str	r1, [r7, #40]	; 0x28
 8008bde:	f003 0301 	and.w	r3, r3, #1
 8008be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008be4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008be8:	460b      	mov	r3, r1
 8008bea:	4313      	orrs	r3, r2
 8008bec:	d011      	beq.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bf2:	3308      	adds	r3, #8
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f001 fa4a 	bl	800a090 <RCCEx_PLL2_Config>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008c02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d003      	beq.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	6239      	str	r1, [r7, #32]
 8008c1e:	f003 0302 	and.w	r3, r3, #2
 8008c22:	627b      	str	r3, [r7, #36]	; 0x24
 8008c24:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	d011      	beq.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c32:	3308      	adds	r3, #8
 8008c34:	2101      	movs	r1, #1
 8008c36:	4618      	mov	r0, r3
 8008c38:	f001 fa2a 	bl	800a090 <RCCEx_PLL2_Config>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008c42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d003      	beq.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	61b9      	str	r1, [r7, #24]
 8008c5e:	f003 0304 	and.w	r3, r3, #4
 8008c62:	61fb      	str	r3, [r7, #28]
 8008c64:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	d011      	beq.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c72:	3308      	adds	r3, #8
 8008c74:	2102      	movs	r1, #2
 8008c76:	4618      	mov	r0, r3
 8008c78:	f001 fa0a 	bl	800a090 <RCCEx_PLL2_Config>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008c82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d003      	beq.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	6139      	str	r1, [r7, #16]
 8008c9e:	f003 0308 	and.w	r3, r3, #8
 8008ca2:	617b      	str	r3, [r7, #20]
 8008ca4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008ca8:	460b      	mov	r3, r1
 8008caa:	4313      	orrs	r3, r2
 8008cac:	d011      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cb2:	3328      	adds	r3, #40	; 0x28
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f001 fa9c 	bl	800a1f4 <RCCEx_PLL3_Config>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d003      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cda:	2100      	movs	r1, #0
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	f003 0310 	and.w	r3, r3, #16
 8008ce2:	60fb      	str	r3, [r7, #12]
 8008ce4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	4313      	orrs	r3, r2
 8008cec:	d011      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cf2:	3328      	adds	r3, #40	; 0x28
 8008cf4:	2101      	movs	r1, #1
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f001 fa7c 	bl	800a1f4 <RCCEx_PLL3_Config>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008d02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d003      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	6039      	str	r1, [r7, #0]
 8008d1e:	f003 0320 	and.w	r3, r3, #32
 8008d22:	607b      	str	r3, [r7, #4]
 8008d24:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	d011      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d32:	3328      	adds	r3, #40	; 0x28
 8008d34:	2102      	movs	r1, #2
 8008d36:	4618      	mov	r0, r3
 8008d38:	f001 fa5c 	bl	800a1f4 <RCCEx_PLL3_Config>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008d42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d003      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008d52:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d101      	bne.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	e000      	b.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008d66:	46bd      	mov	sp, r7
 8008d68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d6c:	58024400 	.word	0x58024400

08008d70 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b090      	sub	sp, #64	; 0x40
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d7e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008d82:	430b      	orrs	r3, r1
 8008d84:	f040 8094 	bne.w	8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008d88:	4b9e      	ldr	r3, [pc, #632]	; (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d8c:	f003 0307 	and.w	r3, r3, #7
 8008d90:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d94:	2b04      	cmp	r3, #4
 8008d96:	f200 8087 	bhi.w	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008d9a:	a201      	add	r2, pc, #4	; (adr r2, 8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da0:	08008db5 	.word	0x08008db5
 8008da4:	08008ddd 	.word	0x08008ddd
 8008da8:	08008e05 	.word	0x08008e05
 8008dac:	08008ea1 	.word	0x08008ea1
 8008db0:	08008e2d 	.word	0x08008e2d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008db4:	4b93      	ldr	r3, [pc, #588]	; (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dc0:	d108      	bne.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f001 f810 	bl	8009dec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dd0:	f000 bd45 	b.w	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dd8:	f000 bd41 	b.w	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ddc:	4b89      	ldr	r3, [pc, #548]	; (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008de4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008de8:	d108      	bne.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dea:	f107 0318 	add.w	r3, r7, #24
 8008dee:	4618      	mov	r0, r3
 8008df0:	f000 fd54 	bl	800989c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008df8:	f000 bd31 	b.w	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e00:	f000 bd2d 	b.w	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e04:	4b7f      	ldr	r3, [pc, #508]	; (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e10:	d108      	bne.n	8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e12:	f107 030c 	add.w	r3, r7, #12
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 fe94 	bl	8009b44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e20:	f000 bd1d 	b.w	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e24:	2300      	movs	r3, #0
 8008e26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e28:	f000 bd19 	b.w	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e2c:	4b75      	ldr	r3, [pc, #468]	; (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e34:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e36:	4b73      	ldr	r3, [pc, #460]	; (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f003 0304 	and.w	r3, r3, #4
 8008e3e:	2b04      	cmp	r3, #4
 8008e40:	d10c      	bne.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d109      	bne.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e48:	4b6e      	ldr	r3, [pc, #440]	; (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	08db      	lsrs	r3, r3, #3
 8008e4e:	f003 0303 	and.w	r3, r3, #3
 8008e52:	4a6d      	ldr	r2, [pc, #436]	; (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008e54:	fa22 f303 	lsr.w	r3, r2, r3
 8008e58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e5a:	e01f      	b.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e5c:	4b69      	ldr	r3, [pc, #420]	; (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e68:	d106      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e70:	d102      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008e72:	4b66      	ldr	r3, [pc, #408]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008e74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e76:	e011      	b.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e78:	4b62      	ldr	r3, [pc, #392]	; (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e84:	d106      	bne.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e8c:	d102      	bne.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008e8e:	4b60      	ldr	r3, [pc, #384]	; (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008e90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e92:	e003      	b.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008e94:	2300      	movs	r3, #0
 8008e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008e98:	f000 bce1 	b.w	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008e9c:	f000 bcdf 	b.w	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ea0:	4b5c      	ldr	r3, [pc, #368]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ea4:	f000 bcdb 	b.w	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eac:	f000 bcd7 	b.w	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008eb4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008eb8:	430b      	orrs	r3, r1
 8008eba:	f040 80ad 	bne.w	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008ebe:	4b51      	ldr	r3, [pc, #324]	; (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ec2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008ec6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ece:	d056      	beq.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ed6:	f200 8090 	bhi.w	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008edc:	2bc0      	cmp	r3, #192	; 0xc0
 8008ede:	f000 8088 	beq.w	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee4:	2bc0      	cmp	r3, #192	; 0xc0
 8008ee6:	f200 8088 	bhi.w	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eec:	2b80      	cmp	r3, #128	; 0x80
 8008eee:	d032      	beq.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef2:	2b80      	cmp	r3, #128	; 0x80
 8008ef4:	f200 8081 	bhi.w	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d003      	beq.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f00:	2b40      	cmp	r3, #64	; 0x40
 8008f02:	d014      	beq.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008f04:	e079      	b.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f06:	4b3f      	ldr	r3, [pc, #252]	; (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f12:	d108      	bne.n	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f000 ff67 	bl	8009dec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f22:	f000 bc9c 	b.w	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f26:	2300      	movs	r3, #0
 8008f28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f2a:	f000 bc98 	b.w	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f2e:	4b35      	ldr	r3, [pc, #212]	; (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f3a:	d108      	bne.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f3c:	f107 0318 	add.w	r3, r7, #24
 8008f40:	4618      	mov	r0, r3
 8008f42:	f000 fcab 	bl	800989c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f4a:	f000 bc88 	b.w	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f52:	f000 bc84 	b.w	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f56:	4b2b      	ldr	r3, [pc, #172]	; (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f62:	d108      	bne.n	8008f76 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f64:	f107 030c 	add.w	r3, r7, #12
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f000 fdeb 	bl	8009b44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f72:	f000 bc74 	b.w	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f76:	2300      	movs	r3, #0
 8008f78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f7a:	f000 bc70 	b.w	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f7e:	4b21      	ldr	r3, [pc, #132]	; (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f86:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f88:	4b1e      	ldr	r3, [pc, #120]	; (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0304 	and.w	r3, r3, #4
 8008f90:	2b04      	cmp	r3, #4
 8008f92:	d10c      	bne.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d109      	bne.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f9a:	4b1a      	ldr	r3, [pc, #104]	; (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	08db      	lsrs	r3, r3, #3
 8008fa0:	f003 0303 	and.w	r3, r3, #3
 8008fa4:	4a18      	ldr	r2, [pc, #96]	; (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8008faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fac:	e01f      	b.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fae:	4b15      	ldr	r3, [pc, #84]	; (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fba:	d106      	bne.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fc2:	d102      	bne.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008fc4:	4b11      	ldr	r3, [pc, #68]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fc8:	e011      	b.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fca:	4b0e      	ldr	r3, [pc, #56]	; (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fd6:	d106      	bne.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fde:	d102      	bne.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008fe0:	4b0b      	ldr	r3, [pc, #44]	; (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fe4:	e003      	b.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008fea:	f000 bc38 	b.w	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008fee:	f000 bc36 	b.w	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ff2:	4b08      	ldr	r3, [pc, #32]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ff6:	f000 bc32 	b.w	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ffe:	f000 bc2e 	b.w	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009002:	bf00      	nop
 8009004:	58024400 	.word	0x58024400
 8009008:	03d09000 	.word	0x03d09000
 800900c:	003d0900 	.word	0x003d0900
 8009010:	007a1200 	.word	0x007a1200
 8009014:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009018:	e9d7 2300 	ldrd	r2, r3, [r7]
 800901c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009020:	430b      	orrs	r3, r1
 8009022:	f040 809c 	bne.w	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009026:	4b9e      	ldr	r3, [pc, #632]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800902a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800902e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009032:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009036:	d054      	beq.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800903e:	f200 808b 	bhi.w	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009044:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009048:	f000 8083 	beq.w	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800904c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009052:	f200 8081 	bhi.w	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800905c:	d02f      	beq.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800905e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009060:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009064:	d878      	bhi.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009068:	2b00      	cmp	r3, #0
 800906a:	d004      	beq.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800906c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009072:	d012      	beq.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009074:	e070      	b.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009076:	4b8a      	ldr	r3, [pc, #552]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800907e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009082:	d107      	bne.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009088:	4618      	mov	r0, r3
 800908a:	f000 feaf 	bl	8009dec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800908e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009090:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009092:	e3e4      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009094:	2300      	movs	r3, #0
 8009096:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009098:	e3e1      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800909a:	4b81      	ldr	r3, [pc, #516]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090a6:	d107      	bne.n	80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090a8:	f107 0318 	add.w	r3, r7, #24
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 fbf5 	bl	800989c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090b6:	e3d2      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090b8:	2300      	movs	r3, #0
 80090ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090bc:	e3cf      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090be:	4b78      	ldr	r3, [pc, #480]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090ca:	d107      	bne.n	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090cc:	f107 030c 	add.w	r3, r7, #12
 80090d0:	4618      	mov	r0, r3
 80090d2:	f000 fd37 	bl	8009b44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090da:	e3c0      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090dc:	2300      	movs	r3, #0
 80090de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090e0:	e3bd      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090e2:	4b6f      	ldr	r3, [pc, #444]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090ea:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090ec:	4b6c      	ldr	r3, [pc, #432]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0304 	and.w	r3, r3, #4
 80090f4:	2b04      	cmp	r3, #4
 80090f6:	d10c      	bne.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80090f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d109      	bne.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090fe:	4b68      	ldr	r3, [pc, #416]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	08db      	lsrs	r3, r3, #3
 8009104:	f003 0303 	and.w	r3, r3, #3
 8009108:	4a66      	ldr	r2, [pc, #408]	; (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800910a:	fa22 f303 	lsr.w	r3, r2, r3
 800910e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009110:	e01e      	b.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009112:	4b63      	ldr	r3, [pc, #396]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800911a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800911e:	d106      	bne.n	800912e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009126:	d102      	bne.n	800912e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009128:	4b5f      	ldr	r3, [pc, #380]	; (80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800912a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800912c:	e010      	b.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800912e:	4b5c      	ldr	r3, [pc, #368]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009136:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800913a:	d106      	bne.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800913c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800913e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009142:	d102      	bne.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009144:	4b59      	ldr	r3, [pc, #356]	; (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009146:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009148:	e002      	b.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800914a:	2300      	movs	r3, #0
 800914c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800914e:	e386      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009150:	e385      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009152:	4b57      	ldr	r3, [pc, #348]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009154:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009156:	e382      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009158:	2300      	movs	r3, #0
 800915a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800915c:	e37f      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800915e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009162:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009166:	430b      	orrs	r3, r1
 8009168:	f040 80a7 	bne.w	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800916c:	4b4c      	ldr	r3, [pc, #304]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800916e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009170:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009174:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009178:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800917c:	d055      	beq.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800917e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009180:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009184:	f200 8096 	bhi.w	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800918e:	f000 8084 	beq.w	800929a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009194:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009198:	f200 808c 	bhi.w	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800919c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091a2:	d030      	beq.n	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80091a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091aa:	f200 8083 	bhi.w	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80091ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d004      	beq.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80091b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80091ba:	d012      	beq.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80091bc:	e07a      	b.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091be:	4b38      	ldr	r3, [pc, #224]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091ca:	d107      	bne.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 fe0b 	bl	8009dec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091da:	e340      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091dc:	2300      	movs	r3, #0
 80091de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091e0:	e33d      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091e2:	4b2f      	ldr	r3, [pc, #188]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091ee:	d107      	bne.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091f0:	f107 0318 	add.w	r3, r7, #24
 80091f4:	4618      	mov	r0, r3
 80091f6:	f000 fb51 	bl	800989c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091fe:	e32e      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009200:	2300      	movs	r3, #0
 8009202:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009204:	e32b      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009206:	4b26      	ldr	r3, [pc, #152]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800920e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009212:	d107      	bne.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009214:	f107 030c 	add.w	r3, r7, #12
 8009218:	4618      	mov	r0, r3
 800921a:	f000 fc93 	bl	8009b44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009222:	e31c      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009224:	2300      	movs	r3, #0
 8009226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009228:	e319      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800922a:	4b1d      	ldr	r3, [pc, #116]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800922c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800922e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009232:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009234:	4b1a      	ldr	r3, [pc, #104]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 0304 	and.w	r3, r3, #4
 800923c:	2b04      	cmp	r3, #4
 800923e:	d10c      	bne.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009242:	2b00      	cmp	r3, #0
 8009244:	d109      	bne.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009246:	4b16      	ldr	r3, [pc, #88]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	08db      	lsrs	r3, r3, #3
 800924c:	f003 0303 	and.w	r3, r3, #3
 8009250:	4a14      	ldr	r2, [pc, #80]	; (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009252:	fa22 f303 	lsr.w	r3, r2, r3
 8009256:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009258:	e01e      	b.n	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800925a:	4b11      	ldr	r3, [pc, #68]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009266:	d106      	bne.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800926a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800926e:	d102      	bne.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009270:	4b0d      	ldr	r3, [pc, #52]	; (80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009274:	e010      	b.n	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009276:	4b0a      	ldr	r3, [pc, #40]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800927e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009282:	d106      	bne.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800928a:	d102      	bne.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800928c:	4b07      	ldr	r3, [pc, #28]	; (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800928e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009290:	e002      	b.n	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009292:	2300      	movs	r3, #0
 8009294:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009296:	e2e2      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009298:	e2e1      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800929a:	4b05      	ldr	r3, [pc, #20]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800929c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800929e:	e2de      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80092a0:	58024400 	.word	0x58024400
 80092a4:	03d09000 	.word	0x03d09000
 80092a8:	003d0900 	.word	0x003d0900
 80092ac:	007a1200 	.word	0x007a1200
 80092b0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80092b4:	2300      	movs	r3, #0
 80092b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092b8:	e2d1      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80092ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092be:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80092c2:	430b      	orrs	r3, r1
 80092c4:	f040 809c 	bne.w	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80092c8:	4b93      	ldr	r3, [pc, #588]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092cc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80092d0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80092d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092d8:	d054      	beq.n	8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80092da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092e0:	f200 808b 	bhi.w	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80092e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80092ea:	f000 8083 	beq.w	80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80092ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80092f4:	f200 8081 	bhi.w	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80092f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092fe:	d02f      	beq.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009306:	d878      	bhi.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930a:	2b00      	cmp	r3, #0
 800930c:	d004      	beq.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800930e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009314:	d012      	beq.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009316:	e070      	b.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009318:	4b7f      	ldr	r3, [pc, #508]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009320:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009324:	d107      	bne.n	8009336 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800932a:	4618      	mov	r0, r3
 800932c:	f000 fd5e 	bl	8009dec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009332:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009334:	e293      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009336:	2300      	movs	r3, #0
 8009338:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800933a:	e290      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800933c:	4b76      	ldr	r3, [pc, #472]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009344:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009348:	d107      	bne.n	800935a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800934a:	f107 0318 	add.w	r3, r7, #24
 800934e:	4618      	mov	r0, r3
 8009350:	f000 faa4 	bl	800989c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009358:	e281      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800935a:	2300      	movs	r3, #0
 800935c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800935e:	e27e      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009360:	4b6d      	ldr	r3, [pc, #436]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800936c:	d107      	bne.n	800937e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800936e:	f107 030c 	add.w	r3, r7, #12
 8009372:	4618      	mov	r0, r3
 8009374:	f000 fbe6 	bl	8009b44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800937c:	e26f      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800937e:	2300      	movs	r3, #0
 8009380:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009382:	e26c      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009384:	4b64      	ldr	r3, [pc, #400]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009388:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800938c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800938e:	4b62      	ldr	r3, [pc, #392]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 0304 	and.w	r3, r3, #4
 8009396:	2b04      	cmp	r3, #4
 8009398:	d10c      	bne.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800939a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800939c:	2b00      	cmp	r3, #0
 800939e:	d109      	bne.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093a0:	4b5d      	ldr	r3, [pc, #372]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	08db      	lsrs	r3, r3, #3
 80093a6:	f003 0303 	and.w	r3, r3, #3
 80093aa:	4a5c      	ldr	r2, [pc, #368]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80093ac:	fa22 f303 	lsr.w	r3, r2, r3
 80093b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093b2:	e01e      	b.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093b4:	4b58      	ldr	r3, [pc, #352]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093c0:	d106      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80093c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093c8:	d102      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80093ca:	4b55      	ldr	r3, [pc, #340]	; (8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80093cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093ce:	e010      	b.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093d0:	4b51      	ldr	r3, [pc, #324]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093dc:	d106      	bne.n	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80093de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093e4:	d102      	bne.n	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80093e6:	4b4f      	ldr	r3, [pc, #316]	; (8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80093e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093ea:	e002      	b.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80093ec:	2300      	movs	r3, #0
 80093ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80093f0:	e235      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80093f2:	e234      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80093f4:	4b4c      	ldr	r3, [pc, #304]	; (8009528 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80093f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093f8:	e231      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80093fa:	2300      	movs	r3, #0
 80093fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093fe:	e22e      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009400:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009404:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009408:	430b      	orrs	r3, r1
 800940a:	f040 808f 	bne.w	800952c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800940e:	4b42      	ldr	r3, [pc, #264]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009412:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009416:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8009418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800941e:	d06b      	beq.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009422:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009426:	d874      	bhi.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800942e:	d056      	beq.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009432:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009436:	d86c      	bhi.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800943e:	d03b      	beq.n	80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009442:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009446:	d864      	bhi.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800944e:	d021      	beq.n	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009452:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009456:	d85c      	bhi.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945a:	2b00      	cmp	r3, #0
 800945c:	d004      	beq.n	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800945e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009464:	d004      	beq.n	8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009466:	e054      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009468:	f7fe fa4c 	bl	8007904 <HAL_RCC_GetPCLK1Freq>
 800946c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800946e:	e1f6      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009470:	4b29      	ldr	r3, [pc, #164]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009478:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800947c:	d107      	bne.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800947e:	f107 0318 	add.w	r3, r7, #24
 8009482:	4618      	mov	r0, r3
 8009484:	f000 fa0a 	bl	800989c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800948c:	e1e7      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800948e:	2300      	movs	r3, #0
 8009490:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009492:	e1e4      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009494:	4b20      	ldr	r3, [pc, #128]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800949c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094a0:	d107      	bne.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094a2:	f107 030c 	add.w	r3, r7, #12
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 fb4c 	bl	8009b44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094b0:	e1d5      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094b2:	2300      	movs	r3, #0
 80094b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094b6:	e1d2      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80094b8:	4b17      	ldr	r3, [pc, #92]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f003 0304 	and.w	r3, r3, #4
 80094c0:	2b04      	cmp	r3, #4
 80094c2:	d109      	bne.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094c4:	4b14      	ldr	r3, [pc, #80]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	08db      	lsrs	r3, r3, #3
 80094ca:	f003 0303 	and.w	r3, r3, #3
 80094ce:	4a13      	ldr	r2, [pc, #76]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80094d0:	fa22 f303 	lsr.w	r3, r2, r3
 80094d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094d6:	e1c2      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094d8:	2300      	movs	r3, #0
 80094da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094dc:	e1bf      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80094de:	4b0e      	ldr	r3, [pc, #56]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094ea:	d102      	bne.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80094ec:	4b0c      	ldr	r3, [pc, #48]	; (8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80094ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094f0:	e1b5      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094f2:	2300      	movs	r3, #0
 80094f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094f6:	e1b2      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80094f8:	4b07      	ldr	r3, [pc, #28]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009500:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009504:	d102      	bne.n	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009506:	4b07      	ldr	r3, [pc, #28]	; (8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009508:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800950a:	e1a8      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800950c:	2300      	movs	r3, #0
 800950e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009510:	e1a5      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009512:	2300      	movs	r3, #0
 8009514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009516:	e1a2      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009518:	58024400 	.word	0x58024400
 800951c:	03d09000 	.word	0x03d09000
 8009520:	003d0900 	.word	0x003d0900
 8009524:	007a1200 	.word	0x007a1200
 8009528:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800952c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009530:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8009534:	430b      	orrs	r3, r1
 8009536:	d173      	bne.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009538:	4b9c      	ldr	r3, [pc, #624]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800953a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800953c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009540:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009544:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009548:	d02f      	beq.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800954a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009550:	d863      	bhi.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009554:	2b00      	cmp	r3, #0
 8009556:	d004      	beq.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800955e:	d012      	beq.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009560:	e05b      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009562:	4b92      	ldr	r3, [pc, #584]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800956a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800956e:	d107      	bne.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009570:	f107 0318 	add.w	r3, r7, #24
 8009574:	4618      	mov	r0, r3
 8009576:	f000 f991 	bl	800989c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800957e:	e16e      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009580:	2300      	movs	r3, #0
 8009582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009584:	e16b      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009586:	4b89      	ldr	r3, [pc, #548]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800958e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009592:	d107      	bne.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009594:	f107 030c 	add.w	r3, r7, #12
 8009598:	4618      	mov	r0, r3
 800959a:	f000 fad3 	bl	8009b44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095a2:	e15c      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095a4:	2300      	movs	r3, #0
 80095a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095a8:	e159      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80095aa:	4b80      	ldr	r3, [pc, #512]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095b2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095b4:	4b7d      	ldr	r3, [pc, #500]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 0304 	and.w	r3, r3, #4
 80095bc:	2b04      	cmp	r3, #4
 80095be:	d10c      	bne.n	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80095c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d109      	bne.n	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095c6:	4b79      	ldr	r3, [pc, #484]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	08db      	lsrs	r3, r3, #3
 80095cc:	f003 0303 	and.w	r3, r3, #3
 80095d0:	4a77      	ldr	r2, [pc, #476]	; (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80095d2:	fa22 f303 	lsr.w	r3, r2, r3
 80095d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095d8:	e01e      	b.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80095da:	4b74      	ldr	r3, [pc, #464]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095e6:	d106      	bne.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80095e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095ee:	d102      	bne.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80095f0:	4b70      	ldr	r3, [pc, #448]	; (80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80095f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095f4:	e010      	b.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095f6:	4b6d      	ldr	r3, [pc, #436]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009602:	d106      	bne.n	8009612 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009606:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800960a:	d102      	bne.n	8009612 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800960c:	4b6a      	ldr	r3, [pc, #424]	; (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800960e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009610:	e002      	b.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009612:	2300      	movs	r3, #0
 8009614:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009616:	e122      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009618:	e121      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800961a:	2300      	movs	r3, #0
 800961c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800961e:	e11e      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009624:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009628:	430b      	orrs	r3, r1
 800962a:	d133      	bne.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800962c:	4b5f      	ldr	r3, [pc, #380]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800962e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009634:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009638:	2b00      	cmp	r3, #0
 800963a:	d004      	beq.n	8009646 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800963c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800963e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009642:	d012      	beq.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009644:	e023      	b.n	800968e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009646:	4b59      	ldr	r3, [pc, #356]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800964e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009652:	d107      	bne.n	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009658:	4618      	mov	r0, r3
 800965a:	f000 fbc7 	bl	8009dec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800965e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009660:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009662:	e0fc      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009664:	2300      	movs	r3, #0
 8009666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009668:	e0f9      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800966a:	4b50      	ldr	r3, [pc, #320]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009672:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009676:	d107      	bne.n	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009678:	f107 0318 	add.w	r3, r7, #24
 800967c:	4618      	mov	r0, r3
 800967e:	f000 f90d 	bl	800989c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009682:	6a3b      	ldr	r3, [r7, #32]
 8009684:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009686:	e0ea      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009688:	2300      	movs	r3, #0
 800968a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800968c:	e0e7      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800968e:	2300      	movs	r3, #0
 8009690:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009692:	e0e4      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009698:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800969c:	430b      	orrs	r3, r1
 800969e:	f040 808d 	bne.w	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80096a2:	4b42      	ldr	r3, [pc, #264]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096a6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80096aa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80096ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096b2:	d06b      	beq.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80096b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096ba:	d874      	bhi.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80096bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096c2:	d056      	beq.n	8009772 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80096c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096ca:	d86c      	bhi.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80096cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096d2:	d03b      	beq.n	800974c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80096d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096da:	d864      	bhi.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80096dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096e2:	d021      	beq.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80096e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096ea:	d85c      	bhi.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80096ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d004      	beq.n	80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80096f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096f8:	d004      	beq.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80096fa:	e054      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80096fc:	f000 f8b8 	bl	8009870 <HAL_RCCEx_GetD3PCLK1Freq>
 8009700:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009702:	e0ac      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009704:	4b29      	ldr	r3, [pc, #164]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800970c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009710:	d107      	bne.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009712:	f107 0318 	add.w	r3, r7, #24
 8009716:	4618      	mov	r0, r3
 8009718:	f000 f8c0 	bl	800989c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009720:	e09d      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009722:	2300      	movs	r3, #0
 8009724:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009726:	e09a      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009728:	4b20      	ldr	r3, [pc, #128]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009734:	d107      	bne.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009736:	f107 030c 	add.w	r3, r7, #12
 800973a:	4618      	mov	r0, r3
 800973c:	f000 fa02 	bl	8009b44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009744:	e08b      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009746:	2300      	movs	r3, #0
 8009748:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800974a:	e088      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800974c:	4b17      	ldr	r3, [pc, #92]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f003 0304 	and.w	r3, r3, #4
 8009754:	2b04      	cmp	r3, #4
 8009756:	d109      	bne.n	800976c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009758:	4b14      	ldr	r3, [pc, #80]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	08db      	lsrs	r3, r3, #3
 800975e:	f003 0303 	and.w	r3, r3, #3
 8009762:	4a13      	ldr	r2, [pc, #76]	; (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009764:	fa22 f303 	lsr.w	r3, r2, r3
 8009768:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800976a:	e078      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800976c:	2300      	movs	r3, #0
 800976e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009770:	e075      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009772:	4b0e      	ldr	r3, [pc, #56]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800977a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800977e:	d102      	bne.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009780:	4b0c      	ldr	r3, [pc, #48]	; (80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009782:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009784:	e06b      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009786:	2300      	movs	r3, #0
 8009788:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800978a:	e068      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800978c:	4b07      	ldr	r3, [pc, #28]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009798:	d102      	bne.n	80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800979a:	4b07      	ldr	r3, [pc, #28]	; (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800979c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800979e:	e05e      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097a0:	2300      	movs	r3, #0
 80097a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097a4:	e05b      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80097a6:	2300      	movs	r3, #0
 80097a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097aa:	e058      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80097ac:	58024400 	.word	0x58024400
 80097b0:	03d09000 	.word	0x03d09000
 80097b4:	003d0900 	.word	0x003d0900
 80097b8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80097bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097c0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80097c4:	430b      	orrs	r3, r1
 80097c6:	d148      	bne.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80097c8:	4b27      	ldr	r3, [pc, #156]	; (8009868 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80097ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80097d0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80097d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097d8:	d02a      	beq.n	8009830 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80097da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097e0:	d838      	bhi.n	8009854 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80097e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d004      	beq.n	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80097e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097ee:	d00d      	beq.n	800980c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80097f0:	e030      	b.n	8009854 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80097f2:	4b1d      	ldr	r3, [pc, #116]	; (8009868 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097fe:	d102      	bne.n	8009806 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009800:	4b1a      	ldr	r3, [pc, #104]	; (800986c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009802:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009804:	e02b      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009806:	2300      	movs	r3, #0
 8009808:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800980a:	e028      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800980c:	4b16      	ldr	r3, [pc, #88]	; (8009868 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009814:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009818:	d107      	bne.n	800982a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800981a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800981e:	4618      	mov	r0, r3
 8009820:	f000 fae4 	bl	8009dec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009826:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009828:	e019      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800982a:	2300      	movs	r3, #0
 800982c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800982e:	e016      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009830:	4b0d      	ldr	r3, [pc, #52]	; (8009868 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009838:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800983c:	d107      	bne.n	800984e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800983e:	f107 0318 	add.w	r3, r7, #24
 8009842:	4618      	mov	r0, r3
 8009844:	f000 f82a 	bl	800989c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800984c:	e007      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800984e:	2300      	movs	r3, #0
 8009850:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009852:	e004      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009854:	2300      	movs	r3, #0
 8009856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009858:	e001      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800985a:	2300      	movs	r3, #0
 800985c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800985e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009860:	4618      	mov	r0, r3
 8009862:	3740      	adds	r7, #64	; 0x40
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	58024400 	.word	0x58024400
 800986c:	007a1200 	.word	0x007a1200

08009870 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009874:	f7fe f816 	bl	80078a4 <HAL_RCC_GetHCLKFreq>
 8009878:	4602      	mov	r2, r0
 800987a:	4b06      	ldr	r3, [pc, #24]	; (8009894 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800987c:	6a1b      	ldr	r3, [r3, #32]
 800987e:	091b      	lsrs	r3, r3, #4
 8009880:	f003 0307 	and.w	r3, r3, #7
 8009884:	4904      	ldr	r1, [pc, #16]	; (8009898 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009886:	5ccb      	ldrb	r3, [r1, r3]
 8009888:	f003 031f 	and.w	r3, r3, #31
 800988c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009890:	4618      	mov	r0, r3
 8009892:	bd80      	pop	{r7, pc}
 8009894:	58024400 	.word	0x58024400
 8009898:	0800f27c 	.word	0x0800f27c

0800989c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800989c:	b480      	push	{r7}
 800989e:	b089      	sub	sp, #36	; 0x24
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098a4:	4ba1      	ldr	r3, [pc, #644]	; (8009b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a8:	f003 0303 	and.w	r3, r3, #3
 80098ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80098ae:	4b9f      	ldr	r3, [pc, #636]	; (8009b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b2:	0b1b      	lsrs	r3, r3, #12
 80098b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80098ba:	4b9c      	ldr	r3, [pc, #624]	; (8009b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098be:	091b      	lsrs	r3, r3, #4
 80098c0:	f003 0301 	and.w	r3, r3, #1
 80098c4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80098c6:	4b99      	ldr	r3, [pc, #612]	; (8009b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ca:	08db      	lsrs	r3, r3, #3
 80098cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	fb02 f303 	mul.w	r3, r2, r3
 80098d6:	ee07 3a90 	vmov	s15, r3
 80098da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f000 8111 	beq.w	8009b0c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	2b02      	cmp	r3, #2
 80098ee:	f000 8083 	beq.w	80099f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	f200 80a1 	bhi.w	8009a3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d003      	beq.n	8009908 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009900:	69bb      	ldr	r3, [r7, #24]
 8009902:	2b01      	cmp	r3, #1
 8009904:	d056      	beq.n	80099b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009906:	e099      	b.n	8009a3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009908:	4b88      	ldr	r3, [pc, #544]	; (8009b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 0320 	and.w	r3, r3, #32
 8009910:	2b00      	cmp	r3, #0
 8009912:	d02d      	beq.n	8009970 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009914:	4b85      	ldr	r3, [pc, #532]	; (8009b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	08db      	lsrs	r3, r3, #3
 800991a:	f003 0303 	and.w	r3, r3, #3
 800991e:	4a84      	ldr	r2, [pc, #528]	; (8009b30 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009920:	fa22 f303 	lsr.w	r3, r2, r3
 8009924:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	ee07 3a90 	vmov	s15, r3
 800992c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	ee07 3a90 	vmov	s15, r3
 8009936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800993a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800993e:	4b7b      	ldr	r3, [pc, #492]	; (8009b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009946:	ee07 3a90 	vmov	s15, r3
 800994a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800994e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009952:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009b34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800995a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800995e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800996a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800996e:	e087      	b.n	8009a80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	ee07 3a90 	vmov	s15, r3
 8009976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800997a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009b38 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800997e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009982:	4b6a      	ldr	r3, [pc, #424]	; (8009b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800998a:	ee07 3a90 	vmov	s15, r3
 800998e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009992:	ed97 6a03 	vldr	s12, [r7, #12]
 8009996:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009b34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800999a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800999e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099b2:	e065      	b.n	8009a80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	ee07 3a90 	vmov	s15, r3
 80099ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009b3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80099c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099c6:	4b59      	ldr	r3, [pc, #356]	; (8009b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ce:	ee07 3a90 	vmov	s15, r3
 80099d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80099da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009b34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099f6:	e043      	b.n	8009a80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	ee07 3a90 	vmov	s15, r3
 80099fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a0a:	4b48      	ldr	r3, [pc, #288]	; (8009b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a12:	ee07 3a90 	vmov	s15, r3
 8009a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009b34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a3a:	e021      	b.n	8009a80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	ee07 3a90 	vmov	s15, r3
 8009a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009b3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a4e:	4b37      	ldr	r3, [pc, #220]	; (8009b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a56:	ee07 3a90 	vmov	s15, r3
 8009a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009b34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009a80:	4b2a      	ldr	r3, [pc, #168]	; (8009b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a84:	0a5b      	lsrs	r3, r3, #9
 8009a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a8a:	ee07 3a90 	vmov	s15, r3
 8009a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009aa6:	ee17 2a90 	vmov	r2, s15
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009aae:	4b1f      	ldr	r3, [pc, #124]	; (8009b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab2:	0c1b      	lsrs	r3, r3, #16
 8009ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ab8:	ee07 3a90 	vmov	s15, r3
 8009abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ac0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ac4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ac8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ad4:	ee17 2a90 	vmov	r2, s15
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009adc:	4b13      	ldr	r3, [pc, #76]	; (8009b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae0:	0e1b      	lsrs	r3, r3, #24
 8009ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ae6:	ee07 3a90 	vmov	s15, r3
 8009aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009af2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009af6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b02:	ee17 2a90 	vmov	r2, s15
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009b0a:	e008      	b.n	8009b1e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	609a      	str	r2, [r3, #8]
}
 8009b1e:	bf00      	nop
 8009b20:	3724      	adds	r7, #36	; 0x24
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	58024400 	.word	0x58024400
 8009b30:	03d09000 	.word	0x03d09000
 8009b34:	46000000 	.word	0x46000000
 8009b38:	4c742400 	.word	0x4c742400
 8009b3c:	4a742400 	.word	0x4a742400
 8009b40:	4af42400 	.word	0x4af42400

08009b44 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b089      	sub	sp, #36	; 0x24
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b4c:	4ba1      	ldr	r3, [pc, #644]	; (8009dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b50:	f003 0303 	and.w	r3, r3, #3
 8009b54:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009b56:	4b9f      	ldr	r3, [pc, #636]	; (8009dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b5a:	0d1b      	lsrs	r3, r3, #20
 8009b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b60:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009b62:	4b9c      	ldr	r3, [pc, #624]	; (8009dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b66:	0a1b      	lsrs	r3, r3, #8
 8009b68:	f003 0301 	and.w	r3, r3, #1
 8009b6c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009b6e:	4b99      	ldr	r3, [pc, #612]	; (8009dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b72:	08db      	lsrs	r3, r3, #3
 8009b74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	fb02 f303 	mul.w	r3, r2, r3
 8009b7e:	ee07 3a90 	vmov	s15, r3
 8009b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f000 8111 	beq.w	8009db4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	2b02      	cmp	r3, #2
 8009b96:	f000 8083 	beq.w	8009ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	2b02      	cmp	r3, #2
 8009b9e:	f200 80a1 	bhi.w	8009ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d003      	beq.n	8009bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d056      	beq.n	8009c5c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009bae:	e099      	b.n	8009ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bb0:	4b88      	ldr	r3, [pc, #544]	; (8009dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 0320 	and.w	r3, r3, #32
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d02d      	beq.n	8009c18 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009bbc:	4b85      	ldr	r3, [pc, #532]	; (8009dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	08db      	lsrs	r3, r3, #3
 8009bc2:	f003 0303 	and.w	r3, r3, #3
 8009bc6:	4a84      	ldr	r2, [pc, #528]	; (8009dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8009bcc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	ee07 3a90 	vmov	s15, r3
 8009bd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	ee07 3a90 	vmov	s15, r3
 8009bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009be6:	4b7b      	ldr	r3, [pc, #492]	; (8009dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bee:	ee07 3a90 	vmov	s15, r3
 8009bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bfa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009ddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009c16:	e087      	b.n	8009d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	ee07 3a90 	vmov	s15, r3
 8009c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009de0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c2a:	4b6a      	ldr	r3, [pc, #424]	; (8009dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c32:	ee07 3a90 	vmov	s15, r3
 8009c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009ddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c5a:	e065      	b.n	8009d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	ee07 3a90 	vmov	s15, r3
 8009c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009de4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c6e:	4b59      	ldr	r3, [pc, #356]	; (8009dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c76:	ee07 3a90 	vmov	s15, r3
 8009c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009ddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c9e:	e043      	b.n	8009d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	ee07 3a90 	vmov	s15, r3
 8009ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009caa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009de8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cb2:	4b48      	ldr	r3, [pc, #288]	; (8009dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cba:	ee07 3a90 	vmov	s15, r3
 8009cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cc6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009ddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ce2:	e021      	b.n	8009d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	ee07 3a90 	vmov	s15, r3
 8009cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009de4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cf6:	4b37      	ldr	r3, [pc, #220]	; (8009dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cfe:	ee07 3a90 	vmov	s15, r3
 8009d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009ddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d26:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009d28:	4b2a      	ldr	r3, [pc, #168]	; (8009dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2c:	0a5b      	lsrs	r3, r3, #9
 8009d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d32:	ee07 3a90 	vmov	s15, r3
 8009d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d42:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d4e:	ee17 2a90 	vmov	r2, s15
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009d56:	4b1f      	ldr	r3, [pc, #124]	; (8009dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5a:	0c1b      	lsrs	r3, r3, #16
 8009d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d60:	ee07 3a90 	vmov	s15, r3
 8009d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d70:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d7c:	ee17 2a90 	vmov	r2, s15
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009d84:	4b13      	ldr	r3, [pc, #76]	; (8009dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d88:	0e1b      	lsrs	r3, r3, #24
 8009d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d8e:	ee07 3a90 	vmov	s15, r3
 8009d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009daa:	ee17 2a90 	vmov	r2, s15
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009db2:	e008      	b.n	8009dc6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	609a      	str	r2, [r3, #8]
}
 8009dc6:	bf00      	nop
 8009dc8:	3724      	adds	r7, #36	; 0x24
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	58024400 	.word	0x58024400
 8009dd8:	03d09000 	.word	0x03d09000
 8009ddc:	46000000 	.word	0x46000000
 8009de0:	4c742400 	.word	0x4c742400
 8009de4:	4a742400 	.word	0x4a742400
 8009de8:	4af42400 	.word	0x4af42400

08009dec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b089      	sub	sp, #36	; 0x24
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009df4:	4ba0      	ldr	r3, [pc, #640]	; (800a078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df8:	f003 0303 	and.w	r3, r3, #3
 8009dfc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009dfe:	4b9e      	ldr	r3, [pc, #632]	; (800a078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e02:	091b      	lsrs	r3, r3, #4
 8009e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e08:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009e0a:	4b9b      	ldr	r3, [pc, #620]	; (800a078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0e:	f003 0301 	and.w	r3, r3, #1
 8009e12:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009e14:	4b98      	ldr	r3, [pc, #608]	; (800a078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e18:	08db      	lsrs	r3, r3, #3
 8009e1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e1e:	693a      	ldr	r2, [r7, #16]
 8009e20:	fb02 f303 	mul.w	r3, r2, r3
 8009e24:	ee07 3a90 	vmov	s15, r3
 8009e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e2c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	f000 8111 	beq.w	800a05a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	f000 8083 	beq.w	8009f46 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	2b02      	cmp	r3, #2
 8009e44:	f200 80a1 	bhi.w	8009f8a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d003      	beq.n	8009e56 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d056      	beq.n	8009f02 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009e54:	e099      	b.n	8009f8a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e56:	4b88      	ldr	r3, [pc, #544]	; (800a078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f003 0320 	and.w	r3, r3, #32
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d02d      	beq.n	8009ebe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e62:	4b85      	ldr	r3, [pc, #532]	; (800a078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	08db      	lsrs	r3, r3, #3
 8009e68:	f003 0303 	and.w	r3, r3, #3
 8009e6c:	4a83      	ldr	r2, [pc, #524]	; (800a07c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8009e72:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	ee07 3a90 	vmov	s15, r3
 8009e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	ee07 3a90 	vmov	s15, r3
 8009e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e8c:	4b7a      	ldr	r3, [pc, #488]	; (800a078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e94:	ee07 3a90 	vmov	s15, r3
 8009e98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ea0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a080 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ea4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ea8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eb8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009ebc:	e087      	b.n	8009fce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	ee07 3a90 	vmov	s15, r3
 8009ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ec8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a084 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009ecc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ed0:	4b69      	ldr	r3, [pc, #420]	; (800a078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ed8:	ee07 3a90 	vmov	s15, r3
 8009edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ee0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ee4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a080 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ee8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ef0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ef4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009efc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f00:	e065      	b.n	8009fce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	ee07 3a90 	vmov	s15, r3
 8009f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f0c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a088 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009f10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f14:	4b58      	ldr	r3, [pc, #352]	; (800a078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f1c:	ee07 3a90 	vmov	s15, r3
 8009f20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f24:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f28:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a080 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f44:	e043      	b.n	8009fce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	ee07 3a90 	vmov	s15, r3
 8009f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f50:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a08c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009f54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f58:	4b47      	ldr	r3, [pc, #284]	; (800a078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f60:	ee07 3a90 	vmov	s15, r3
 8009f64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f68:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f6c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a080 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f88:	e021      	b.n	8009fce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	ee07 3a90 	vmov	s15, r3
 8009f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f94:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a084 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009f98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f9c:	4b36      	ldr	r3, [pc, #216]	; (800a078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fa4:	ee07 3a90 	vmov	s15, r3
 8009fa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fac:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fb0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a080 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009fb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fc8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fcc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009fce:	4b2a      	ldr	r3, [pc, #168]	; (800a078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd2:	0a5b      	lsrs	r3, r3, #9
 8009fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fd8:	ee07 3a90 	vmov	s15, r3
 8009fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fe0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fe4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fe8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ff4:	ee17 2a90 	vmov	r2, s15
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009ffc:	4b1e      	ldr	r3, [pc, #120]	; (800a078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a000:	0c1b      	lsrs	r3, r3, #16
 800a002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a006:	ee07 3a90 	vmov	s15, r3
 800a00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a00e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a012:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a016:	edd7 6a07 	vldr	s13, [r7, #28]
 800a01a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a01e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a022:	ee17 2a90 	vmov	r2, s15
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a02a:	4b13      	ldr	r3, [pc, #76]	; (800a078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a02e:	0e1b      	lsrs	r3, r3, #24
 800a030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a034:	ee07 3a90 	vmov	s15, r3
 800a038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a03c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a040:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a044:	edd7 6a07 	vldr	s13, [r7, #28]
 800a048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a04c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a050:	ee17 2a90 	vmov	r2, s15
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a058:	e008      	b.n	800a06c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	609a      	str	r2, [r3, #8]
}
 800a06c:	bf00      	nop
 800a06e:	3724      	adds	r7, #36	; 0x24
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr
 800a078:	58024400 	.word	0x58024400
 800a07c:	03d09000 	.word	0x03d09000
 800a080:	46000000 	.word	0x46000000
 800a084:	4c742400 	.word	0x4c742400
 800a088:	4a742400 	.word	0x4a742400
 800a08c:	4af42400 	.word	0x4af42400

0800a090 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a09a:	2300      	movs	r3, #0
 800a09c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a09e:	4b53      	ldr	r3, [pc, #332]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a2:	f003 0303 	and.w	r3, r3, #3
 800a0a6:	2b03      	cmp	r3, #3
 800a0a8:	d101      	bne.n	800a0ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e099      	b.n	800a1e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a0ae:	4b4f      	ldr	r3, [pc, #316]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a4e      	ldr	r2, [pc, #312]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a0b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a0b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0ba:	f7f7 fcad 	bl	8001a18 <HAL_GetTick>
 800a0be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a0c0:	e008      	b.n	800a0d4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a0c2:	f7f7 fca9 	bl	8001a18 <HAL_GetTick>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	1ad3      	subs	r3, r2, r3
 800a0cc:	2b02      	cmp	r3, #2
 800a0ce:	d901      	bls.n	800a0d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a0d0:	2303      	movs	r3, #3
 800a0d2:	e086      	b.n	800a1e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a0d4:	4b45      	ldr	r3, [pc, #276]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d1f0      	bne.n	800a0c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a0e0:	4b42      	ldr	r3, [pc, #264]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a0e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	031b      	lsls	r3, r3, #12
 800a0ee:	493f      	ldr	r1, [pc, #252]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	628b      	str	r3, [r1, #40]	; 0x28
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	3b01      	subs	r3, #1
 800a104:	025b      	lsls	r3, r3, #9
 800a106:	b29b      	uxth	r3, r3
 800a108:	431a      	orrs	r2, r3
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	3b01      	subs	r3, #1
 800a110:	041b      	lsls	r3, r3, #16
 800a112:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a116:	431a      	orrs	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	691b      	ldr	r3, [r3, #16]
 800a11c:	3b01      	subs	r3, #1
 800a11e:	061b      	lsls	r3, r3, #24
 800a120:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a124:	4931      	ldr	r1, [pc, #196]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a126:	4313      	orrs	r3, r2
 800a128:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a12a:	4b30      	ldr	r3, [pc, #192]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	695b      	ldr	r3, [r3, #20]
 800a136:	492d      	ldr	r1, [pc, #180]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a138:	4313      	orrs	r3, r2
 800a13a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a13c:	4b2b      	ldr	r3, [pc, #172]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a140:	f023 0220 	bic.w	r2, r3, #32
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	699b      	ldr	r3, [r3, #24]
 800a148:	4928      	ldr	r1, [pc, #160]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a14a:	4313      	orrs	r3, r2
 800a14c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a14e:	4b27      	ldr	r3, [pc, #156]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a152:	4a26      	ldr	r2, [pc, #152]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a154:	f023 0310 	bic.w	r3, r3, #16
 800a158:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a15a:	4b24      	ldr	r3, [pc, #144]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a15c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a15e:	4b24      	ldr	r3, [pc, #144]	; (800a1f0 <RCCEx_PLL2_Config+0x160>)
 800a160:	4013      	ands	r3, r2
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	69d2      	ldr	r2, [r2, #28]
 800a166:	00d2      	lsls	r2, r2, #3
 800a168:	4920      	ldr	r1, [pc, #128]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a16a:	4313      	orrs	r3, r2
 800a16c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a16e:	4b1f      	ldr	r3, [pc, #124]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a172:	4a1e      	ldr	r2, [pc, #120]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a174:	f043 0310 	orr.w	r3, r3, #16
 800a178:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d106      	bne.n	800a18e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a180:	4b1a      	ldr	r3, [pc, #104]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a184:	4a19      	ldr	r2, [pc, #100]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a186:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a18a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a18c:	e00f      	b.n	800a1ae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	2b01      	cmp	r3, #1
 800a192:	d106      	bne.n	800a1a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a194:	4b15      	ldr	r3, [pc, #84]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a198:	4a14      	ldr	r2, [pc, #80]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a19a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a19e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a1a0:	e005      	b.n	800a1ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a1a2:	4b12      	ldr	r3, [pc, #72]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a6:	4a11      	ldr	r2, [pc, #68]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a1a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a1ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a1ae:	4b0f      	ldr	r3, [pc, #60]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a0e      	ldr	r2, [pc, #56]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a1b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a1b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1ba:	f7f7 fc2d 	bl	8001a18 <HAL_GetTick>
 800a1be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1c0:	e008      	b.n	800a1d4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a1c2:	f7f7 fc29 	bl	8001a18 <HAL_GetTick>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	1ad3      	subs	r3, r2, r3
 800a1cc:	2b02      	cmp	r3, #2
 800a1ce:	d901      	bls.n	800a1d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a1d0:	2303      	movs	r3, #3
 800a1d2:	e006      	b.n	800a1e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1d4:	4b05      	ldr	r3, [pc, #20]	; (800a1ec <RCCEx_PLL2_Config+0x15c>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d0f0      	beq.n	800a1c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	58024400 	.word	0x58024400
 800a1f0:	ffff0007 	.word	0xffff0007

0800a1f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1fe:	2300      	movs	r3, #0
 800a200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a202:	4b53      	ldr	r3, [pc, #332]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a206:	f003 0303 	and.w	r3, r3, #3
 800a20a:	2b03      	cmp	r3, #3
 800a20c:	d101      	bne.n	800a212 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	e099      	b.n	800a346 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a212:	4b4f      	ldr	r3, [pc, #316]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a4e      	ldr	r2, [pc, #312]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a21c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a21e:	f7f7 fbfb 	bl	8001a18 <HAL_GetTick>
 800a222:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a224:	e008      	b.n	800a238 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a226:	f7f7 fbf7 	bl	8001a18 <HAL_GetTick>
 800a22a:	4602      	mov	r2, r0
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	1ad3      	subs	r3, r2, r3
 800a230:	2b02      	cmp	r3, #2
 800a232:	d901      	bls.n	800a238 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a234:	2303      	movs	r3, #3
 800a236:	e086      	b.n	800a346 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a238:	4b45      	ldr	r3, [pc, #276]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1f0      	bne.n	800a226 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a244:	4b42      	ldr	r3, [pc, #264]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a248:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	051b      	lsls	r3, r3, #20
 800a252:	493f      	ldr	r1, [pc, #252]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a254:	4313      	orrs	r3, r2
 800a256:	628b      	str	r3, [r1, #40]	; 0x28
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	3b01      	subs	r3, #1
 800a25e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	3b01      	subs	r3, #1
 800a268:	025b      	lsls	r3, r3, #9
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	431a      	orrs	r2, r3
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	3b01      	subs	r3, #1
 800a274:	041b      	lsls	r3, r3, #16
 800a276:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a27a:	431a      	orrs	r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	691b      	ldr	r3, [r3, #16]
 800a280:	3b01      	subs	r3, #1
 800a282:	061b      	lsls	r3, r3, #24
 800a284:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a288:	4931      	ldr	r1, [pc, #196]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a28a:	4313      	orrs	r3, r2
 800a28c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a28e:	4b30      	ldr	r3, [pc, #192]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a292:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	695b      	ldr	r3, [r3, #20]
 800a29a:	492d      	ldr	r1, [pc, #180]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a29c:	4313      	orrs	r3, r2
 800a29e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a2a0:	4b2b      	ldr	r3, [pc, #172]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	699b      	ldr	r3, [r3, #24]
 800a2ac:	4928      	ldr	r1, [pc, #160]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a2b2:	4b27      	ldr	r3, [pc, #156]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b6:	4a26      	ldr	r2, [pc, #152]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a2b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a2be:	4b24      	ldr	r3, [pc, #144]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a2c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2c2:	4b24      	ldr	r3, [pc, #144]	; (800a354 <RCCEx_PLL3_Config+0x160>)
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	69d2      	ldr	r2, [r2, #28]
 800a2ca:	00d2      	lsls	r2, r2, #3
 800a2cc:	4920      	ldr	r1, [pc, #128]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a2d2:	4b1f      	ldr	r3, [pc, #124]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d6:	4a1e      	ldr	r2, [pc, #120]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a2d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d106      	bne.n	800a2f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a2e4:	4b1a      	ldr	r3, [pc, #104]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e8:	4a19      	ldr	r2, [pc, #100]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a2ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a2ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2f0:	e00f      	b.n	800a312 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d106      	bne.n	800a306 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a2f8:	4b15      	ldr	r3, [pc, #84]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fc:	4a14      	ldr	r2, [pc, #80]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a2fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a302:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a304:	e005      	b.n	800a312 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a306:	4b12      	ldr	r3, [pc, #72]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a30a:	4a11      	ldr	r2, [pc, #68]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a30c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a310:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a312:	4b0f      	ldr	r3, [pc, #60]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a0e      	ldr	r2, [pc, #56]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a31c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a31e:	f7f7 fb7b 	bl	8001a18 <HAL_GetTick>
 800a322:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a324:	e008      	b.n	800a338 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a326:	f7f7 fb77 	bl	8001a18 <HAL_GetTick>
 800a32a:	4602      	mov	r2, r0
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	1ad3      	subs	r3, r2, r3
 800a330:	2b02      	cmp	r3, #2
 800a332:	d901      	bls.n	800a338 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a334:	2303      	movs	r3, #3
 800a336:	e006      	b.n	800a346 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a338:	4b05      	ldr	r3, [pc, #20]	; (800a350 <RCCEx_PLL3_Config+0x15c>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a340:	2b00      	cmp	r3, #0
 800a342:	d0f0      	beq.n	800a326 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a344:	7bfb      	ldrb	r3, [r7, #15]
}
 800a346:	4618      	mov	r0, r3
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	58024400 	.word	0x58024400
 800a354:	ffff0007 	.word	0xffff0007

0800a358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d101      	bne.n	800a36a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	e049      	b.n	800a3fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a370:	b2db      	uxtb	r3, r3
 800a372:	2b00      	cmp	r3, #0
 800a374:	d106      	bne.n	800a384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2200      	movs	r2, #0
 800a37a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f7f6 ff3a 	bl	80011f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2202      	movs	r2, #2
 800a388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	3304      	adds	r3, #4
 800a394:	4619      	mov	r1, r3
 800a396:	4610      	mov	r0, r2
 800a398:	f000 faf8 	bl	800a98c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3708      	adds	r7, #8
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
	...

0800a408 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a408:	b480      	push	{r7}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a416:	b2db      	uxtb	r3, r3
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d001      	beq.n	800a420 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e054      	b.n	800a4ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2202      	movs	r2, #2
 800a424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	68da      	ldr	r2, [r3, #12]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f042 0201 	orr.w	r2, r2, #1
 800a436:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a26      	ldr	r2, [pc, #152]	; (800a4d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d022      	beq.n	800a488 <HAL_TIM_Base_Start_IT+0x80>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a44a:	d01d      	beq.n	800a488 <HAL_TIM_Base_Start_IT+0x80>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a22      	ldr	r2, [pc, #136]	; (800a4dc <HAL_TIM_Base_Start_IT+0xd4>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d018      	beq.n	800a488 <HAL_TIM_Base_Start_IT+0x80>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a21      	ldr	r2, [pc, #132]	; (800a4e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d013      	beq.n	800a488 <HAL_TIM_Base_Start_IT+0x80>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a1f      	ldr	r2, [pc, #124]	; (800a4e4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d00e      	beq.n	800a488 <HAL_TIM_Base_Start_IT+0x80>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a1e      	ldr	r2, [pc, #120]	; (800a4e8 <HAL_TIM_Base_Start_IT+0xe0>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d009      	beq.n	800a488 <HAL_TIM_Base_Start_IT+0x80>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a1c      	ldr	r2, [pc, #112]	; (800a4ec <HAL_TIM_Base_Start_IT+0xe4>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d004      	beq.n	800a488 <HAL_TIM_Base_Start_IT+0x80>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a1b      	ldr	r2, [pc, #108]	; (800a4f0 <HAL_TIM_Base_Start_IT+0xe8>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d115      	bne.n	800a4b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	689a      	ldr	r2, [r3, #8]
 800a48e:	4b19      	ldr	r3, [pc, #100]	; (800a4f4 <HAL_TIM_Base_Start_IT+0xec>)
 800a490:	4013      	ands	r3, r2
 800a492:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2b06      	cmp	r3, #6
 800a498:	d015      	beq.n	800a4c6 <HAL_TIM_Base_Start_IT+0xbe>
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4a0:	d011      	beq.n	800a4c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f042 0201 	orr.w	r2, r2, #1
 800a4b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4b2:	e008      	b.n	800a4c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f042 0201 	orr.w	r2, r2, #1
 800a4c2:	601a      	str	r2, [r3, #0]
 800a4c4:	e000      	b.n	800a4c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3714      	adds	r7, #20
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr
 800a4d6:	bf00      	nop
 800a4d8:	40010000 	.word	0x40010000
 800a4dc:	40000400 	.word	0x40000400
 800a4e0:	40000800 	.word	0x40000800
 800a4e4:	40000c00 	.word	0x40000c00
 800a4e8:	40010400 	.word	0x40010400
 800a4ec:	40001800 	.word	0x40001800
 800a4f0:	40014000 	.word	0x40014000
 800a4f4:	00010007 	.word	0x00010007

0800a4f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	f003 0302 	and.w	r3, r3, #2
 800a50a:	2b02      	cmp	r3, #2
 800a50c:	d122      	bne.n	800a554 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	f003 0302 	and.w	r3, r3, #2
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d11b      	bne.n	800a554 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f06f 0202 	mvn.w	r2, #2
 800a524:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2201      	movs	r2, #1
 800a52a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	699b      	ldr	r3, [r3, #24]
 800a532:	f003 0303 	and.w	r3, r3, #3
 800a536:	2b00      	cmp	r3, #0
 800a538:	d003      	beq.n	800a542 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 fa08 	bl	800a950 <HAL_TIM_IC_CaptureCallback>
 800a540:	e005      	b.n	800a54e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 f9fa 	bl	800a93c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 fa0b 	bl	800a964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	691b      	ldr	r3, [r3, #16]
 800a55a:	f003 0304 	and.w	r3, r3, #4
 800a55e:	2b04      	cmp	r3, #4
 800a560:	d122      	bne.n	800a5a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	f003 0304 	and.w	r3, r3, #4
 800a56c:	2b04      	cmp	r3, #4
 800a56e:	d11b      	bne.n	800a5a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f06f 0204 	mvn.w	r2, #4
 800a578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2202      	movs	r2, #2
 800a57e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	699b      	ldr	r3, [r3, #24]
 800a586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d003      	beq.n	800a596 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 f9de 	bl	800a950 <HAL_TIM_IC_CaptureCallback>
 800a594:	e005      	b.n	800a5a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 f9d0 	bl	800a93c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 f9e1 	bl	800a964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	691b      	ldr	r3, [r3, #16]
 800a5ae:	f003 0308 	and.w	r3, r3, #8
 800a5b2:	2b08      	cmp	r3, #8
 800a5b4:	d122      	bne.n	800a5fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	f003 0308 	and.w	r3, r3, #8
 800a5c0:	2b08      	cmp	r3, #8
 800a5c2:	d11b      	bne.n	800a5fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f06f 0208 	mvn.w	r2, #8
 800a5cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2204      	movs	r2, #4
 800a5d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	69db      	ldr	r3, [r3, #28]
 800a5da:	f003 0303 	and.w	r3, r3, #3
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d003      	beq.n	800a5ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 f9b4 	bl	800a950 <HAL_TIM_IC_CaptureCallback>
 800a5e8:	e005      	b.n	800a5f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 f9a6 	bl	800a93c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 f9b7 	bl	800a964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	691b      	ldr	r3, [r3, #16]
 800a602:	f003 0310 	and.w	r3, r3, #16
 800a606:	2b10      	cmp	r3, #16
 800a608:	d122      	bne.n	800a650 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	f003 0310 	and.w	r3, r3, #16
 800a614:	2b10      	cmp	r3, #16
 800a616:	d11b      	bne.n	800a650 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f06f 0210 	mvn.w	r2, #16
 800a620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2208      	movs	r2, #8
 800a626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	69db      	ldr	r3, [r3, #28]
 800a62e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a632:	2b00      	cmp	r3, #0
 800a634:	d003      	beq.n	800a63e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 f98a 	bl	800a950 <HAL_TIM_IC_CaptureCallback>
 800a63c:	e005      	b.n	800a64a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 f97c 	bl	800a93c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 f98d 	bl	800a964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	f003 0301 	and.w	r3, r3, #1
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d10e      	bne.n	800a67c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	f003 0301 	and.w	r3, r3, #1
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d107      	bne.n	800a67c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f06f 0201 	mvn.w	r2, #1
 800a674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f956 	bl	800a928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a686:	2b80      	cmp	r3, #128	; 0x80
 800a688:	d10e      	bne.n	800a6a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a694:	2b80      	cmp	r3, #128	; 0x80
 800a696:	d107      	bne.n	800a6a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a6a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 fb42 	bl	800ad2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6b6:	d10e      	bne.n	800a6d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6c2:	2b80      	cmp	r3, #128	; 0x80
 800a6c4:	d107      	bne.n	800a6d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a6ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 fb35 	bl	800ad40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e0:	2b40      	cmp	r3, #64	; 0x40
 800a6e2:	d10e      	bne.n	800a702 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ee:	2b40      	cmp	r3, #64	; 0x40
 800a6f0:	d107      	bne.n	800a702 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a6fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 f93b 	bl	800a978 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	f003 0320 	and.w	r3, r3, #32
 800a70c:	2b20      	cmp	r3, #32
 800a70e:	d10e      	bne.n	800a72e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	f003 0320 	and.w	r3, r3, #32
 800a71a:	2b20      	cmp	r3, #32
 800a71c:	d107      	bne.n	800a72e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f06f 0220 	mvn.w	r2, #32
 800a726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 faf5 	bl	800ad18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a72e:	bf00      	nop
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
	...

0800a738 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a742:	2300      	movs	r3, #0
 800a744:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d101      	bne.n	800a754 <HAL_TIM_ConfigClockSource+0x1c>
 800a750:	2302      	movs	r3, #2
 800a752:	e0dc      	b.n	800a90e <HAL_TIM_ConfigClockSource+0x1d6>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2202      	movs	r2, #2
 800a760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	689b      	ldr	r3, [r3, #8]
 800a76a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a76c:	68ba      	ldr	r2, [r7, #8]
 800a76e:	4b6a      	ldr	r3, [pc, #424]	; (800a918 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a770:	4013      	ands	r3, r2
 800a772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a77a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	68ba      	ldr	r2, [r7, #8]
 800a782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a64      	ldr	r2, [pc, #400]	; (800a91c <HAL_TIM_ConfigClockSource+0x1e4>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	f000 80a9 	beq.w	800a8e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a790:	4a62      	ldr	r2, [pc, #392]	; (800a91c <HAL_TIM_ConfigClockSource+0x1e4>)
 800a792:	4293      	cmp	r3, r2
 800a794:	f200 80ae 	bhi.w	800a8f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a798:	4a61      	ldr	r2, [pc, #388]	; (800a920 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	f000 80a1 	beq.w	800a8e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a7a0:	4a5f      	ldr	r2, [pc, #380]	; (800a920 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	f200 80a6 	bhi.w	800a8f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a7a8:	4a5e      	ldr	r2, [pc, #376]	; (800a924 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	f000 8099 	beq.w	800a8e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a7b0:	4a5c      	ldr	r2, [pc, #368]	; (800a924 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	f200 809e 	bhi.w	800a8f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a7b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a7bc:	f000 8091 	beq.w	800a8e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a7c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a7c4:	f200 8096 	bhi.w	800a8f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a7c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7cc:	f000 8089 	beq.w	800a8e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a7d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7d4:	f200 808e 	bhi.w	800a8f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a7d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7dc:	d03e      	beq.n	800a85c <HAL_TIM_ConfigClockSource+0x124>
 800a7de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7e2:	f200 8087 	bhi.w	800a8f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a7e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7ea:	f000 8086 	beq.w	800a8fa <HAL_TIM_ConfigClockSource+0x1c2>
 800a7ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7f2:	d87f      	bhi.n	800a8f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a7f4:	2b70      	cmp	r3, #112	; 0x70
 800a7f6:	d01a      	beq.n	800a82e <HAL_TIM_ConfigClockSource+0xf6>
 800a7f8:	2b70      	cmp	r3, #112	; 0x70
 800a7fa:	d87b      	bhi.n	800a8f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a7fc:	2b60      	cmp	r3, #96	; 0x60
 800a7fe:	d050      	beq.n	800a8a2 <HAL_TIM_ConfigClockSource+0x16a>
 800a800:	2b60      	cmp	r3, #96	; 0x60
 800a802:	d877      	bhi.n	800a8f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a804:	2b50      	cmp	r3, #80	; 0x50
 800a806:	d03c      	beq.n	800a882 <HAL_TIM_ConfigClockSource+0x14a>
 800a808:	2b50      	cmp	r3, #80	; 0x50
 800a80a:	d873      	bhi.n	800a8f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a80c:	2b40      	cmp	r3, #64	; 0x40
 800a80e:	d058      	beq.n	800a8c2 <HAL_TIM_ConfigClockSource+0x18a>
 800a810:	2b40      	cmp	r3, #64	; 0x40
 800a812:	d86f      	bhi.n	800a8f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a814:	2b30      	cmp	r3, #48	; 0x30
 800a816:	d064      	beq.n	800a8e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a818:	2b30      	cmp	r3, #48	; 0x30
 800a81a:	d86b      	bhi.n	800a8f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a81c:	2b20      	cmp	r3, #32
 800a81e:	d060      	beq.n	800a8e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a820:	2b20      	cmp	r3, #32
 800a822:	d867      	bhi.n	800a8f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a824:	2b00      	cmp	r3, #0
 800a826:	d05c      	beq.n	800a8e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a828:	2b10      	cmp	r3, #16
 800a82a:	d05a      	beq.n	800a8e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a82c:	e062      	b.n	800a8f4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a83e:	f000 f9bd 	bl	800abbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a850:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	68ba      	ldr	r2, [r7, #8]
 800a858:	609a      	str	r2, [r3, #8]
      break;
 800a85a:	e04f      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a86c:	f000 f9a6 	bl	800abbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	689a      	ldr	r2, [r3, #8]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a87e:	609a      	str	r2, [r3, #8]
      break;
 800a880:	e03c      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a88e:	461a      	mov	r2, r3
 800a890:	f000 f916 	bl	800aac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2150      	movs	r1, #80	; 0x50
 800a89a:	4618      	mov	r0, r3
 800a89c:	f000 f970 	bl	800ab80 <TIM_ITRx_SetConfig>
      break;
 800a8a0:	e02c      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	f000 f935 	bl	800ab1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2160      	movs	r1, #96	; 0x60
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f000 f960 	bl	800ab80 <TIM_ITRx_SetConfig>
      break;
 800a8c0:	e01c      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	f000 f8f6 	bl	800aac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2140      	movs	r1, #64	; 0x40
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f000 f950 	bl	800ab80 <TIM_ITRx_SetConfig>
      break;
 800a8e0:	e00c      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	4610      	mov	r0, r2
 800a8ee:	f000 f947 	bl	800ab80 <TIM_ITRx_SetConfig>
      break;
 800a8f2:	e003      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	73fb      	strb	r3, [r7, #15]
      break;
 800a8f8:	e000      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a8fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	ffceff88 	.word	0xffceff88
 800a91c:	00100040 	.word	0x00100040
 800a920:	00100030 	.word	0x00100030
 800a924:	00100020 	.word	0x00100020

0800a928 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a930:	bf00      	nop
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a944:	bf00      	nop
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a958:	bf00      	nop
 800a95a:	370c      	adds	r7, #12
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a96c:	bf00      	nop
 800a96e:	370c      	adds	r7, #12
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr

0800a978 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4a40      	ldr	r2, [pc, #256]	; (800aaa0 <TIM_Base_SetConfig+0x114>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d013      	beq.n	800a9cc <TIM_Base_SetConfig+0x40>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9aa:	d00f      	beq.n	800a9cc <TIM_Base_SetConfig+0x40>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a3d      	ldr	r2, [pc, #244]	; (800aaa4 <TIM_Base_SetConfig+0x118>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d00b      	beq.n	800a9cc <TIM_Base_SetConfig+0x40>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a3c      	ldr	r2, [pc, #240]	; (800aaa8 <TIM_Base_SetConfig+0x11c>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d007      	beq.n	800a9cc <TIM_Base_SetConfig+0x40>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4a3b      	ldr	r2, [pc, #236]	; (800aaac <TIM_Base_SetConfig+0x120>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d003      	beq.n	800a9cc <TIM_Base_SetConfig+0x40>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	4a3a      	ldr	r2, [pc, #232]	; (800aab0 <TIM_Base_SetConfig+0x124>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d108      	bne.n	800a9de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4a2f      	ldr	r2, [pc, #188]	; (800aaa0 <TIM_Base_SetConfig+0x114>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d01f      	beq.n	800aa26 <TIM_Base_SetConfig+0x9a>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9ec:	d01b      	beq.n	800aa26 <TIM_Base_SetConfig+0x9a>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4a2c      	ldr	r2, [pc, #176]	; (800aaa4 <TIM_Base_SetConfig+0x118>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d017      	beq.n	800aa26 <TIM_Base_SetConfig+0x9a>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4a2b      	ldr	r2, [pc, #172]	; (800aaa8 <TIM_Base_SetConfig+0x11c>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d013      	beq.n	800aa26 <TIM_Base_SetConfig+0x9a>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4a2a      	ldr	r2, [pc, #168]	; (800aaac <TIM_Base_SetConfig+0x120>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d00f      	beq.n	800aa26 <TIM_Base_SetConfig+0x9a>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	4a29      	ldr	r2, [pc, #164]	; (800aab0 <TIM_Base_SetConfig+0x124>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d00b      	beq.n	800aa26 <TIM_Base_SetConfig+0x9a>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a28      	ldr	r2, [pc, #160]	; (800aab4 <TIM_Base_SetConfig+0x128>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d007      	beq.n	800aa26 <TIM_Base_SetConfig+0x9a>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4a27      	ldr	r2, [pc, #156]	; (800aab8 <TIM_Base_SetConfig+0x12c>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d003      	beq.n	800aa26 <TIM_Base_SetConfig+0x9a>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4a26      	ldr	r2, [pc, #152]	; (800aabc <TIM_Base_SetConfig+0x130>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d108      	bne.n	800aa38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	68fa      	ldr	r2, [r7, #12]
 800aa34:	4313      	orrs	r3, r2
 800aa36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	695b      	ldr	r3, [r3, #20]
 800aa42:	4313      	orrs	r3, r2
 800aa44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	689a      	ldr	r2, [r3, #8]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a10      	ldr	r2, [pc, #64]	; (800aaa0 <TIM_Base_SetConfig+0x114>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d00f      	beq.n	800aa84 <TIM_Base_SetConfig+0xf8>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a12      	ldr	r2, [pc, #72]	; (800aab0 <TIM_Base_SetConfig+0x124>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d00b      	beq.n	800aa84 <TIM_Base_SetConfig+0xf8>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	4a11      	ldr	r2, [pc, #68]	; (800aab4 <TIM_Base_SetConfig+0x128>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d007      	beq.n	800aa84 <TIM_Base_SetConfig+0xf8>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	4a10      	ldr	r2, [pc, #64]	; (800aab8 <TIM_Base_SetConfig+0x12c>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d003      	beq.n	800aa84 <TIM_Base_SetConfig+0xf8>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	4a0f      	ldr	r2, [pc, #60]	; (800aabc <TIM_Base_SetConfig+0x130>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d103      	bne.n	800aa8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	691a      	ldr	r2, [r3, #16]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	615a      	str	r2, [r3, #20]
}
 800aa92:	bf00      	nop
 800aa94:	3714      	adds	r7, #20
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	40010000 	.word	0x40010000
 800aaa4:	40000400 	.word	0x40000400
 800aaa8:	40000800 	.word	0x40000800
 800aaac:	40000c00 	.word	0x40000c00
 800aab0:	40010400 	.word	0x40010400
 800aab4:	40014000 	.word	0x40014000
 800aab8:	40014400 	.word	0x40014400
 800aabc:	40014800 	.word	0x40014800

0800aac0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b087      	sub	sp, #28
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6a1b      	ldr	r3, [r3, #32]
 800aad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6a1b      	ldr	r3, [r3, #32]
 800aad6:	f023 0201 	bic.w	r2, r3, #1
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	699b      	ldr	r3, [r3, #24]
 800aae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aaea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	011b      	lsls	r3, r3, #4
 800aaf0:	693a      	ldr	r2, [r7, #16]
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	f023 030a 	bic.w	r3, r3, #10
 800aafc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aafe:	697a      	ldr	r2, [r7, #20]
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	4313      	orrs	r3, r2
 800ab04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	693a      	ldr	r2, [r7, #16]
 800ab0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	697a      	ldr	r2, [r7, #20]
 800ab10:	621a      	str	r2, [r3, #32]
}
 800ab12:	bf00      	nop
 800ab14:	371c      	adds	r7, #28
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr

0800ab1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab1e:	b480      	push	{r7}
 800ab20:	b087      	sub	sp, #28
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	60f8      	str	r0, [r7, #12]
 800ab26:	60b9      	str	r1, [r7, #8]
 800ab28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	6a1b      	ldr	r3, [r3, #32]
 800ab2e:	f023 0210 	bic.w	r2, r3, #16
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	699b      	ldr	r3, [r3, #24]
 800ab3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6a1b      	ldr	r3, [r3, #32]
 800ab40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ab48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	031b      	lsls	r3, r3, #12
 800ab4e:	697a      	ldr	r2, [r7, #20]
 800ab50:	4313      	orrs	r3, r2
 800ab52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ab5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	011b      	lsls	r3, r3, #4
 800ab60:	693a      	ldr	r2, [r7, #16]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	697a      	ldr	r2, [r7, #20]
 800ab6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	693a      	ldr	r2, [r7, #16]
 800ab70:	621a      	str	r2, [r3, #32]
}
 800ab72:	bf00      	nop
 800ab74:	371c      	adds	r7, #28
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr
	...

0800ab80 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	689b      	ldr	r3, [r3, #8]
 800ab8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	4b09      	ldr	r3, [pc, #36]	; (800abb8 <TIM_ITRx_SetConfig+0x38>)
 800ab94:	4013      	ands	r3, r2
 800ab96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ab98:	683a      	ldr	r2, [r7, #0]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	f043 0307 	orr.w	r3, r3, #7
 800aba2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	609a      	str	r2, [r3, #8]
}
 800abaa:	bf00      	nop
 800abac:	3714      	adds	r7, #20
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr
 800abb6:	bf00      	nop
 800abb8:	ffcfff8f 	.word	0xffcfff8f

0800abbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b087      	sub	sp, #28
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	607a      	str	r2, [r7, #4]
 800abc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800abd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	021a      	lsls	r2, r3, #8
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	431a      	orrs	r2, r3
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	697a      	ldr	r2, [r7, #20]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	697a      	ldr	r2, [r7, #20]
 800abee:	609a      	str	r2, [r3, #8]
}
 800abf0:	bf00      	nop
 800abf2:	371c      	adds	r7, #28
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b085      	sub	sp, #20
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d101      	bne.n	800ac14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac10:	2302      	movs	r3, #2
 800ac12:	e06d      	b.n	800acf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2201      	movs	r2, #1
 800ac18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2202      	movs	r2, #2
 800ac20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a30      	ldr	r2, [pc, #192]	; (800acfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d004      	beq.n	800ac48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a2f      	ldr	r2, [pc, #188]	; (800ad00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d108      	bne.n	800ac5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ac4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	68fa      	ldr	r2, [r7, #12]
 800ac72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a20      	ldr	r2, [pc, #128]	; (800acfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d022      	beq.n	800acc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac86:	d01d      	beq.n	800acc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a1d      	ldr	r2, [pc, #116]	; (800ad04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d018      	beq.n	800acc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a1c      	ldr	r2, [pc, #112]	; (800ad08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d013      	beq.n	800acc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a1a      	ldr	r2, [pc, #104]	; (800ad0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d00e      	beq.n	800acc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a15      	ldr	r2, [pc, #84]	; (800ad00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d009      	beq.n	800acc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a16      	ldr	r2, [pc, #88]	; (800ad10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d004      	beq.n	800acc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a15      	ldr	r2, [pc, #84]	; (800ad14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d10c      	bne.n	800acde <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	68ba      	ldr	r2, [r7, #8]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	68ba      	ldr	r2, [r7, #8]
 800acdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2201      	movs	r2, #1
 800ace2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3714      	adds	r7, #20
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr
 800acfc:	40010000 	.word	0x40010000
 800ad00:	40010400 	.word	0x40010400
 800ad04:	40000400 	.word	0x40000400
 800ad08:	40000800 	.word	0x40000800
 800ad0c:	40000c00 	.word	0x40000c00
 800ad10:	40001800 	.word	0x40001800
 800ad14:	40014000 	.word	0x40014000

0800ad18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad20:	bf00      	nop
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad34:	bf00      	nop
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ad48:	bf00      	nop
 800ad4a:	370c      	adds	r7, #12
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d101      	bne.n	800ad66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad62:	2301      	movs	r3, #1
 800ad64:	e042      	b.n	800adec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d106      	bne.n	800ad7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f7f6 fa65 	bl	8001248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2224      	movs	r2, #36	; 0x24
 800ad82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f022 0201 	bic.w	r2, r2, #1
 800ad94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 f8ba 	bl	800af10 <UART_SetConfig>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d101      	bne.n	800ada6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	e022      	b.n	800adec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d002      	beq.n	800adb4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 fe16 	bl	800b9e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	685a      	ldr	r2, [r3, #4]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800adc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	689a      	ldr	r2, [r3, #8]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800add2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f042 0201 	orr.w	r2, r2, #1
 800ade2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 fe9d 	bl	800bb24 <UART_CheckIdleState>
 800adea:	4603      	mov	r3, r0
}
 800adec:	4618      	mov	r0, r3
 800adee:	3708      	adds	r7, #8
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b08a      	sub	sp, #40	; 0x28
 800adf8:	af02      	add	r7, sp, #8
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	603b      	str	r3, [r7, #0]
 800ae00:	4613      	mov	r3, r2
 800ae02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae0a:	2b20      	cmp	r3, #32
 800ae0c:	d17b      	bne.n	800af06 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d002      	beq.n	800ae1a <HAL_UART_Transmit+0x26>
 800ae14:	88fb      	ldrh	r3, [r7, #6]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d101      	bne.n	800ae1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e074      	b.n	800af08 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2200      	movs	r2, #0
 800ae22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2221      	movs	r2, #33	; 0x21
 800ae2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ae2e:	f7f6 fdf3 	bl	8001a18 <HAL_GetTick>
 800ae32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	88fa      	ldrh	r2, [r7, #6]
 800ae38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	88fa      	ldrh	r2, [r7, #6]
 800ae40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae4c:	d108      	bne.n	800ae60 <HAL_UART_Transmit+0x6c>
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	691b      	ldr	r3, [r3, #16]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d104      	bne.n	800ae60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ae56:	2300      	movs	r3, #0
 800ae58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	61bb      	str	r3, [r7, #24]
 800ae5e:	e003      	b.n	800ae68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae64:	2300      	movs	r3, #0
 800ae66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ae68:	e030      	b.n	800aecc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	9300      	str	r3, [sp, #0]
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	2200      	movs	r2, #0
 800ae72:	2180      	movs	r1, #128	; 0x80
 800ae74:	68f8      	ldr	r0, [r7, #12]
 800ae76:	f000 feff 	bl	800bc78 <UART_WaitOnFlagUntilTimeout>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d005      	beq.n	800ae8c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2220      	movs	r2, #32
 800ae84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800ae88:	2303      	movs	r3, #3
 800ae8a:	e03d      	b.n	800af08 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d10b      	bne.n	800aeaa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	881b      	ldrh	r3, [r3, #0]
 800ae96:	461a      	mov	r2, r3
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aea0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	3302      	adds	r3, #2
 800aea6:	61bb      	str	r3, [r7, #24]
 800aea8:	e007      	b.n	800aeba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aeaa:	69fb      	ldr	r3, [r7, #28]
 800aeac:	781a      	ldrb	r2, [r3, #0]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800aeb4:	69fb      	ldr	r3, [r7, #28]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	3b01      	subs	r3, #1
 800aec4:	b29a      	uxth	r2, r3
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d1c8      	bne.n	800ae6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	9300      	str	r3, [sp, #0]
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	2200      	movs	r2, #0
 800aee0:	2140      	movs	r1, #64	; 0x40
 800aee2:	68f8      	ldr	r0, [r7, #12]
 800aee4:	f000 fec8 	bl	800bc78 <UART_WaitOnFlagUntilTimeout>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d005      	beq.n	800aefa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2220      	movs	r2, #32
 800aef2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800aef6:	2303      	movs	r3, #3
 800aef8:	e006      	b.n	800af08 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2220      	movs	r2, #32
 800aefe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800af02:	2300      	movs	r3, #0
 800af04:	e000      	b.n	800af08 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800af06:	2302      	movs	r3, #2
  }
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3720      	adds	r7, #32
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af14:	b092      	sub	sp, #72	; 0x48
 800af16:	af00      	add	r7, sp, #0
 800af18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800af1a:	2300      	movs	r3, #0
 800af1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	689a      	ldr	r2, [r3, #8]
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	691b      	ldr	r3, [r3, #16]
 800af28:	431a      	orrs	r2, r3
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	695b      	ldr	r3, [r3, #20]
 800af2e:	431a      	orrs	r2, r3
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	69db      	ldr	r3, [r3, #28]
 800af34:	4313      	orrs	r3, r2
 800af36:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	4bbe      	ldr	r3, [pc, #760]	; (800b238 <UART_SetConfig+0x328>)
 800af40:	4013      	ands	r3, r2
 800af42:	697a      	ldr	r2, [r7, #20]
 800af44:	6812      	ldr	r2, [r2, #0]
 800af46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800af48:	430b      	orrs	r3, r1
 800af4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	68da      	ldr	r2, [r3, #12]
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	430a      	orrs	r2, r1
 800af60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	699b      	ldr	r3, [r3, #24]
 800af66:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4ab3      	ldr	r2, [pc, #716]	; (800b23c <UART_SetConfig+0x32c>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d004      	beq.n	800af7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	6a1b      	ldr	r3, [r3, #32]
 800af76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af78:	4313      	orrs	r3, r2
 800af7a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	689a      	ldr	r2, [r3, #8]
 800af82:	4baf      	ldr	r3, [pc, #700]	; (800b240 <UART_SetConfig+0x330>)
 800af84:	4013      	ands	r3, r2
 800af86:	697a      	ldr	r2, [r7, #20]
 800af88:	6812      	ldr	r2, [r2, #0]
 800af8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800af8c:	430b      	orrs	r3, r1
 800af8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af96:	f023 010f 	bic.w	r1, r3, #15
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	430a      	orrs	r2, r1
 800afa4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4aa6      	ldr	r2, [pc, #664]	; (800b244 <UART_SetConfig+0x334>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d177      	bne.n	800b0a0 <UART_SetConfig+0x190>
 800afb0:	4ba5      	ldr	r3, [pc, #660]	; (800b248 <UART_SetConfig+0x338>)
 800afb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800afb8:	2b28      	cmp	r3, #40	; 0x28
 800afba:	d86d      	bhi.n	800b098 <UART_SetConfig+0x188>
 800afbc:	a201      	add	r2, pc, #4	; (adr r2, 800afc4 <UART_SetConfig+0xb4>)
 800afbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc2:	bf00      	nop
 800afc4:	0800b069 	.word	0x0800b069
 800afc8:	0800b099 	.word	0x0800b099
 800afcc:	0800b099 	.word	0x0800b099
 800afd0:	0800b099 	.word	0x0800b099
 800afd4:	0800b099 	.word	0x0800b099
 800afd8:	0800b099 	.word	0x0800b099
 800afdc:	0800b099 	.word	0x0800b099
 800afe0:	0800b099 	.word	0x0800b099
 800afe4:	0800b071 	.word	0x0800b071
 800afe8:	0800b099 	.word	0x0800b099
 800afec:	0800b099 	.word	0x0800b099
 800aff0:	0800b099 	.word	0x0800b099
 800aff4:	0800b099 	.word	0x0800b099
 800aff8:	0800b099 	.word	0x0800b099
 800affc:	0800b099 	.word	0x0800b099
 800b000:	0800b099 	.word	0x0800b099
 800b004:	0800b079 	.word	0x0800b079
 800b008:	0800b099 	.word	0x0800b099
 800b00c:	0800b099 	.word	0x0800b099
 800b010:	0800b099 	.word	0x0800b099
 800b014:	0800b099 	.word	0x0800b099
 800b018:	0800b099 	.word	0x0800b099
 800b01c:	0800b099 	.word	0x0800b099
 800b020:	0800b099 	.word	0x0800b099
 800b024:	0800b081 	.word	0x0800b081
 800b028:	0800b099 	.word	0x0800b099
 800b02c:	0800b099 	.word	0x0800b099
 800b030:	0800b099 	.word	0x0800b099
 800b034:	0800b099 	.word	0x0800b099
 800b038:	0800b099 	.word	0x0800b099
 800b03c:	0800b099 	.word	0x0800b099
 800b040:	0800b099 	.word	0x0800b099
 800b044:	0800b089 	.word	0x0800b089
 800b048:	0800b099 	.word	0x0800b099
 800b04c:	0800b099 	.word	0x0800b099
 800b050:	0800b099 	.word	0x0800b099
 800b054:	0800b099 	.word	0x0800b099
 800b058:	0800b099 	.word	0x0800b099
 800b05c:	0800b099 	.word	0x0800b099
 800b060:	0800b099 	.word	0x0800b099
 800b064:	0800b091 	.word	0x0800b091
 800b068:	2301      	movs	r3, #1
 800b06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b06e:	e222      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b070:	2304      	movs	r3, #4
 800b072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b076:	e21e      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b078:	2308      	movs	r3, #8
 800b07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b07e:	e21a      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b080:	2310      	movs	r3, #16
 800b082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b086:	e216      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b088:	2320      	movs	r3, #32
 800b08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b08e:	e212      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b090:	2340      	movs	r3, #64	; 0x40
 800b092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b096:	e20e      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b098:	2380      	movs	r3, #128	; 0x80
 800b09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b09e:	e20a      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a69      	ldr	r2, [pc, #420]	; (800b24c <UART_SetConfig+0x33c>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d130      	bne.n	800b10c <UART_SetConfig+0x1fc>
 800b0aa:	4b67      	ldr	r3, [pc, #412]	; (800b248 <UART_SetConfig+0x338>)
 800b0ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0ae:	f003 0307 	and.w	r3, r3, #7
 800b0b2:	2b05      	cmp	r3, #5
 800b0b4:	d826      	bhi.n	800b104 <UART_SetConfig+0x1f4>
 800b0b6:	a201      	add	r2, pc, #4	; (adr r2, 800b0bc <UART_SetConfig+0x1ac>)
 800b0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0bc:	0800b0d5 	.word	0x0800b0d5
 800b0c0:	0800b0dd 	.word	0x0800b0dd
 800b0c4:	0800b0e5 	.word	0x0800b0e5
 800b0c8:	0800b0ed 	.word	0x0800b0ed
 800b0cc:	0800b0f5 	.word	0x0800b0f5
 800b0d0:	0800b0fd 	.word	0x0800b0fd
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0da:	e1ec      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b0dc:	2304      	movs	r3, #4
 800b0de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0e2:	e1e8      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b0e4:	2308      	movs	r3, #8
 800b0e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0ea:	e1e4      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b0ec:	2310      	movs	r3, #16
 800b0ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0f2:	e1e0      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b0f4:	2320      	movs	r3, #32
 800b0f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0fa:	e1dc      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b0fc:	2340      	movs	r3, #64	; 0x40
 800b0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b102:	e1d8      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b104:	2380      	movs	r3, #128	; 0x80
 800b106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b10a:	e1d4      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a4f      	ldr	r2, [pc, #316]	; (800b250 <UART_SetConfig+0x340>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d130      	bne.n	800b178 <UART_SetConfig+0x268>
 800b116:	4b4c      	ldr	r3, [pc, #304]	; (800b248 <UART_SetConfig+0x338>)
 800b118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b11a:	f003 0307 	and.w	r3, r3, #7
 800b11e:	2b05      	cmp	r3, #5
 800b120:	d826      	bhi.n	800b170 <UART_SetConfig+0x260>
 800b122:	a201      	add	r2, pc, #4	; (adr r2, 800b128 <UART_SetConfig+0x218>)
 800b124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b128:	0800b141 	.word	0x0800b141
 800b12c:	0800b149 	.word	0x0800b149
 800b130:	0800b151 	.word	0x0800b151
 800b134:	0800b159 	.word	0x0800b159
 800b138:	0800b161 	.word	0x0800b161
 800b13c:	0800b169 	.word	0x0800b169
 800b140:	2300      	movs	r3, #0
 800b142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b146:	e1b6      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b148:	2304      	movs	r3, #4
 800b14a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b14e:	e1b2      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b150:	2308      	movs	r3, #8
 800b152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b156:	e1ae      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b158:	2310      	movs	r3, #16
 800b15a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b15e:	e1aa      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b160:	2320      	movs	r3, #32
 800b162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b166:	e1a6      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b168:	2340      	movs	r3, #64	; 0x40
 800b16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b16e:	e1a2      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b170:	2380      	movs	r3, #128	; 0x80
 800b172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b176:	e19e      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a35      	ldr	r2, [pc, #212]	; (800b254 <UART_SetConfig+0x344>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d130      	bne.n	800b1e4 <UART_SetConfig+0x2d4>
 800b182:	4b31      	ldr	r3, [pc, #196]	; (800b248 <UART_SetConfig+0x338>)
 800b184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b186:	f003 0307 	and.w	r3, r3, #7
 800b18a:	2b05      	cmp	r3, #5
 800b18c:	d826      	bhi.n	800b1dc <UART_SetConfig+0x2cc>
 800b18e:	a201      	add	r2, pc, #4	; (adr r2, 800b194 <UART_SetConfig+0x284>)
 800b190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b194:	0800b1ad 	.word	0x0800b1ad
 800b198:	0800b1b5 	.word	0x0800b1b5
 800b19c:	0800b1bd 	.word	0x0800b1bd
 800b1a0:	0800b1c5 	.word	0x0800b1c5
 800b1a4:	0800b1cd 	.word	0x0800b1cd
 800b1a8:	0800b1d5 	.word	0x0800b1d5
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1b2:	e180      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b1b4:	2304      	movs	r3, #4
 800b1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1ba:	e17c      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b1bc:	2308      	movs	r3, #8
 800b1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1c2:	e178      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b1c4:	2310      	movs	r3, #16
 800b1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1ca:	e174      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b1cc:	2320      	movs	r3, #32
 800b1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1d2:	e170      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b1d4:	2340      	movs	r3, #64	; 0x40
 800b1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1da:	e16c      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b1dc:	2380      	movs	r3, #128	; 0x80
 800b1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1e2:	e168      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a1b      	ldr	r2, [pc, #108]	; (800b258 <UART_SetConfig+0x348>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d142      	bne.n	800b274 <UART_SetConfig+0x364>
 800b1ee:	4b16      	ldr	r3, [pc, #88]	; (800b248 <UART_SetConfig+0x338>)
 800b1f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1f2:	f003 0307 	and.w	r3, r3, #7
 800b1f6:	2b05      	cmp	r3, #5
 800b1f8:	d838      	bhi.n	800b26c <UART_SetConfig+0x35c>
 800b1fa:	a201      	add	r2, pc, #4	; (adr r2, 800b200 <UART_SetConfig+0x2f0>)
 800b1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b200:	0800b219 	.word	0x0800b219
 800b204:	0800b221 	.word	0x0800b221
 800b208:	0800b229 	.word	0x0800b229
 800b20c:	0800b231 	.word	0x0800b231
 800b210:	0800b25d 	.word	0x0800b25d
 800b214:	0800b265 	.word	0x0800b265
 800b218:	2300      	movs	r3, #0
 800b21a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b21e:	e14a      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b220:	2304      	movs	r3, #4
 800b222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b226:	e146      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b228:	2308      	movs	r3, #8
 800b22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b22e:	e142      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b230:	2310      	movs	r3, #16
 800b232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b236:	e13e      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b238:	cfff69f3 	.word	0xcfff69f3
 800b23c:	58000c00 	.word	0x58000c00
 800b240:	11fff4ff 	.word	0x11fff4ff
 800b244:	40011000 	.word	0x40011000
 800b248:	58024400 	.word	0x58024400
 800b24c:	40004400 	.word	0x40004400
 800b250:	40004800 	.word	0x40004800
 800b254:	40004c00 	.word	0x40004c00
 800b258:	40005000 	.word	0x40005000
 800b25c:	2320      	movs	r3, #32
 800b25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b262:	e128      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b264:	2340      	movs	r3, #64	; 0x40
 800b266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b26a:	e124      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b26c:	2380      	movs	r3, #128	; 0x80
 800b26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b272:	e120      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4acb      	ldr	r2, [pc, #812]	; (800b5a8 <UART_SetConfig+0x698>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d176      	bne.n	800b36c <UART_SetConfig+0x45c>
 800b27e:	4bcb      	ldr	r3, [pc, #812]	; (800b5ac <UART_SetConfig+0x69c>)
 800b280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b282:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b286:	2b28      	cmp	r3, #40	; 0x28
 800b288:	d86c      	bhi.n	800b364 <UART_SetConfig+0x454>
 800b28a:	a201      	add	r2, pc, #4	; (adr r2, 800b290 <UART_SetConfig+0x380>)
 800b28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b290:	0800b335 	.word	0x0800b335
 800b294:	0800b365 	.word	0x0800b365
 800b298:	0800b365 	.word	0x0800b365
 800b29c:	0800b365 	.word	0x0800b365
 800b2a0:	0800b365 	.word	0x0800b365
 800b2a4:	0800b365 	.word	0x0800b365
 800b2a8:	0800b365 	.word	0x0800b365
 800b2ac:	0800b365 	.word	0x0800b365
 800b2b0:	0800b33d 	.word	0x0800b33d
 800b2b4:	0800b365 	.word	0x0800b365
 800b2b8:	0800b365 	.word	0x0800b365
 800b2bc:	0800b365 	.word	0x0800b365
 800b2c0:	0800b365 	.word	0x0800b365
 800b2c4:	0800b365 	.word	0x0800b365
 800b2c8:	0800b365 	.word	0x0800b365
 800b2cc:	0800b365 	.word	0x0800b365
 800b2d0:	0800b345 	.word	0x0800b345
 800b2d4:	0800b365 	.word	0x0800b365
 800b2d8:	0800b365 	.word	0x0800b365
 800b2dc:	0800b365 	.word	0x0800b365
 800b2e0:	0800b365 	.word	0x0800b365
 800b2e4:	0800b365 	.word	0x0800b365
 800b2e8:	0800b365 	.word	0x0800b365
 800b2ec:	0800b365 	.word	0x0800b365
 800b2f0:	0800b34d 	.word	0x0800b34d
 800b2f4:	0800b365 	.word	0x0800b365
 800b2f8:	0800b365 	.word	0x0800b365
 800b2fc:	0800b365 	.word	0x0800b365
 800b300:	0800b365 	.word	0x0800b365
 800b304:	0800b365 	.word	0x0800b365
 800b308:	0800b365 	.word	0x0800b365
 800b30c:	0800b365 	.word	0x0800b365
 800b310:	0800b355 	.word	0x0800b355
 800b314:	0800b365 	.word	0x0800b365
 800b318:	0800b365 	.word	0x0800b365
 800b31c:	0800b365 	.word	0x0800b365
 800b320:	0800b365 	.word	0x0800b365
 800b324:	0800b365 	.word	0x0800b365
 800b328:	0800b365 	.word	0x0800b365
 800b32c:	0800b365 	.word	0x0800b365
 800b330:	0800b35d 	.word	0x0800b35d
 800b334:	2301      	movs	r3, #1
 800b336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b33a:	e0bc      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b33c:	2304      	movs	r3, #4
 800b33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b342:	e0b8      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b344:	2308      	movs	r3, #8
 800b346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b34a:	e0b4      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b34c:	2310      	movs	r3, #16
 800b34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b352:	e0b0      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b354:	2320      	movs	r3, #32
 800b356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b35a:	e0ac      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b35c:	2340      	movs	r3, #64	; 0x40
 800b35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b362:	e0a8      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b364:	2380      	movs	r3, #128	; 0x80
 800b366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b36a:	e0a4      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4a8f      	ldr	r2, [pc, #572]	; (800b5b0 <UART_SetConfig+0x6a0>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d130      	bne.n	800b3d8 <UART_SetConfig+0x4c8>
 800b376:	4b8d      	ldr	r3, [pc, #564]	; (800b5ac <UART_SetConfig+0x69c>)
 800b378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b37a:	f003 0307 	and.w	r3, r3, #7
 800b37e:	2b05      	cmp	r3, #5
 800b380:	d826      	bhi.n	800b3d0 <UART_SetConfig+0x4c0>
 800b382:	a201      	add	r2, pc, #4	; (adr r2, 800b388 <UART_SetConfig+0x478>)
 800b384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b388:	0800b3a1 	.word	0x0800b3a1
 800b38c:	0800b3a9 	.word	0x0800b3a9
 800b390:	0800b3b1 	.word	0x0800b3b1
 800b394:	0800b3b9 	.word	0x0800b3b9
 800b398:	0800b3c1 	.word	0x0800b3c1
 800b39c:	0800b3c9 	.word	0x0800b3c9
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3a6:	e086      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b3a8:	2304      	movs	r3, #4
 800b3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ae:	e082      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b3b0:	2308      	movs	r3, #8
 800b3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3b6:	e07e      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b3b8:	2310      	movs	r3, #16
 800b3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3be:	e07a      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b3c0:	2320      	movs	r3, #32
 800b3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3c6:	e076      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b3c8:	2340      	movs	r3, #64	; 0x40
 800b3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ce:	e072      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b3d0:	2380      	movs	r3, #128	; 0x80
 800b3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3d6:	e06e      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a75      	ldr	r2, [pc, #468]	; (800b5b4 <UART_SetConfig+0x6a4>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d130      	bne.n	800b444 <UART_SetConfig+0x534>
 800b3e2:	4b72      	ldr	r3, [pc, #456]	; (800b5ac <UART_SetConfig+0x69c>)
 800b3e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3e6:	f003 0307 	and.w	r3, r3, #7
 800b3ea:	2b05      	cmp	r3, #5
 800b3ec:	d826      	bhi.n	800b43c <UART_SetConfig+0x52c>
 800b3ee:	a201      	add	r2, pc, #4	; (adr r2, 800b3f4 <UART_SetConfig+0x4e4>)
 800b3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f4:	0800b40d 	.word	0x0800b40d
 800b3f8:	0800b415 	.word	0x0800b415
 800b3fc:	0800b41d 	.word	0x0800b41d
 800b400:	0800b425 	.word	0x0800b425
 800b404:	0800b42d 	.word	0x0800b42d
 800b408:	0800b435 	.word	0x0800b435
 800b40c:	2300      	movs	r3, #0
 800b40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b412:	e050      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b414:	2304      	movs	r3, #4
 800b416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b41a:	e04c      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b41c:	2308      	movs	r3, #8
 800b41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b422:	e048      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b424:	2310      	movs	r3, #16
 800b426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b42a:	e044      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b42c:	2320      	movs	r3, #32
 800b42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b432:	e040      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b434:	2340      	movs	r3, #64	; 0x40
 800b436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b43a:	e03c      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b43c:	2380      	movs	r3, #128	; 0x80
 800b43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b442:	e038      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a5b      	ldr	r2, [pc, #364]	; (800b5b8 <UART_SetConfig+0x6a8>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d130      	bne.n	800b4b0 <UART_SetConfig+0x5a0>
 800b44e:	4b57      	ldr	r3, [pc, #348]	; (800b5ac <UART_SetConfig+0x69c>)
 800b450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b452:	f003 0307 	and.w	r3, r3, #7
 800b456:	2b05      	cmp	r3, #5
 800b458:	d826      	bhi.n	800b4a8 <UART_SetConfig+0x598>
 800b45a:	a201      	add	r2, pc, #4	; (adr r2, 800b460 <UART_SetConfig+0x550>)
 800b45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b460:	0800b479 	.word	0x0800b479
 800b464:	0800b481 	.word	0x0800b481
 800b468:	0800b489 	.word	0x0800b489
 800b46c:	0800b491 	.word	0x0800b491
 800b470:	0800b499 	.word	0x0800b499
 800b474:	0800b4a1 	.word	0x0800b4a1
 800b478:	2302      	movs	r3, #2
 800b47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b47e:	e01a      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b480:	2304      	movs	r3, #4
 800b482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b486:	e016      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b488:	2308      	movs	r3, #8
 800b48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b48e:	e012      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b490:	2310      	movs	r3, #16
 800b492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b496:	e00e      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b498:	2320      	movs	r3, #32
 800b49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b49e:	e00a      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b4a0:	2340      	movs	r3, #64	; 0x40
 800b4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4a6:	e006      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b4a8:	2380      	movs	r3, #128	; 0x80
 800b4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ae:	e002      	b.n	800b4b6 <UART_SetConfig+0x5a6>
 800b4b0:	2380      	movs	r3, #128	; 0x80
 800b4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a3f      	ldr	r2, [pc, #252]	; (800b5b8 <UART_SetConfig+0x6a8>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	f040 80f8 	bne.w	800b6b2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b4c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b4c6:	2b20      	cmp	r3, #32
 800b4c8:	dc46      	bgt.n	800b558 <UART_SetConfig+0x648>
 800b4ca:	2b02      	cmp	r3, #2
 800b4cc:	f2c0 8082 	blt.w	800b5d4 <UART_SetConfig+0x6c4>
 800b4d0:	3b02      	subs	r3, #2
 800b4d2:	2b1e      	cmp	r3, #30
 800b4d4:	d87e      	bhi.n	800b5d4 <UART_SetConfig+0x6c4>
 800b4d6:	a201      	add	r2, pc, #4	; (adr r2, 800b4dc <UART_SetConfig+0x5cc>)
 800b4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4dc:	0800b55f 	.word	0x0800b55f
 800b4e0:	0800b5d5 	.word	0x0800b5d5
 800b4e4:	0800b567 	.word	0x0800b567
 800b4e8:	0800b5d5 	.word	0x0800b5d5
 800b4ec:	0800b5d5 	.word	0x0800b5d5
 800b4f0:	0800b5d5 	.word	0x0800b5d5
 800b4f4:	0800b577 	.word	0x0800b577
 800b4f8:	0800b5d5 	.word	0x0800b5d5
 800b4fc:	0800b5d5 	.word	0x0800b5d5
 800b500:	0800b5d5 	.word	0x0800b5d5
 800b504:	0800b5d5 	.word	0x0800b5d5
 800b508:	0800b5d5 	.word	0x0800b5d5
 800b50c:	0800b5d5 	.word	0x0800b5d5
 800b510:	0800b5d5 	.word	0x0800b5d5
 800b514:	0800b587 	.word	0x0800b587
 800b518:	0800b5d5 	.word	0x0800b5d5
 800b51c:	0800b5d5 	.word	0x0800b5d5
 800b520:	0800b5d5 	.word	0x0800b5d5
 800b524:	0800b5d5 	.word	0x0800b5d5
 800b528:	0800b5d5 	.word	0x0800b5d5
 800b52c:	0800b5d5 	.word	0x0800b5d5
 800b530:	0800b5d5 	.word	0x0800b5d5
 800b534:	0800b5d5 	.word	0x0800b5d5
 800b538:	0800b5d5 	.word	0x0800b5d5
 800b53c:	0800b5d5 	.word	0x0800b5d5
 800b540:	0800b5d5 	.word	0x0800b5d5
 800b544:	0800b5d5 	.word	0x0800b5d5
 800b548:	0800b5d5 	.word	0x0800b5d5
 800b54c:	0800b5d5 	.word	0x0800b5d5
 800b550:	0800b5d5 	.word	0x0800b5d5
 800b554:	0800b5c7 	.word	0x0800b5c7
 800b558:	2b40      	cmp	r3, #64	; 0x40
 800b55a:	d037      	beq.n	800b5cc <UART_SetConfig+0x6bc>
 800b55c:	e03a      	b.n	800b5d4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b55e:	f7fe f987 	bl	8009870 <HAL_RCCEx_GetD3PCLK1Freq>
 800b562:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b564:	e03c      	b.n	800b5e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7fe f996 	bl	800989c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b572:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b574:	e034      	b.n	800b5e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b576:	f107 0318 	add.w	r3, r7, #24
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7fe fae2 	bl	8009b44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b580:	69fb      	ldr	r3, [r7, #28]
 800b582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b584:	e02c      	b.n	800b5e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b586:	4b09      	ldr	r3, [pc, #36]	; (800b5ac <UART_SetConfig+0x69c>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f003 0320 	and.w	r3, r3, #32
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d016      	beq.n	800b5c0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b592:	4b06      	ldr	r3, [pc, #24]	; (800b5ac <UART_SetConfig+0x69c>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	08db      	lsrs	r3, r3, #3
 800b598:	f003 0303 	and.w	r3, r3, #3
 800b59c:	4a07      	ldr	r2, [pc, #28]	; (800b5bc <UART_SetConfig+0x6ac>)
 800b59e:	fa22 f303 	lsr.w	r3, r2, r3
 800b5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b5a4:	e01c      	b.n	800b5e0 <UART_SetConfig+0x6d0>
 800b5a6:	bf00      	nop
 800b5a8:	40011400 	.word	0x40011400
 800b5ac:	58024400 	.word	0x58024400
 800b5b0:	40007800 	.word	0x40007800
 800b5b4:	40007c00 	.word	0x40007c00
 800b5b8:	58000c00 	.word	0x58000c00
 800b5bc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b5c0:	4b9d      	ldr	r3, [pc, #628]	; (800b838 <UART_SetConfig+0x928>)
 800b5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5c4:	e00c      	b.n	800b5e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b5c6:	4b9d      	ldr	r3, [pc, #628]	; (800b83c <UART_SetConfig+0x92c>)
 800b5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5ca:	e009      	b.n	800b5e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5d2:	e005      	b.n	800b5e0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b5de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	f000 81de 	beq.w	800b9a4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ec:	4a94      	ldr	r2, [pc, #592]	; (800b840 <UART_SetConfig+0x930>)
 800b5ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5fa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	685a      	ldr	r2, [r3, #4]
 800b600:	4613      	mov	r3, r2
 800b602:	005b      	lsls	r3, r3, #1
 800b604:	4413      	add	r3, r2
 800b606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b608:	429a      	cmp	r2, r3
 800b60a:	d305      	bcc.n	800b618 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b614:	429a      	cmp	r2, r3
 800b616:	d903      	bls.n	800b620 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b618:	2301      	movs	r3, #1
 800b61a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b61e:	e1c1      	b.n	800b9a4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b622:	2200      	movs	r2, #0
 800b624:	60bb      	str	r3, [r7, #8]
 800b626:	60fa      	str	r2, [r7, #12]
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62c:	4a84      	ldr	r2, [pc, #528]	; (800b840 <UART_SetConfig+0x930>)
 800b62e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b632:	b29b      	uxth	r3, r3
 800b634:	2200      	movs	r2, #0
 800b636:	603b      	str	r3, [r7, #0]
 800b638:	607a      	str	r2, [r7, #4]
 800b63a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b63e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b642:	f7f4 fea5 	bl	8000390 <__aeabi_uldivmod>
 800b646:	4602      	mov	r2, r0
 800b648:	460b      	mov	r3, r1
 800b64a:	4610      	mov	r0, r2
 800b64c:	4619      	mov	r1, r3
 800b64e:	f04f 0200 	mov.w	r2, #0
 800b652:	f04f 0300 	mov.w	r3, #0
 800b656:	020b      	lsls	r3, r1, #8
 800b658:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b65c:	0202      	lsls	r2, r0, #8
 800b65e:	6979      	ldr	r1, [r7, #20]
 800b660:	6849      	ldr	r1, [r1, #4]
 800b662:	0849      	lsrs	r1, r1, #1
 800b664:	2000      	movs	r0, #0
 800b666:	460c      	mov	r4, r1
 800b668:	4605      	mov	r5, r0
 800b66a:	eb12 0804 	adds.w	r8, r2, r4
 800b66e:	eb43 0905 	adc.w	r9, r3, r5
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	469a      	mov	sl, r3
 800b67a:	4693      	mov	fp, r2
 800b67c:	4652      	mov	r2, sl
 800b67e:	465b      	mov	r3, fp
 800b680:	4640      	mov	r0, r8
 800b682:	4649      	mov	r1, r9
 800b684:	f7f4 fe84 	bl	8000390 <__aeabi_uldivmod>
 800b688:	4602      	mov	r2, r0
 800b68a:	460b      	mov	r3, r1
 800b68c:	4613      	mov	r3, r2
 800b68e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b696:	d308      	bcc.n	800b6aa <UART_SetConfig+0x79a>
 800b698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b69a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b69e:	d204      	bcs.n	800b6aa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6a6:	60da      	str	r2, [r3, #12]
 800b6a8:	e17c      	b.n	800b9a4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b6b0:	e178      	b.n	800b9a4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	69db      	ldr	r3, [r3, #28]
 800b6b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6ba:	f040 80c5 	bne.w	800b848 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b6be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b6c2:	2b20      	cmp	r3, #32
 800b6c4:	dc48      	bgt.n	800b758 <UART_SetConfig+0x848>
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	db7b      	blt.n	800b7c2 <UART_SetConfig+0x8b2>
 800b6ca:	2b20      	cmp	r3, #32
 800b6cc:	d879      	bhi.n	800b7c2 <UART_SetConfig+0x8b2>
 800b6ce:	a201      	add	r2, pc, #4	; (adr r2, 800b6d4 <UART_SetConfig+0x7c4>)
 800b6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d4:	0800b75f 	.word	0x0800b75f
 800b6d8:	0800b767 	.word	0x0800b767
 800b6dc:	0800b7c3 	.word	0x0800b7c3
 800b6e0:	0800b7c3 	.word	0x0800b7c3
 800b6e4:	0800b76f 	.word	0x0800b76f
 800b6e8:	0800b7c3 	.word	0x0800b7c3
 800b6ec:	0800b7c3 	.word	0x0800b7c3
 800b6f0:	0800b7c3 	.word	0x0800b7c3
 800b6f4:	0800b77f 	.word	0x0800b77f
 800b6f8:	0800b7c3 	.word	0x0800b7c3
 800b6fc:	0800b7c3 	.word	0x0800b7c3
 800b700:	0800b7c3 	.word	0x0800b7c3
 800b704:	0800b7c3 	.word	0x0800b7c3
 800b708:	0800b7c3 	.word	0x0800b7c3
 800b70c:	0800b7c3 	.word	0x0800b7c3
 800b710:	0800b7c3 	.word	0x0800b7c3
 800b714:	0800b78f 	.word	0x0800b78f
 800b718:	0800b7c3 	.word	0x0800b7c3
 800b71c:	0800b7c3 	.word	0x0800b7c3
 800b720:	0800b7c3 	.word	0x0800b7c3
 800b724:	0800b7c3 	.word	0x0800b7c3
 800b728:	0800b7c3 	.word	0x0800b7c3
 800b72c:	0800b7c3 	.word	0x0800b7c3
 800b730:	0800b7c3 	.word	0x0800b7c3
 800b734:	0800b7c3 	.word	0x0800b7c3
 800b738:	0800b7c3 	.word	0x0800b7c3
 800b73c:	0800b7c3 	.word	0x0800b7c3
 800b740:	0800b7c3 	.word	0x0800b7c3
 800b744:	0800b7c3 	.word	0x0800b7c3
 800b748:	0800b7c3 	.word	0x0800b7c3
 800b74c:	0800b7c3 	.word	0x0800b7c3
 800b750:	0800b7c3 	.word	0x0800b7c3
 800b754:	0800b7b5 	.word	0x0800b7b5
 800b758:	2b40      	cmp	r3, #64	; 0x40
 800b75a:	d02e      	beq.n	800b7ba <UART_SetConfig+0x8aa>
 800b75c:	e031      	b.n	800b7c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b75e:	f7fc f8d1 	bl	8007904 <HAL_RCC_GetPCLK1Freq>
 800b762:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b764:	e033      	b.n	800b7ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b766:	f7fc f8e3 	bl	8007930 <HAL_RCC_GetPCLK2Freq>
 800b76a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b76c:	e02f      	b.n	800b7ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b76e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b772:	4618      	mov	r0, r3
 800b774:	f7fe f892 	bl	800989c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b77c:	e027      	b.n	800b7ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b77e:	f107 0318 	add.w	r3, r7, #24
 800b782:	4618      	mov	r0, r3
 800b784:	f7fe f9de 	bl	8009b44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b788:	69fb      	ldr	r3, [r7, #28]
 800b78a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b78c:	e01f      	b.n	800b7ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b78e:	4b2d      	ldr	r3, [pc, #180]	; (800b844 <UART_SetConfig+0x934>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f003 0320 	and.w	r3, r3, #32
 800b796:	2b00      	cmp	r3, #0
 800b798:	d009      	beq.n	800b7ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b79a:	4b2a      	ldr	r3, [pc, #168]	; (800b844 <UART_SetConfig+0x934>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	08db      	lsrs	r3, r3, #3
 800b7a0:	f003 0303 	and.w	r3, r3, #3
 800b7a4:	4a24      	ldr	r2, [pc, #144]	; (800b838 <UART_SetConfig+0x928>)
 800b7a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b7ac:	e00f      	b.n	800b7ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b7ae:	4b22      	ldr	r3, [pc, #136]	; (800b838 <UART_SetConfig+0x928>)
 800b7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7b2:	e00c      	b.n	800b7ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b7b4:	4b21      	ldr	r3, [pc, #132]	; (800b83c <UART_SetConfig+0x92c>)
 800b7b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7b8:	e009      	b.n	800b7ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7c0:	e005      	b.n	800b7ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b7cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b7ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	f000 80e7 	beq.w	800b9a4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7da:	4a19      	ldr	r2, [pc, #100]	; (800b840 <UART_SetConfig+0x930>)
 800b7dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7e8:	005a      	lsls	r2, r3, #1
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	085b      	lsrs	r3, r3, #1
 800b7f0:	441a      	add	r2, r3
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fe:	2b0f      	cmp	r3, #15
 800b800:	d916      	bls.n	800b830 <UART_SetConfig+0x920>
 800b802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b808:	d212      	bcs.n	800b830 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	f023 030f 	bic.w	r3, r3, #15
 800b812:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b816:	085b      	lsrs	r3, r3, #1
 800b818:	b29b      	uxth	r3, r3
 800b81a:	f003 0307 	and.w	r3, r3, #7
 800b81e:	b29a      	uxth	r2, r3
 800b820:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b822:	4313      	orrs	r3, r2
 800b824:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b82c:	60da      	str	r2, [r3, #12]
 800b82e:	e0b9      	b.n	800b9a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b830:	2301      	movs	r3, #1
 800b832:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b836:	e0b5      	b.n	800b9a4 <UART_SetConfig+0xa94>
 800b838:	03d09000 	.word	0x03d09000
 800b83c:	003d0900 	.word	0x003d0900
 800b840:	0800f294 	.word	0x0800f294
 800b844:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b848:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b84c:	2b20      	cmp	r3, #32
 800b84e:	dc49      	bgt.n	800b8e4 <UART_SetConfig+0x9d4>
 800b850:	2b00      	cmp	r3, #0
 800b852:	db7c      	blt.n	800b94e <UART_SetConfig+0xa3e>
 800b854:	2b20      	cmp	r3, #32
 800b856:	d87a      	bhi.n	800b94e <UART_SetConfig+0xa3e>
 800b858:	a201      	add	r2, pc, #4	; (adr r2, 800b860 <UART_SetConfig+0x950>)
 800b85a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b85e:	bf00      	nop
 800b860:	0800b8eb 	.word	0x0800b8eb
 800b864:	0800b8f3 	.word	0x0800b8f3
 800b868:	0800b94f 	.word	0x0800b94f
 800b86c:	0800b94f 	.word	0x0800b94f
 800b870:	0800b8fb 	.word	0x0800b8fb
 800b874:	0800b94f 	.word	0x0800b94f
 800b878:	0800b94f 	.word	0x0800b94f
 800b87c:	0800b94f 	.word	0x0800b94f
 800b880:	0800b90b 	.word	0x0800b90b
 800b884:	0800b94f 	.word	0x0800b94f
 800b888:	0800b94f 	.word	0x0800b94f
 800b88c:	0800b94f 	.word	0x0800b94f
 800b890:	0800b94f 	.word	0x0800b94f
 800b894:	0800b94f 	.word	0x0800b94f
 800b898:	0800b94f 	.word	0x0800b94f
 800b89c:	0800b94f 	.word	0x0800b94f
 800b8a0:	0800b91b 	.word	0x0800b91b
 800b8a4:	0800b94f 	.word	0x0800b94f
 800b8a8:	0800b94f 	.word	0x0800b94f
 800b8ac:	0800b94f 	.word	0x0800b94f
 800b8b0:	0800b94f 	.word	0x0800b94f
 800b8b4:	0800b94f 	.word	0x0800b94f
 800b8b8:	0800b94f 	.word	0x0800b94f
 800b8bc:	0800b94f 	.word	0x0800b94f
 800b8c0:	0800b94f 	.word	0x0800b94f
 800b8c4:	0800b94f 	.word	0x0800b94f
 800b8c8:	0800b94f 	.word	0x0800b94f
 800b8cc:	0800b94f 	.word	0x0800b94f
 800b8d0:	0800b94f 	.word	0x0800b94f
 800b8d4:	0800b94f 	.word	0x0800b94f
 800b8d8:	0800b94f 	.word	0x0800b94f
 800b8dc:	0800b94f 	.word	0x0800b94f
 800b8e0:	0800b941 	.word	0x0800b941
 800b8e4:	2b40      	cmp	r3, #64	; 0x40
 800b8e6:	d02e      	beq.n	800b946 <UART_SetConfig+0xa36>
 800b8e8:	e031      	b.n	800b94e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8ea:	f7fc f80b 	bl	8007904 <HAL_RCC_GetPCLK1Freq>
 800b8ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b8f0:	e033      	b.n	800b95a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8f2:	f7fc f81d 	bl	8007930 <HAL_RCC_GetPCLK2Freq>
 800b8f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b8f8:	e02f      	b.n	800b95a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7fd ffcc 	bl	800989c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b906:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b908:	e027      	b.n	800b95a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b90a:	f107 0318 	add.w	r3, r7, #24
 800b90e:	4618      	mov	r0, r3
 800b910:	f7fe f918 	bl	8009b44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b914:	69fb      	ldr	r3, [r7, #28]
 800b916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b918:	e01f      	b.n	800b95a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b91a:	4b2d      	ldr	r3, [pc, #180]	; (800b9d0 <UART_SetConfig+0xac0>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f003 0320 	and.w	r3, r3, #32
 800b922:	2b00      	cmp	r3, #0
 800b924:	d009      	beq.n	800b93a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b926:	4b2a      	ldr	r3, [pc, #168]	; (800b9d0 <UART_SetConfig+0xac0>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	08db      	lsrs	r3, r3, #3
 800b92c:	f003 0303 	and.w	r3, r3, #3
 800b930:	4a28      	ldr	r2, [pc, #160]	; (800b9d4 <UART_SetConfig+0xac4>)
 800b932:	fa22 f303 	lsr.w	r3, r2, r3
 800b936:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b938:	e00f      	b.n	800b95a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b93a:	4b26      	ldr	r3, [pc, #152]	; (800b9d4 <UART_SetConfig+0xac4>)
 800b93c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b93e:	e00c      	b.n	800b95a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b940:	4b25      	ldr	r3, [pc, #148]	; (800b9d8 <UART_SetConfig+0xac8>)
 800b942:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b944:	e009      	b.n	800b95a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b94a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b94c:	e005      	b.n	800b95a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b94e:	2300      	movs	r3, #0
 800b950:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b952:	2301      	movs	r3, #1
 800b954:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b958:	bf00      	nop
    }

    if (pclk != 0U)
 800b95a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d021      	beq.n	800b9a4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b964:	4a1d      	ldr	r2, [pc, #116]	; (800b9dc <UART_SetConfig+0xacc>)
 800b966:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b96a:	461a      	mov	r2, r3
 800b96c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b96e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	085b      	lsrs	r3, r3, #1
 800b978:	441a      	add	r2, r3
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b982:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b986:	2b0f      	cmp	r3, #15
 800b988:	d909      	bls.n	800b99e <UART_SetConfig+0xa8e>
 800b98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b98c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b990:	d205      	bcs.n	800b99e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b994:	b29a      	uxth	r2, r3
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	60da      	str	r2, [r3, #12]
 800b99c:	e002      	b.n	800b9a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b9c0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3748      	adds	r7, #72	; 0x48
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b9ce:	bf00      	nop
 800b9d0:	58024400 	.word	0x58024400
 800b9d4:	03d09000 	.word	0x03d09000
 800b9d8:	003d0900 	.word	0x003d0900
 800b9dc:	0800f294 	.word	0x0800f294

0800b9e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b083      	sub	sp, #12
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ec:	f003 0301 	and.w	r3, r3, #1
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d00a      	beq.n	800ba0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	430a      	orrs	r2, r1
 800ba08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba0e:	f003 0302 	and.w	r3, r3, #2
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00a      	beq.n	800ba2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	685b      	ldr	r3, [r3, #4]
 800ba1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	430a      	orrs	r2, r1
 800ba2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba30:	f003 0304 	and.w	r3, r3, #4
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d00a      	beq.n	800ba4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	430a      	orrs	r2, r1
 800ba4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba52:	f003 0308 	and.w	r3, r3, #8
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d00a      	beq.n	800ba70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	430a      	orrs	r2, r1
 800ba6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba74:	f003 0310 	and.w	r3, r3, #16
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d00a      	beq.n	800ba92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	689b      	ldr	r3, [r3, #8]
 800ba82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	430a      	orrs	r2, r1
 800ba90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba96:	f003 0320 	and.w	r3, r3, #32
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d00a      	beq.n	800bab4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	689b      	ldr	r3, [r3, #8]
 800baa4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	430a      	orrs	r2, r1
 800bab2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800babc:	2b00      	cmp	r3, #0
 800babe:	d01a      	beq.n	800baf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	430a      	orrs	r2, r1
 800bad4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bade:	d10a      	bne.n	800baf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	430a      	orrs	r2, r1
 800baf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bafa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00a      	beq.n	800bb18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	430a      	orrs	r2, r1
 800bb16:	605a      	str	r2, [r3, #4]
  }
}
 800bb18:	bf00      	nop
 800bb1a:	370c      	adds	r7, #12
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr

0800bb24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b098      	sub	sp, #96	; 0x60
 800bb28:	af02      	add	r7, sp, #8
 800bb2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb34:	f7f5 ff70 	bl	8001a18 <HAL_GetTick>
 800bb38:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f003 0308 	and.w	r3, r3, #8
 800bb44:	2b08      	cmp	r3, #8
 800bb46:	d12f      	bne.n	800bba8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb4c:	9300      	str	r3, [sp, #0]
 800bb4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb50:	2200      	movs	r2, #0
 800bb52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f000 f88e 	bl	800bc78 <UART_WaitOnFlagUntilTimeout>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d022      	beq.n	800bba8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb6a:	e853 3f00 	ldrex	r3, [r3]
 800bb6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb76:	653b      	str	r3, [r7, #80]	; 0x50
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb80:	647b      	str	r3, [r7, #68]	; 0x44
 800bb82:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb88:	e841 2300 	strex	r3, r2, [r1]
 800bb8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d1e6      	bne.n	800bb62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2220      	movs	r2, #32
 800bb98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bba4:	2303      	movs	r3, #3
 800bba6:	e063      	b.n	800bc70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f003 0304 	and.w	r3, r3, #4
 800bbb2:	2b04      	cmp	r3, #4
 800bbb4:	d149      	bne.n	800bc4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbb6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bbba:	9300      	str	r3, [sp, #0]
 800bbbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 f857 	bl	800bc78 <UART_WaitOnFlagUntilTimeout>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d03c      	beq.n	800bc4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd8:	e853 3f00 	ldrex	r3, [r3]
 800bbdc:	623b      	str	r3, [r7, #32]
   return(result);
 800bbde:	6a3b      	ldr	r3, [r7, #32]
 800bbe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bbe4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	461a      	mov	r2, r3
 800bbec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbee:	633b      	str	r3, [r7, #48]	; 0x30
 800bbf0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bbf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbf6:	e841 2300 	strex	r3, r2, [r1]
 800bbfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d1e6      	bne.n	800bbd0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	3308      	adds	r3, #8
 800bc08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	e853 3f00 	ldrex	r3, [r3]
 800bc10:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f023 0301 	bic.w	r3, r3, #1
 800bc18:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	3308      	adds	r3, #8
 800bc20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc22:	61fa      	str	r2, [r7, #28]
 800bc24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc26:	69b9      	ldr	r1, [r7, #24]
 800bc28:	69fa      	ldr	r2, [r7, #28]
 800bc2a:	e841 2300 	strex	r3, r2, [r1]
 800bc2e:	617b      	str	r3, [r7, #20]
   return(result);
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d1e5      	bne.n	800bc02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2220      	movs	r2, #32
 800bc3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc46:	2303      	movs	r3, #3
 800bc48:	e012      	b.n	800bc70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2220      	movs	r2, #32
 800bc4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2220      	movs	r2, #32
 800bc56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bc6e:	2300      	movs	r3, #0
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3758      	adds	r7, #88	; 0x58
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	603b      	str	r3, [r7, #0]
 800bc84:	4613      	mov	r3, r2
 800bc86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc88:	e049      	b.n	800bd1e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc8a:	69bb      	ldr	r3, [r7, #24]
 800bc8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc90:	d045      	beq.n	800bd1e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc92:	f7f5 fec1 	bl	8001a18 <HAL_GetTick>
 800bc96:	4602      	mov	r2, r0
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	1ad3      	subs	r3, r2, r3
 800bc9c:	69ba      	ldr	r2, [r7, #24]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d302      	bcc.n	800bca8 <UART_WaitOnFlagUntilTimeout+0x30>
 800bca2:	69bb      	ldr	r3, [r7, #24]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d101      	bne.n	800bcac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bca8:	2303      	movs	r3, #3
 800bcaa:	e048      	b.n	800bd3e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f003 0304 	and.w	r3, r3, #4
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d031      	beq.n	800bd1e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	69db      	ldr	r3, [r3, #28]
 800bcc0:	f003 0308 	and.w	r3, r3, #8
 800bcc4:	2b08      	cmp	r3, #8
 800bcc6:	d110      	bne.n	800bcea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2208      	movs	r2, #8
 800bcce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800bcd0:	68f8      	ldr	r0, [r7, #12]
 800bcd2:	f000 f839 	bl	800bd48 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2208      	movs	r2, #8
 800bcda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2200      	movs	r2, #0
 800bce2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800bce6:	2301      	movs	r3, #1
 800bce8:	e029      	b.n	800bd3e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	69db      	ldr	r3, [r3, #28]
 800bcf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcf8:	d111      	bne.n	800bd1e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd04:	68f8      	ldr	r0, [r7, #12]
 800bd06:	f000 f81f 	bl	800bd48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	2220      	movs	r2, #32
 800bd0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2200      	movs	r2, #0
 800bd16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bd1a:	2303      	movs	r3, #3
 800bd1c:	e00f      	b.n	800bd3e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	69da      	ldr	r2, [r3, #28]
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	4013      	ands	r3, r2
 800bd28:	68ba      	ldr	r2, [r7, #8]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	bf0c      	ite	eq
 800bd2e:	2301      	moveq	r3, #1
 800bd30:	2300      	movne	r3, #0
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	461a      	mov	r2, r3
 800bd36:	79fb      	ldrb	r3, [r7, #7]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d0a6      	beq.n	800bc8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd3c:	2300      	movs	r3, #0
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3710      	adds	r7, #16
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
	...

0800bd48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b095      	sub	sp, #84	; 0x54
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd58:	e853 3f00 	ldrex	r3, [r3]
 800bd5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd64:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd6e:	643b      	str	r3, [r7, #64]	; 0x40
 800bd70:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd76:	e841 2300 	strex	r3, r2, [r1]
 800bd7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d1e6      	bne.n	800bd50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	3308      	adds	r3, #8
 800bd88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd8a:	6a3b      	ldr	r3, [r7, #32]
 800bd8c:	e853 3f00 	ldrex	r3, [r3]
 800bd90:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd92:	69fa      	ldr	r2, [r7, #28]
 800bd94:	4b1e      	ldr	r3, [pc, #120]	; (800be10 <UART_EndRxTransfer+0xc8>)
 800bd96:	4013      	ands	r3, r2
 800bd98:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	3308      	adds	r3, #8
 800bda0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bda2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bda4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bda8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdaa:	e841 2300 	strex	r3, r2, [r1]
 800bdae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d1e5      	bne.n	800bd82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d118      	bne.n	800bdf0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	e853 3f00 	ldrex	r3, [r3]
 800bdca:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	f023 0310 	bic.w	r3, r3, #16
 800bdd2:	647b      	str	r3, [r7, #68]	; 0x44
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	461a      	mov	r2, r3
 800bdda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bddc:	61bb      	str	r3, [r7, #24]
 800bdde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde0:	6979      	ldr	r1, [r7, #20]
 800bde2:	69ba      	ldr	r2, [r7, #24]
 800bde4:	e841 2300 	strex	r3, r2, [r1]
 800bde8:	613b      	str	r3, [r7, #16]
   return(result);
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d1e6      	bne.n	800bdbe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2220      	movs	r2, #32
 800bdf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2200      	movs	r2, #0
 800be02:	675a      	str	r2, [r3, #116]	; 0x74
}
 800be04:	bf00      	nop
 800be06:	3754      	adds	r7, #84	; 0x54
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr
 800be10:	effffffe 	.word	0xeffffffe

0800be14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800be22:	2b01      	cmp	r3, #1
 800be24:	d101      	bne.n	800be2a <HAL_UARTEx_DisableFifoMode+0x16>
 800be26:	2302      	movs	r3, #2
 800be28:	e027      	b.n	800be7a <HAL_UARTEx_DisableFifoMode+0x66>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2201      	movs	r2, #1
 800be2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2224      	movs	r2, #36	; 0x24
 800be36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f022 0201 	bic.w	r2, r2, #1
 800be50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800be58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2200      	movs	r2, #0
 800be5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	68fa      	ldr	r2, [r7, #12]
 800be66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2220      	movs	r2, #32
 800be6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800be78:	2300      	movs	r3, #0
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3714      	adds	r7, #20
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr

0800be86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be86:	b580      	push	{r7, lr}
 800be88:	b084      	sub	sp, #16
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
 800be8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800be96:	2b01      	cmp	r3, #1
 800be98:	d101      	bne.n	800be9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800be9a:	2302      	movs	r3, #2
 800be9c:	e02d      	b.n	800befa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2201      	movs	r2, #1
 800bea2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2224      	movs	r2, #36	; 0x24
 800beaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f022 0201 	bic.w	r2, r2, #1
 800bec4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	683a      	ldr	r2, [r7, #0]
 800bed6:	430a      	orrs	r2, r1
 800bed8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 f850 	bl	800bf80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	68fa      	ldr	r2, [r7, #12]
 800bee6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2220      	movs	r2, #32
 800beec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bef8:	2300      	movs	r3, #0
}
 800befa:	4618      	mov	r0, r3
 800befc:	3710      	adds	r7, #16
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}

0800bf02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b084      	sub	sp, #16
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
 800bf0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d101      	bne.n	800bf1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bf16:	2302      	movs	r3, #2
 800bf18:	e02d      	b.n	800bf76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2224      	movs	r2, #36	; 0x24
 800bf26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	681a      	ldr	r2, [r3, #0]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f022 0201 	bic.w	r2, r2, #1
 800bf40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	683a      	ldr	r2, [r7, #0]
 800bf52:	430a      	orrs	r2, r1
 800bf54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 f812 	bl	800bf80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	68fa      	ldr	r2, [r7, #12]
 800bf62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2220      	movs	r2, #32
 800bf68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bf74:	2300      	movs	r3, #0
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3710      	adds	r7, #16
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
	...

0800bf80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b085      	sub	sp, #20
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d108      	bne.n	800bfa2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2201      	movs	r2, #1
 800bf94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bfa0:	e031      	b.n	800c006 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bfa2:	2310      	movs	r3, #16
 800bfa4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bfa6:	2310      	movs	r3, #16
 800bfa8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	689b      	ldr	r3, [r3, #8]
 800bfb0:	0e5b      	lsrs	r3, r3, #25
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	f003 0307 	and.w	r3, r3, #7
 800bfb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	689b      	ldr	r3, [r3, #8]
 800bfc0:	0f5b      	lsrs	r3, r3, #29
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	f003 0307 	and.w	r3, r3, #7
 800bfc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bfca:	7bbb      	ldrb	r3, [r7, #14]
 800bfcc:	7b3a      	ldrb	r2, [r7, #12]
 800bfce:	4911      	ldr	r1, [pc, #68]	; (800c014 <UARTEx_SetNbDataToProcess+0x94>)
 800bfd0:	5c8a      	ldrb	r2, [r1, r2]
 800bfd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bfd6:	7b3a      	ldrb	r2, [r7, #12]
 800bfd8:	490f      	ldr	r1, [pc, #60]	; (800c018 <UARTEx_SetNbDataToProcess+0x98>)
 800bfda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bfdc:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfe0:	b29a      	uxth	r2, r3
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bfe8:	7bfb      	ldrb	r3, [r7, #15]
 800bfea:	7b7a      	ldrb	r2, [r7, #13]
 800bfec:	4909      	ldr	r1, [pc, #36]	; (800c014 <UARTEx_SetNbDataToProcess+0x94>)
 800bfee:	5c8a      	ldrb	r2, [r1, r2]
 800bff0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bff4:	7b7a      	ldrb	r2, [r7, #13]
 800bff6:	4908      	ldr	r1, [pc, #32]	; (800c018 <UARTEx_SetNbDataToProcess+0x98>)
 800bff8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bffa:	fb93 f3f2 	sdiv	r3, r3, r2
 800bffe:	b29a      	uxth	r2, r3
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c006:	bf00      	nop
 800c008:	3714      	adds	r7, #20
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr
 800c012:	bf00      	nop
 800c014:	0800f2ac 	.word	0x0800f2ac
 800c018:	0800f2b4 	.word	0x0800f2b4

0800c01c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c01c:	b084      	sub	sp, #16
 800c01e:	b580      	push	{r7, lr}
 800c020:	b084      	sub	sp, #16
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
 800c026:	f107 001c 	add.w	r0, r7, #28
 800c02a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c030:	2b01      	cmp	r3, #1
 800c032:	d120      	bne.n	800c076 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c038:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	68da      	ldr	r2, [r3, #12]
 800c044:	4b2a      	ldr	r3, [pc, #168]	; (800c0f0 <USB_CoreInit+0xd4>)
 800c046:	4013      	ands	r3, r2
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d105      	bne.n	800c06a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	68db      	ldr	r3, [r3, #12]
 800c062:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 faac 	bl	800c5c8 <USB_CoreReset>
 800c070:	4603      	mov	r3, r0
 800c072:	73fb      	strb	r3, [r7, #15]
 800c074:	e01a      	b.n	800c0ac <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	68db      	ldr	r3, [r3, #12]
 800c07a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f000 faa0 	bl	800c5c8 <USB_CoreReset>
 800c088:	4603      	mov	r3, r0
 800c08a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c08c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d106      	bne.n	800c0a0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c096:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	639a      	str	r2, [r3, #56]	; 0x38
 800c09e:	e005      	b.n	800c0ac <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d116      	bne.n	800c0e0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0b6:	b29a      	uxth	r2, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c0c0:	4b0c      	ldr	r3, [pc, #48]	; (800c0f4 <USB_CoreInit+0xd8>)
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	689b      	ldr	r3, [r3, #8]
 800c0cc:	f043 0206 	orr.w	r2, r3, #6
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	689b      	ldr	r3, [r3, #8]
 800c0d8:	f043 0220 	orr.w	r2, r3, #32
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c0e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3710      	adds	r7, #16
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c0ec:	b004      	add	sp, #16
 800c0ee:	4770      	bx	lr
 800c0f0:	ffbdffbf 	.word	0xffbdffbf
 800c0f4:	03ee0000 	.word	0x03ee0000

0800c0f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b083      	sub	sp, #12
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	689b      	ldr	r3, [r3, #8]
 800c104:	f023 0201 	bic.w	r2, r3, #1
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c10c:	2300      	movs	r3, #0
}
 800c10e:	4618      	mov	r0, r3
 800c110:	370c      	adds	r7, #12
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr

0800c11a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b084      	sub	sp, #16
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
 800c122:	460b      	mov	r3, r1
 800c124:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c126:	2300      	movs	r3, #0
 800c128:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	68db      	ldr	r3, [r3, #12]
 800c12e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c136:	78fb      	ldrb	r3, [r7, #3]
 800c138:	2b01      	cmp	r3, #1
 800c13a:	d115      	bne.n	800c168 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c148:	2001      	movs	r0, #1
 800c14a:	f7f5 fc71 	bl	8001a30 <HAL_Delay>
      ms++;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	3301      	adds	r3, #1
 800c152:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 fa29 	bl	800c5ac <USB_GetMode>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d01e      	beq.n	800c19e <USB_SetCurrentMode+0x84>
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2b31      	cmp	r3, #49	; 0x31
 800c164:	d9f0      	bls.n	800c148 <USB_SetCurrentMode+0x2e>
 800c166:	e01a      	b.n	800c19e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c168:	78fb      	ldrb	r3, [r7, #3]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d115      	bne.n	800c19a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c17a:	2001      	movs	r0, #1
 800c17c:	f7f5 fc58 	bl	8001a30 <HAL_Delay>
      ms++;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	3301      	adds	r3, #1
 800c184:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f000 fa10 	bl	800c5ac <USB_GetMode>
 800c18c:	4603      	mov	r3, r0
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d005      	beq.n	800c19e <USB_SetCurrentMode+0x84>
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2b31      	cmp	r3, #49	; 0x31
 800c196:	d9f0      	bls.n	800c17a <USB_SetCurrentMode+0x60>
 800c198:	e001      	b.n	800c19e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c19a:	2301      	movs	r3, #1
 800c19c:	e005      	b.n	800c1aa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2b32      	cmp	r3, #50	; 0x32
 800c1a2:	d101      	bne.n	800c1a8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	e000      	b.n	800c1aa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c1a8:	2300      	movs	r3, #0
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
	...

0800c1b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c1b4:	b084      	sub	sp, #16
 800c1b6:	b580      	push	{r7, lr}
 800c1b8:	b086      	sub	sp, #24
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
 800c1be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c1c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	613b      	str	r3, [r7, #16]
 800c1d2:	e009      	b.n	800c1e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	3340      	adds	r3, #64	; 0x40
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	4413      	add	r3, r2
 800c1de:	2200      	movs	r2, #0
 800c1e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	613b      	str	r3, [r7, #16]
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	2b0e      	cmp	r3, #14
 800c1ec:	d9f2      	bls.n	800c1d4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c1ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d11c      	bne.n	800c22e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	68fa      	ldr	r2, [r7, #12]
 800c1fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c202:	f043 0302 	orr.w	r3, r3, #2
 800c206:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c20c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	601a      	str	r2, [r3, #0]
 800c22c:	e005      	b.n	800c23a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c232:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c240:	461a      	mov	r2, r3
 800c242:	2300      	movs	r3, #0
 800c244:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c24c:	4619      	mov	r1, r3
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c254:	461a      	mov	r2, r3
 800c256:	680b      	ldr	r3, [r1, #0]
 800c258:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d10c      	bne.n	800c27a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c262:	2b00      	cmp	r3, #0
 800c264:	d104      	bne.n	800c270 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c266:	2100      	movs	r1, #0
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 f965 	bl	800c538 <USB_SetDevSpeed>
 800c26e:	e008      	b.n	800c282 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c270:	2101      	movs	r1, #1
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 f960 	bl	800c538 <USB_SetDevSpeed>
 800c278:	e003      	b.n	800c282 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c27a:	2103      	movs	r1, #3
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 f95b 	bl	800c538 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c282:	2110      	movs	r1, #16
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f000 f8f3 	bl	800c470 <USB_FlushTxFifo>
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d001      	beq.n	800c294 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c290:	2301      	movs	r3, #1
 800c292:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f000 f91f 	bl	800c4d8 <USB_FlushRxFifo>
 800c29a:	4603      	mov	r3, r0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d001      	beq.n	800c2a4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	613b      	str	r3, [r7, #16]
 800c2cc:	e043      	b.n	800c356 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	015a      	lsls	r2, r3, #5
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	4413      	add	r3, r2
 800c2d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c2e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c2e4:	d118      	bne.n	800c318 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d10a      	bne.n	800c302 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	015a      	lsls	r2, r3, #5
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c2fe:	6013      	str	r3, [r2, #0]
 800c300:	e013      	b.n	800c32a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	015a      	lsls	r2, r3, #5
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	4413      	add	r3, r2
 800c30a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c30e:	461a      	mov	r2, r3
 800c310:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c314:	6013      	str	r3, [r2, #0]
 800c316:	e008      	b.n	800c32a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	015a      	lsls	r2, r3, #5
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	4413      	add	r3, r2
 800c320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c324:	461a      	mov	r2, r3
 800c326:	2300      	movs	r3, #0
 800c328:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	015a      	lsls	r2, r3, #5
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	4413      	add	r3, r2
 800c332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c336:	461a      	mov	r2, r3
 800c338:	2300      	movs	r3, #0
 800c33a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	015a      	lsls	r2, r3, #5
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	4413      	add	r3, r2
 800c344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c348:	461a      	mov	r2, r3
 800c34a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c34e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	3301      	adds	r3, #1
 800c354:	613b      	str	r3, [r7, #16]
 800c356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c358:	693a      	ldr	r2, [r7, #16]
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d3b7      	bcc.n	800c2ce <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c35e:	2300      	movs	r3, #0
 800c360:	613b      	str	r3, [r7, #16]
 800c362:	e043      	b.n	800c3ec <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	015a      	lsls	r2, r3, #5
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	4413      	add	r3, r2
 800c36c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c376:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c37a:	d118      	bne.n	800c3ae <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d10a      	bne.n	800c398 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	015a      	lsls	r2, r3, #5
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	4413      	add	r3, r2
 800c38a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c38e:	461a      	mov	r2, r3
 800c390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c394:	6013      	str	r3, [r2, #0]
 800c396:	e013      	b.n	800c3c0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	015a      	lsls	r2, r3, #5
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	4413      	add	r3, r2
 800c3a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c3aa:	6013      	str	r3, [r2, #0]
 800c3ac:	e008      	b.n	800c3c0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	015a      	lsls	r2, r3, #5
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	4413      	add	r3, r2
 800c3b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	2300      	movs	r3, #0
 800c3be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	015a      	lsls	r2, r3, #5
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	015a      	lsls	r2, r3, #5
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	4413      	add	r3, r2
 800c3da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3de:	461a      	mov	r2, r3
 800c3e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c3e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	613b      	str	r3, [r7, #16]
 800c3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ee:	693a      	ldr	r2, [r7, #16]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d3b7      	bcc.n	800c364 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3fa:	691b      	ldr	r3, [r3, #16]
 800c3fc:	68fa      	ldr	r2, [r7, #12]
 800c3fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c402:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c406:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2200      	movs	r2, #0
 800c40c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c414:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d105      	bne.n	800c428 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	699b      	ldr	r3, [r3, #24]
 800c420:	f043 0210 	orr.w	r2, r3, #16
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	699a      	ldr	r2, [r3, #24]
 800c42c:	4b0e      	ldr	r3, [pc, #56]	; (800c468 <USB_DevInit+0x2b4>)
 800c42e:	4313      	orrs	r3, r2
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c436:	2b00      	cmp	r3, #0
 800c438:	d005      	beq.n	800c446 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	699b      	ldr	r3, [r3, #24]
 800c43e:	f043 0208 	orr.w	r2, r3, #8
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d105      	bne.n	800c458 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	699a      	ldr	r2, [r3, #24]
 800c450:	4b06      	ldr	r3, [pc, #24]	; (800c46c <USB_DevInit+0x2b8>)
 800c452:	4313      	orrs	r3, r2
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c458:	7dfb      	ldrb	r3, [r7, #23]
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3718      	adds	r7, #24
 800c45e:	46bd      	mov	sp, r7
 800c460:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c464:	b004      	add	sp, #16
 800c466:	4770      	bx	lr
 800c468:	803c3800 	.word	0x803c3800
 800c46c:	40000004 	.word	0x40000004

0800c470 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c470:	b480      	push	{r7}
 800c472:	b085      	sub	sp, #20
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c47a:	2300      	movs	r3, #0
 800c47c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	3301      	adds	r3, #1
 800c482:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	4a13      	ldr	r2, [pc, #76]	; (800c4d4 <USB_FlushTxFifo+0x64>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d901      	bls.n	800c490 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c48c:	2303      	movs	r3, #3
 800c48e:	e01b      	b.n	800c4c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	691b      	ldr	r3, [r3, #16]
 800c494:	2b00      	cmp	r3, #0
 800c496:	daf2      	bge.n	800c47e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c498:	2300      	movs	r3, #0
 800c49a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	019b      	lsls	r3, r3, #6
 800c4a0:	f043 0220 	orr.w	r2, r3, #32
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	4a08      	ldr	r2, [pc, #32]	; (800c4d4 <USB_FlushTxFifo+0x64>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d901      	bls.n	800c4ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c4b6:	2303      	movs	r3, #3
 800c4b8:	e006      	b.n	800c4c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	691b      	ldr	r3, [r3, #16]
 800c4be:	f003 0320 	and.w	r3, r3, #32
 800c4c2:	2b20      	cmp	r3, #32
 800c4c4:	d0f0      	beq.n	800c4a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c4c6:	2300      	movs	r3, #0
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3714      	adds	r7, #20
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr
 800c4d4:	00030d40 	.word	0x00030d40

0800c4d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	3301      	adds	r3, #1
 800c4e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	4a11      	ldr	r2, [pc, #68]	; (800c534 <USB_FlushRxFifo+0x5c>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d901      	bls.n	800c4f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c4f2:	2303      	movs	r3, #3
 800c4f4:	e018      	b.n	800c528 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	691b      	ldr	r3, [r3, #16]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	daf2      	bge.n	800c4e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c4fe:	2300      	movs	r3, #0
 800c500:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2210      	movs	r2, #16
 800c506:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	3301      	adds	r3, #1
 800c50c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	4a08      	ldr	r2, [pc, #32]	; (800c534 <USB_FlushRxFifo+0x5c>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d901      	bls.n	800c51a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c516:	2303      	movs	r3, #3
 800c518:	e006      	b.n	800c528 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	691b      	ldr	r3, [r3, #16]
 800c51e:	f003 0310 	and.w	r3, r3, #16
 800c522:	2b10      	cmp	r3, #16
 800c524:	d0f0      	beq.n	800c508 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c526:	2300      	movs	r3, #0
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3714      	adds	r7, #20
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr
 800c534:	00030d40 	.word	0x00030d40

0800c538 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c538:	b480      	push	{r7}
 800c53a:	b085      	sub	sp, #20
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	460b      	mov	r3, r1
 800c542:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	78fb      	ldrb	r3, [r7, #3]
 800c552:	68f9      	ldr	r1, [r7, #12]
 800c554:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c558:	4313      	orrs	r3, r2
 800c55a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3714      	adds	r7, #20
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr

0800c56a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c56a:	b480      	push	{r7}
 800c56c:	b085      	sub	sp, #20
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c584:	f023 0303 	bic.w	r3, r3, #3
 800c588:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	68fa      	ldr	r2, [r7, #12]
 800c594:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c598:	f043 0302 	orr.w	r3, r3, #2
 800c59c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c59e:	2300      	movs	r3, #0
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3714      	adds	r7, #20
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr

0800c5ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b083      	sub	sp, #12
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	695b      	ldr	r3, [r3, #20]
 800c5b8:	f003 0301 	and.w	r3, r3, #1
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	370c      	adds	r7, #12
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr

0800c5c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	4a13      	ldr	r2, [pc, #76]	; (800c62c <USB_CoreReset+0x64>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d901      	bls.n	800c5e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c5e2:	2303      	movs	r3, #3
 800c5e4:	e01b      	b.n	800c61e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	691b      	ldr	r3, [r3, #16]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	daf2      	bge.n	800c5d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	691b      	ldr	r3, [r3, #16]
 800c5f6:	f043 0201 	orr.w	r2, r3, #1
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	3301      	adds	r3, #1
 800c602:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	4a09      	ldr	r2, [pc, #36]	; (800c62c <USB_CoreReset+0x64>)
 800c608:	4293      	cmp	r3, r2
 800c60a:	d901      	bls.n	800c610 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c60c:	2303      	movs	r3, #3
 800c60e:	e006      	b.n	800c61e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	691b      	ldr	r3, [r3, #16]
 800c614:	f003 0301 	and.w	r3, r3, #1
 800c618:	2b01      	cmp	r3, #1
 800c61a:	d0f0      	beq.n	800c5fe <USB_CoreReset+0x36>

  return HAL_OK;
 800c61c:	2300      	movs	r3, #0
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3714      	adds	r7, #20
 800c622:	46bd      	mov	sp, r7
 800c624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c628:	4770      	bx	lr
 800c62a:	bf00      	nop
 800c62c:	00030d40 	.word	0x00030d40

0800c630 <__cvt>:
 800c630:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c632:	ed2d 8b02 	vpush	{d8}
 800c636:	eeb0 8b40 	vmov.f64	d8, d0
 800c63a:	b085      	sub	sp, #20
 800c63c:	4617      	mov	r7, r2
 800c63e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c640:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c642:	ee18 2a90 	vmov	r2, s17
 800c646:	f025 0520 	bic.w	r5, r5, #32
 800c64a:	2a00      	cmp	r2, #0
 800c64c:	bfb6      	itet	lt
 800c64e:	222d      	movlt	r2, #45	; 0x2d
 800c650:	2200      	movge	r2, #0
 800c652:	eeb1 8b40 	vneglt.f64	d8, d0
 800c656:	2d46      	cmp	r5, #70	; 0x46
 800c658:	460c      	mov	r4, r1
 800c65a:	701a      	strb	r2, [r3, #0]
 800c65c:	d004      	beq.n	800c668 <__cvt+0x38>
 800c65e:	2d45      	cmp	r5, #69	; 0x45
 800c660:	d100      	bne.n	800c664 <__cvt+0x34>
 800c662:	3401      	adds	r4, #1
 800c664:	2102      	movs	r1, #2
 800c666:	e000      	b.n	800c66a <__cvt+0x3a>
 800c668:	2103      	movs	r1, #3
 800c66a:	ab03      	add	r3, sp, #12
 800c66c:	9301      	str	r3, [sp, #4]
 800c66e:	ab02      	add	r3, sp, #8
 800c670:	9300      	str	r3, [sp, #0]
 800c672:	4622      	mov	r2, r4
 800c674:	4633      	mov	r3, r6
 800c676:	eeb0 0b48 	vmov.f64	d0, d8
 800c67a:	f000 fe91 	bl	800d3a0 <_dtoa_r>
 800c67e:	2d47      	cmp	r5, #71	; 0x47
 800c680:	d101      	bne.n	800c686 <__cvt+0x56>
 800c682:	07fb      	lsls	r3, r7, #31
 800c684:	d51a      	bpl.n	800c6bc <__cvt+0x8c>
 800c686:	2d46      	cmp	r5, #70	; 0x46
 800c688:	eb00 0204 	add.w	r2, r0, r4
 800c68c:	d10c      	bne.n	800c6a8 <__cvt+0x78>
 800c68e:	7803      	ldrb	r3, [r0, #0]
 800c690:	2b30      	cmp	r3, #48	; 0x30
 800c692:	d107      	bne.n	800c6a4 <__cvt+0x74>
 800c694:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c69c:	bf1c      	itt	ne
 800c69e:	f1c4 0401 	rsbne	r4, r4, #1
 800c6a2:	6034      	strne	r4, [r6, #0]
 800c6a4:	6833      	ldr	r3, [r6, #0]
 800c6a6:	441a      	add	r2, r3
 800c6a8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c6ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6b0:	bf08      	it	eq
 800c6b2:	9203      	streq	r2, [sp, #12]
 800c6b4:	2130      	movs	r1, #48	; 0x30
 800c6b6:	9b03      	ldr	r3, [sp, #12]
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d307      	bcc.n	800c6cc <__cvt+0x9c>
 800c6bc:	9b03      	ldr	r3, [sp, #12]
 800c6be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6c0:	1a1b      	subs	r3, r3, r0
 800c6c2:	6013      	str	r3, [r2, #0]
 800c6c4:	b005      	add	sp, #20
 800c6c6:	ecbd 8b02 	vpop	{d8}
 800c6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6cc:	1c5c      	adds	r4, r3, #1
 800c6ce:	9403      	str	r4, [sp, #12]
 800c6d0:	7019      	strb	r1, [r3, #0]
 800c6d2:	e7f0      	b.n	800c6b6 <__cvt+0x86>

0800c6d4 <__exponent>:
 800c6d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	2900      	cmp	r1, #0
 800c6da:	bfb8      	it	lt
 800c6dc:	4249      	neglt	r1, r1
 800c6de:	f803 2b02 	strb.w	r2, [r3], #2
 800c6e2:	bfb4      	ite	lt
 800c6e4:	222d      	movlt	r2, #45	; 0x2d
 800c6e6:	222b      	movge	r2, #43	; 0x2b
 800c6e8:	2909      	cmp	r1, #9
 800c6ea:	7042      	strb	r2, [r0, #1]
 800c6ec:	dd2a      	ble.n	800c744 <__exponent+0x70>
 800c6ee:	f10d 0207 	add.w	r2, sp, #7
 800c6f2:	4617      	mov	r7, r2
 800c6f4:	260a      	movs	r6, #10
 800c6f6:	4694      	mov	ip, r2
 800c6f8:	fb91 f5f6 	sdiv	r5, r1, r6
 800c6fc:	fb06 1415 	mls	r4, r6, r5, r1
 800c700:	3430      	adds	r4, #48	; 0x30
 800c702:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c706:	460c      	mov	r4, r1
 800c708:	2c63      	cmp	r4, #99	; 0x63
 800c70a:	f102 32ff 	add.w	r2, r2, #4294967295
 800c70e:	4629      	mov	r1, r5
 800c710:	dcf1      	bgt.n	800c6f6 <__exponent+0x22>
 800c712:	3130      	adds	r1, #48	; 0x30
 800c714:	f1ac 0402 	sub.w	r4, ip, #2
 800c718:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c71c:	1c41      	adds	r1, r0, #1
 800c71e:	4622      	mov	r2, r4
 800c720:	42ba      	cmp	r2, r7
 800c722:	d30a      	bcc.n	800c73a <__exponent+0x66>
 800c724:	f10d 0209 	add.w	r2, sp, #9
 800c728:	eba2 020c 	sub.w	r2, r2, ip
 800c72c:	42bc      	cmp	r4, r7
 800c72e:	bf88      	it	hi
 800c730:	2200      	movhi	r2, #0
 800c732:	4413      	add	r3, r2
 800c734:	1a18      	subs	r0, r3, r0
 800c736:	b003      	add	sp, #12
 800c738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c73a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c73e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c742:	e7ed      	b.n	800c720 <__exponent+0x4c>
 800c744:	2330      	movs	r3, #48	; 0x30
 800c746:	3130      	adds	r1, #48	; 0x30
 800c748:	7083      	strb	r3, [r0, #2]
 800c74a:	70c1      	strb	r1, [r0, #3]
 800c74c:	1d03      	adds	r3, r0, #4
 800c74e:	e7f1      	b.n	800c734 <__exponent+0x60>

0800c750 <_printf_float>:
 800c750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c754:	b08b      	sub	sp, #44	; 0x2c
 800c756:	460c      	mov	r4, r1
 800c758:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c75c:	4616      	mov	r6, r2
 800c75e:	461f      	mov	r7, r3
 800c760:	4605      	mov	r5, r0
 800c762:	f000 fd1b 	bl	800d19c <_localeconv_r>
 800c766:	f8d0 b000 	ldr.w	fp, [r0]
 800c76a:	4658      	mov	r0, fp
 800c76c:	f7f3 fe08 	bl	8000380 <strlen>
 800c770:	2300      	movs	r3, #0
 800c772:	9308      	str	r3, [sp, #32]
 800c774:	f8d8 3000 	ldr.w	r3, [r8]
 800c778:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c77c:	6822      	ldr	r2, [r4, #0]
 800c77e:	3307      	adds	r3, #7
 800c780:	f023 0307 	bic.w	r3, r3, #7
 800c784:	f103 0108 	add.w	r1, r3, #8
 800c788:	f8c8 1000 	str.w	r1, [r8]
 800c78c:	ed93 0b00 	vldr	d0, [r3]
 800c790:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800c9f0 <_printf_float+0x2a0>
 800c794:	eeb0 7bc0 	vabs.f64	d7, d0
 800c798:	eeb4 7b46 	vcmp.f64	d7, d6
 800c79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7a0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800c7a4:	4682      	mov	sl, r0
 800c7a6:	dd24      	ble.n	800c7f2 <_printf_float+0xa2>
 800c7a8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c7ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7b0:	d502      	bpl.n	800c7b8 <_printf_float+0x68>
 800c7b2:	232d      	movs	r3, #45	; 0x2d
 800c7b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7b8:	498f      	ldr	r1, [pc, #572]	; (800c9f8 <_printf_float+0x2a8>)
 800c7ba:	4b90      	ldr	r3, [pc, #576]	; (800c9fc <_printf_float+0x2ac>)
 800c7bc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c7c0:	bf94      	ite	ls
 800c7c2:	4688      	movls	r8, r1
 800c7c4:	4698      	movhi	r8, r3
 800c7c6:	2303      	movs	r3, #3
 800c7c8:	6123      	str	r3, [r4, #16]
 800c7ca:	f022 0204 	bic.w	r2, r2, #4
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	6022      	str	r2, [r4, #0]
 800c7d2:	9304      	str	r3, [sp, #16]
 800c7d4:	9700      	str	r7, [sp, #0]
 800c7d6:	4633      	mov	r3, r6
 800c7d8:	aa09      	add	r2, sp, #36	; 0x24
 800c7da:	4621      	mov	r1, r4
 800c7dc:	4628      	mov	r0, r5
 800c7de:	f000 f9d1 	bl	800cb84 <_printf_common>
 800c7e2:	3001      	adds	r0, #1
 800c7e4:	f040 808a 	bne.w	800c8fc <_printf_float+0x1ac>
 800c7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ec:	b00b      	add	sp, #44	; 0x2c
 800c7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f2:	eeb4 0b40 	vcmp.f64	d0, d0
 800c7f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7fa:	d709      	bvc.n	800c810 <_printf_float+0xc0>
 800c7fc:	ee10 3a90 	vmov	r3, s1
 800c800:	2b00      	cmp	r3, #0
 800c802:	bfbc      	itt	lt
 800c804:	232d      	movlt	r3, #45	; 0x2d
 800c806:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c80a:	497d      	ldr	r1, [pc, #500]	; (800ca00 <_printf_float+0x2b0>)
 800c80c:	4b7d      	ldr	r3, [pc, #500]	; (800ca04 <_printf_float+0x2b4>)
 800c80e:	e7d5      	b.n	800c7bc <_printf_float+0x6c>
 800c810:	6863      	ldr	r3, [r4, #4]
 800c812:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c816:	9104      	str	r1, [sp, #16]
 800c818:	1c59      	adds	r1, r3, #1
 800c81a:	d13c      	bne.n	800c896 <_printf_float+0x146>
 800c81c:	2306      	movs	r3, #6
 800c81e:	6063      	str	r3, [r4, #4]
 800c820:	2300      	movs	r3, #0
 800c822:	9303      	str	r3, [sp, #12]
 800c824:	ab08      	add	r3, sp, #32
 800c826:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c82a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c82e:	ab07      	add	r3, sp, #28
 800c830:	6861      	ldr	r1, [r4, #4]
 800c832:	9300      	str	r3, [sp, #0]
 800c834:	6022      	str	r2, [r4, #0]
 800c836:	f10d 031b 	add.w	r3, sp, #27
 800c83a:	4628      	mov	r0, r5
 800c83c:	f7ff fef8 	bl	800c630 <__cvt>
 800c840:	9b04      	ldr	r3, [sp, #16]
 800c842:	9907      	ldr	r1, [sp, #28]
 800c844:	2b47      	cmp	r3, #71	; 0x47
 800c846:	4680      	mov	r8, r0
 800c848:	d108      	bne.n	800c85c <_printf_float+0x10c>
 800c84a:	1cc8      	adds	r0, r1, #3
 800c84c:	db02      	blt.n	800c854 <_printf_float+0x104>
 800c84e:	6863      	ldr	r3, [r4, #4]
 800c850:	4299      	cmp	r1, r3
 800c852:	dd41      	ble.n	800c8d8 <_printf_float+0x188>
 800c854:	f1a9 0902 	sub.w	r9, r9, #2
 800c858:	fa5f f989 	uxtb.w	r9, r9
 800c85c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c860:	d820      	bhi.n	800c8a4 <_printf_float+0x154>
 800c862:	3901      	subs	r1, #1
 800c864:	464a      	mov	r2, r9
 800c866:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c86a:	9107      	str	r1, [sp, #28]
 800c86c:	f7ff ff32 	bl	800c6d4 <__exponent>
 800c870:	9a08      	ldr	r2, [sp, #32]
 800c872:	9004      	str	r0, [sp, #16]
 800c874:	1813      	adds	r3, r2, r0
 800c876:	2a01      	cmp	r2, #1
 800c878:	6123      	str	r3, [r4, #16]
 800c87a:	dc02      	bgt.n	800c882 <_printf_float+0x132>
 800c87c:	6822      	ldr	r2, [r4, #0]
 800c87e:	07d2      	lsls	r2, r2, #31
 800c880:	d501      	bpl.n	800c886 <_printf_float+0x136>
 800c882:	3301      	adds	r3, #1
 800c884:	6123      	str	r3, [r4, #16]
 800c886:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d0a2      	beq.n	800c7d4 <_printf_float+0x84>
 800c88e:	232d      	movs	r3, #45	; 0x2d
 800c890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c894:	e79e      	b.n	800c7d4 <_printf_float+0x84>
 800c896:	9904      	ldr	r1, [sp, #16]
 800c898:	2947      	cmp	r1, #71	; 0x47
 800c89a:	d1c1      	bne.n	800c820 <_printf_float+0xd0>
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d1bf      	bne.n	800c820 <_printf_float+0xd0>
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	e7bc      	b.n	800c81e <_printf_float+0xce>
 800c8a4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c8a8:	d118      	bne.n	800c8dc <_printf_float+0x18c>
 800c8aa:	2900      	cmp	r1, #0
 800c8ac:	6863      	ldr	r3, [r4, #4]
 800c8ae:	dd0b      	ble.n	800c8c8 <_printf_float+0x178>
 800c8b0:	6121      	str	r1, [r4, #16]
 800c8b2:	b913      	cbnz	r3, 800c8ba <_printf_float+0x16a>
 800c8b4:	6822      	ldr	r2, [r4, #0]
 800c8b6:	07d0      	lsls	r0, r2, #31
 800c8b8:	d502      	bpl.n	800c8c0 <_printf_float+0x170>
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	440b      	add	r3, r1
 800c8be:	6123      	str	r3, [r4, #16]
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	65a1      	str	r1, [r4, #88]	; 0x58
 800c8c4:	9304      	str	r3, [sp, #16]
 800c8c6:	e7de      	b.n	800c886 <_printf_float+0x136>
 800c8c8:	b913      	cbnz	r3, 800c8d0 <_printf_float+0x180>
 800c8ca:	6822      	ldr	r2, [r4, #0]
 800c8cc:	07d2      	lsls	r2, r2, #31
 800c8ce:	d501      	bpl.n	800c8d4 <_printf_float+0x184>
 800c8d0:	3302      	adds	r3, #2
 800c8d2:	e7f4      	b.n	800c8be <_printf_float+0x16e>
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	e7f2      	b.n	800c8be <_printf_float+0x16e>
 800c8d8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c8dc:	9b08      	ldr	r3, [sp, #32]
 800c8de:	4299      	cmp	r1, r3
 800c8e0:	db05      	blt.n	800c8ee <_printf_float+0x19e>
 800c8e2:	6823      	ldr	r3, [r4, #0]
 800c8e4:	6121      	str	r1, [r4, #16]
 800c8e6:	07d8      	lsls	r0, r3, #31
 800c8e8:	d5ea      	bpl.n	800c8c0 <_printf_float+0x170>
 800c8ea:	1c4b      	adds	r3, r1, #1
 800c8ec:	e7e7      	b.n	800c8be <_printf_float+0x16e>
 800c8ee:	2900      	cmp	r1, #0
 800c8f0:	bfd4      	ite	le
 800c8f2:	f1c1 0202 	rsble	r2, r1, #2
 800c8f6:	2201      	movgt	r2, #1
 800c8f8:	4413      	add	r3, r2
 800c8fa:	e7e0      	b.n	800c8be <_printf_float+0x16e>
 800c8fc:	6823      	ldr	r3, [r4, #0]
 800c8fe:	055a      	lsls	r2, r3, #21
 800c900:	d407      	bmi.n	800c912 <_printf_float+0x1c2>
 800c902:	6923      	ldr	r3, [r4, #16]
 800c904:	4642      	mov	r2, r8
 800c906:	4631      	mov	r1, r6
 800c908:	4628      	mov	r0, r5
 800c90a:	47b8      	blx	r7
 800c90c:	3001      	adds	r0, #1
 800c90e:	d12a      	bne.n	800c966 <_printf_float+0x216>
 800c910:	e76a      	b.n	800c7e8 <_printf_float+0x98>
 800c912:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c916:	f240 80e0 	bls.w	800cada <_printf_float+0x38a>
 800c91a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c91e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c926:	d133      	bne.n	800c990 <_printf_float+0x240>
 800c928:	4a37      	ldr	r2, [pc, #220]	; (800ca08 <_printf_float+0x2b8>)
 800c92a:	2301      	movs	r3, #1
 800c92c:	4631      	mov	r1, r6
 800c92e:	4628      	mov	r0, r5
 800c930:	47b8      	blx	r7
 800c932:	3001      	adds	r0, #1
 800c934:	f43f af58 	beq.w	800c7e8 <_printf_float+0x98>
 800c938:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c93c:	429a      	cmp	r2, r3
 800c93e:	db02      	blt.n	800c946 <_printf_float+0x1f6>
 800c940:	6823      	ldr	r3, [r4, #0]
 800c942:	07d8      	lsls	r0, r3, #31
 800c944:	d50f      	bpl.n	800c966 <_printf_float+0x216>
 800c946:	4653      	mov	r3, sl
 800c948:	465a      	mov	r2, fp
 800c94a:	4631      	mov	r1, r6
 800c94c:	4628      	mov	r0, r5
 800c94e:	47b8      	blx	r7
 800c950:	3001      	adds	r0, #1
 800c952:	f43f af49 	beq.w	800c7e8 <_printf_float+0x98>
 800c956:	f04f 0800 	mov.w	r8, #0
 800c95a:	f104 091a 	add.w	r9, r4, #26
 800c95e:	9b08      	ldr	r3, [sp, #32]
 800c960:	3b01      	subs	r3, #1
 800c962:	4543      	cmp	r3, r8
 800c964:	dc09      	bgt.n	800c97a <_printf_float+0x22a>
 800c966:	6823      	ldr	r3, [r4, #0]
 800c968:	079b      	lsls	r3, r3, #30
 800c96a:	f100 8106 	bmi.w	800cb7a <_printf_float+0x42a>
 800c96e:	68e0      	ldr	r0, [r4, #12]
 800c970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c972:	4298      	cmp	r0, r3
 800c974:	bfb8      	it	lt
 800c976:	4618      	movlt	r0, r3
 800c978:	e738      	b.n	800c7ec <_printf_float+0x9c>
 800c97a:	2301      	movs	r3, #1
 800c97c:	464a      	mov	r2, r9
 800c97e:	4631      	mov	r1, r6
 800c980:	4628      	mov	r0, r5
 800c982:	47b8      	blx	r7
 800c984:	3001      	adds	r0, #1
 800c986:	f43f af2f 	beq.w	800c7e8 <_printf_float+0x98>
 800c98a:	f108 0801 	add.w	r8, r8, #1
 800c98e:	e7e6      	b.n	800c95e <_printf_float+0x20e>
 800c990:	9b07      	ldr	r3, [sp, #28]
 800c992:	2b00      	cmp	r3, #0
 800c994:	dc3a      	bgt.n	800ca0c <_printf_float+0x2bc>
 800c996:	4a1c      	ldr	r2, [pc, #112]	; (800ca08 <_printf_float+0x2b8>)
 800c998:	2301      	movs	r3, #1
 800c99a:	4631      	mov	r1, r6
 800c99c:	4628      	mov	r0, r5
 800c99e:	47b8      	blx	r7
 800c9a0:	3001      	adds	r0, #1
 800c9a2:	f43f af21 	beq.w	800c7e8 <_printf_float+0x98>
 800c9a6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	d102      	bne.n	800c9b4 <_printf_float+0x264>
 800c9ae:	6823      	ldr	r3, [r4, #0]
 800c9b0:	07d9      	lsls	r1, r3, #31
 800c9b2:	d5d8      	bpl.n	800c966 <_printf_float+0x216>
 800c9b4:	4653      	mov	r3, sl
 800c9b6:	465a      	mov	r2, fp
 800c9b8:	4631      	mov	r1, r6
 800c9ba:	4628      	mov	r0, r5
 800c9bc:	47b8      	blx	r7
 800c9be:	3001      	adds	r0, #1
 800c9c0:	f43f af12 	beq.w	800c7e8 <_printf_float+0x98>
 800c9c4:	f04f 0900 	mov.w	r9, #0
 800c9c8:	f104 0a1a 	add.w	sl, r4, #26
 800c9cc:	9b07      	ldr	r3, [sp, #28]
 800c9ce:	425b      	negs	r3, r3
 800c9d0:	454b      	cmp	r3, r9
 800c9d2:	dc01      	bgt.n	800c9d8 <_printf_float+0x288>
 800c9d4:	9b08      	ldr	r3, [sp, #32]
 800c9d6:	e795      	b.n	800c904 <_printf_float+0x1b4>
 800c9d8:	2301      	movs	r3, #1
 800c9da:	4652      	mov	r2, sl
 800c9dc:	4631      	mov	r1, r6
 800c9de:	4628      	mov	r0, r5
 800c9e0:	47b8      	blx	r7
 800c9e2:	3001      	adds	r0, #1
 800c9e4:	f43f af00 	beq.w	800c7e8 <_printf_float+0x98>
 800c9e8:	f109 0901 	add.w	r9, r9, #1
 800c9ec:	e7ee      	b.n	800c9cc <_printf_float+0x27c>
 800c9ee:	bf00      	nop
 800c9f0:	ffffffff 	.word	0xffffffff
 800c9f4:	7fefffff 	.word	0x7fefffff
 800c9f8:	0800f2bc 	.word	0x0800f2bc
 800c9fc:	0800f2c0 	.word	0x0800f2c0
 800ca00:	0800f2c4 	.word	0x0800f2c4
 800ca04:	0800f2c8 	.word	0x0800f2c8
 800ca08:	0800f2cc 	.word	0x0800f2cc
 800ca0c:	9a08      	ldr	r2, [sp, #32]
 800ca0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca10:	429a      	cmp	r2, r3
 800ca12:	bfa8      	it	ge
 800ca14:	461a      	movge	r2, r3
 800ca16:	2a00      	cmp	r2, #0
 800ca18:	4691      	mov	r9, r2
 800ca1a:	dc38      	bgt.n	800ca8e <_printf_float+0x33e>
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	9305      	str	r3, [sp, #20]
 800ca20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca24:	f104 021a 	add.w	r2, r4, #26
 800ca28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca2a:	9905      	ldr	r1, [sp, #20]
 800ca2c:	9304      	str	r3, [sp, #16]
 800ca2e:	eba3 0309 	sub.w	r3, r3, r9
 800ca32:	428b      	cmp	r3, r1
 800ca34:	dc33      	bgt.n	800ca9e <_printf_float+0x34e>
 800ca36:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	db3c      	blt.n	800cab8 <_printf_float+0x368>
 800ca3e:	6823      	ldr	r3, [r4, #0]
 800ca40:	07da      	lsls	r2, r3, #31
 800ca42:	d439      	bmi.n	800cab8 <_printf_float+0x368>
 800ca44:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800ca48:	eba2 0903 	sub.w	r9, r2, r3
 800ca4c:	9b04      	ldr	r3, [sp, #16]
 800ca4e:	1ad2      	subs	r2, r2, r3
 800ca50:	4591      	cmp	r9, r2
 800ca52:	bfa8      	it	ge
 800ca54:	4691      	movge	r9, r2
 800ca56:	f1b9 0f00 	cmp.w	r9, #0
 800ca5a:	dc35      	bgt.n	800cac8 <_printf_float+0x378>
 800ca5c:	f04f 0800 	mov.w	r8, #0
 800ca60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca64:	f104 0a1a 	add.w	sl, r4, #26
 800ca68:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ca6c:	1a9b      	subs	r3, r3, r2
 800ca6e:	eba3 0309 	sub.w	r3, r3, r9
 800ca72:	4543      	cmp	r3, r8
 800ca74:	f77f af77 	ble.w	800c966 <_printf_float+0x216>
 800ca78:	2301      	movs	r3, #1
 800ca7a:	4652      	mov	r2, sl
 800ca7c:	4631      	mov	r1, r6
 800ca7e:	4628      	mov	r0, r5
 800ca80:	47b8      	blx	r7
 800ca82:	3001      	adds	r0, #1
 800ca84:	f43f aeb0 	beq.w	800c7e8 <_printf_float+0x98>
 800ca88:	f108 0801 	add.w	r8, r8, #1
 800ca8c:	e7ec      	b.n	800ca68 <_printf_float+0x318>
 800ca8e:	4613      	mov	r3, r2
 800ca90:	4631      	mov	r1, r6
 800ca92:	4642      	mov	r2, r8
 800ca94:	4628      	mov	r0, r5
 800ca96:	47b8      	blx	r7
 800ca98:	3001      	adds	r0, #1
 800ca9a:	d1bf      	bne.n	800ca1c <_printf_float+0x2cc>
 800ca9c:	e6a4      	b.n	800c7e8 <_printf_float+0x98>
 800ca9e:	2301      	movs	r3, #1
 800caa0:	4631      	mov	r1, r6
 800caa2:	4628      	mov	r0, r5
 800caa4:	9204      	str	r2, [sp, #16]
 800caa6:	47b8      	blx	r7
 800caa8:	3001      	adds	r0, #1
 800caaa:	f43f ae9d 	beq.w	800c7e8 <_printf_float+0x98>
 800caae:	9b05      	ldr	r3, [sp, #20]
 800cab0:	9a04      	ldr	r2, [sp, #16]
 800cab2:	3301      	adds	r3, #1
 800cab4:	9305      	str	r3, [sp, #20]
 800cab6:	e7b7      	b.n	800ca28 <_printf_float+0x2d8>
 800cab8:	4653      	mov	r3, sl
 800caba:	465a      	mov	r2, fp
 800cabc:	4631      	mov	r1, r6
 800cabe:	4628      	mov	r0, r5
 800cac0:	47b8      	blx	r7
 800cac2:	3001      	adds	r0, #1
 800cac4:	d1be      	bne.n	800ca44 <_printf_float+0x2f4>
 800cac6:	e68f      	b.n	800c7e8 <_printf_float+0x98>
 800cac8:	9a04      	ldr	r2, [sp, #16]
 800caca:	464b      	mov	r3, r9
 800cacc:	4442      	add	r2, r8
 800cace:	4631      	mov	r1, r6
 800cad0:	4628      	mov	r0, r5
 800cad2:	47b8      	blx	r7
 800cad4:	3001      	adds	r0, #1
 800cad6:	d1c1      	bne.n	800ca5c <_printf_float+0x30c>
 800cad8:	e686      	b.n	800c7e8 <_printf_float+0x98>
 800cada:	9a08      	ldr	r2, [sp, #32]
 800cadc:	2a01      	cmp	r2, #1
 800cade:	dc01      	bgt.n	800cae4 <_printf_float+0x394>
 800cae0:	07db      	lsls	r3, r3, #31
 800cae2:	d537      	bpl.n	800cb54 <_printf_float+0x404>
 800cae4:	2301      	movs	r3, #1
 800cae6:	4642      	mov	r2, r8
 800cae8:	4631      	mov	r1, r6
 800caea:	4628      	mov	r0, r5
 800caec:	47b8      	blx	r7
 800caee:	3001      	adds	r0, #1
 800caf0:	f43f ae7a 	beq.w	800c7e8 <_printf_float+0x98>
 800caf4:	4653      	mov	r3, sl
 800caf6:	465a      	mov	r2, fp
 800caf8:	4631      	mov	r1, r6
 800cafa:	4628      	mov	r0, r5
 800cafc:	47b8      	blx	r7
 800cafe:	3001      	adds	r0, #1
 800cb00:	f43f ae72 	beq.w	800c7e8 <_printf_float+0x98>
 800cb04:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cb08:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb10:	9b08      	ldr	r3, [sp, #32]
 800cb12:	d01a      	beq.n	800cb4a <_printf_float+0x3fa>
 800cb14:	3b01      	subs	r3, #1
 800cb16:	f108 0201 	add.w	r2, r8, #1
 800cb1a:	4631      	mov	r1, r6
 800cb1c:	4628      	mov	r0, r5
 800cb1e:	47b8      	blx	r7
 800cb20:	3001      	adds	r0, #1
 800cb22:	d10e      	bne.n	800cb42 <_printf_float+0x3f2>
 800cb24:	e660      	b.n	800c7e8 <_printf_float+0x98>
 800cb26:	2301      	movs	r3, #1
 800cb28:	464a      	mov	r2, r9
 800cb2a:	4631      	mov	r1, r6
 800cb2c:	4628      	mov	r0, r5
 800cb2e:	47b8      	blx	r7
 800cb30:	3001      	adds	r0, #1
 800cb32:	f43f ae59 	beq.w	800c7e8 <_printf_float+0x98>
 800cb36:	f108 0801 	add.w	r8, r8, #1
 800cb3a:	9b08      	ldr	r3, [sp, #32]
 800cb3c:	3b01      	subs	r3, #1
 800cb3e:	4543      	cmp	r3, r8
 800cb40:	dcf1      	bgt.n	800cb26 <_printf_float+0x3d6>
 800cb42:	9b04      	ldr	r3, [sp, #16]
 800cb44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cb48:	e6dd      	b.n	800c906 <_printf_float+0x1b6>
 800cb4a:	f04f 0800 	mov.w	r8, #0
 800cb4e:	f104 091a 	add.w	r9, r4, #26
 800cb52:	e7f2      	b.n	800cb3a <_printf_float+0x3ea>
 800cb54:	2301      	movs	r3, #1
 800cb56:	4642      	mov	r2, r8
 800cb58:	e7df      	b.n	800cb1a <_printf_float+0x3ca>
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	464a      	mov	r2, r9
 800cb5e:	4631      	mov	r1, r6
 800cb60:	4628      	mov	r0, r5
 800cb62:	47b8      	blx	r7
 800cb64:	3001      	adds	r0, #1
 800cb66:	f43f ae3f 	beq.w	800c7e8 <_printf_float+0x98>
 800cb6a:	f108 0801 	add.w	r8, r8, #1
 800cb6e:	68e3      	ldr	r3, [r4, #12]
 800cb70:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb72:	1a5b      	subs	r3, r3, r1
 800cb74:	4543      	cmp	r3, r8
 800cb76:	dcf0      	bgt.n	800cb5a <_printf_float+0x40a>
 800cb78:	e6f9      	b.n	800c96e <_printf_float+0x21e>
 800cb7a:	f04f 0800 	mov.w	r8, #0
 800cb7e:	f104 0919 	add.w	r9, r4, #25
 800cb82:	e7f4      	b.n	800cb6e <_printf_float+0x41e>

0800cb84 <_printf_common>:
 800cb84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb88:	4616      	mov	r6, r2
 800cb8a:	4699      	mov	r9, r3
 800cb8c:	688a      	ldr	r2, [r1, #8]
 800cb8e:	690b      	ldr	r3, [r1, #16]
 800cb90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb94:	4293      	cmp	r3, r2
 800cb96:	bfb8      	it	lt
 800cb98:	4613      	movlt	r3, r2
 800cb9a:	6033      	str	r3, [r6, #0]
 800cb9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cba0:	4607      	mov	r7, r0
 800cba2:	460c      	mov	r4, r1
 800cba4:	b10a      	cbz	r2, 800cbaa <_printf_common+0x26>
 800cba6:	3301      	adds	r3, #1
 800cba8:	6033      	str	r3, [r6, #0]
 800cbaa:	6823      	ldr	r3, [r4, #0]
 800cbac:	0699      	lsls	r1, r3, #26
 800cbae:	bf42      	ittt	mi
 800cbb0:	6833      	ldrmi	r3, [r6, #0]
 800cbb2:	3302      	addmi	r3, #2
 800cbb4:	6033      	strmi	r3, [r6, #0]
 800cbb6:	6825      	ldr	r5, [r4, #0]
 800cbb8:	f015 0506 	ands.w	r5, r5, #6
 800cbbc:	d106      	bne.n	800cbcc <_printf_common+0x48>
 800cbbe:	f104 0a19 	add.w	sl, r4, #25
 800cbc2:	68e3      	ldr	r3, [r4, #12]
 800cbc4:	6832      	ldr	r2, [r6, #0]
 800cbc6:	1a9b      	subs	r3, r3, r2
 800cbc8:	42ab      	cmp	r3, r5
 800cbca:	dc26      	bgt.n	800cc1a <_printf_common+0x96>
 800cbcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cbd0:	1e13      	subs	r3, r2, #0
 800cbd2:	6822      	ldr	r2, [r4, #0]
 800cbd4:	bf18      	it	ne
 800cbd6:	2301      	movne	r3, #1
 800cbd8:	0692      	lsls	r2, r2, #26
 800cbda:	d42b      	bmi.n	800cc34 <_printf_common+0xb0>
 800cbdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cbe0:	4649      	mov	r1, r9
 800cbe2:	4638      	mov	r0, r7
 800cbe4:	47c0      	blx	r8
 800cbe6:	3001      	adds	r0, #1
 800cbe8:	d01e      	beq.n	800cc28 <_printf_common+0xa4>
 800cbea:	6823      	ldr	r3, [r4, #0]
 800cbec:	6922      	ldr	r2, [r4, #16]
 800cbee:	f003 0306 	and.w	r3, r3, #6
 800cbf2:	2b04      	cmp	r3, #4
 800cbf4:	bf02      	ittt	eq
 800cbf6:	68e5      	ldreq	r5, [r4, #12]
 800cbf8:	6833      	ldreq	r3, [r6, #0]
 800cbfa:	1aed      	subeq	r5, r5, r3
 800cbfc:	68a3      	ldr	r3, [r4, #8]
 800cbfe:	bf0c      	ite	eq
 800cc00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc04:	2500      	movne	r5, #0
 800cc06:	4293      	cmp	r3, r2
 800cc08:	bfc4      	itt	gt
 800cc0a:	1a9b      	subgt	r3, r3, r2
 800cc0c:	18ed      	addgt	r5, r5, r3
 800cc0e:	2600      	movs	r6, #0
 800cc10:	341a      	adds	r4, #26
 800cc12:	42b5      	cmp	r5, r6
 800cc14:	d11a      	bne.n	800cc4c <_printf_common+0xc8>
 800cc16:	2000      	movs	r0, #0
 800cc18:	e008      	b.n	800cc2c <_printf_common+0xa8>
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	4652      	mov	r2, sl
 800cc1e:	4649      	mov	r1, r9
 800cc20:	4638      	mov	r0, r7
 800cc22:	47c0      	blx	r8
 800cc24:	3001      	adds	r0, #1
 800cc26:	d103      	bne.n	800cc30 <_printf_common+0xac>
 800cc28:	f04f 30ff 	mov.w	r0, #4294967295
 800cc2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc30:	3501      	adds	r5, #1
 800cc32:	e7c6      	b.n	800cbc2 <_printf_common+0x3e>
 800cc34:	18e1      	adds	r1, r4, r3
 800cc36:	1c5a      	adds	r2, r3, #1
 800cc38:	2030      	movs	r0, #48	; 0x30
 800cc3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc3e:	4422      	add	r2, r4
 800cc40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc48:	3302      	adds	r3, #2
 800cc4a:	e7c7      	b.n	800cbdc <_printf_common+0x58>
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	4622      	mov	r2, r4
 800cc50:	4649      	mov	r1, r9
 800cc52:	4638      	mov	r0, r7
 800cc54:	47c0      	blx	r8
 800cc56:	3001      	adds	r0, #1
 800cc58:	d0e6      	beq.n	800cc28 <_printf_common+0xa4>
 800cc5a:	3601      	adds	r6, #1
 800cc5c:	e7d9      	b.n	800cc12 <_printf_common+0x8e>
	...

0800cc60 <_printf_i>:
 800cc60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc64:	7e0f      	ldrb	r7, [r1, #24]
 800cc66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cc68:	2f78      	cmp	r7, #120	; 0x78
 800cc6a:	4691      	mov	r9, r2
 800cc6c:	4680      	mov	r8, r0
 800cc6e:	460c      	mov	r4, r1
 800cc70:	469a      	mov	sl, r3
 800cc72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cc76:	d807      	bhi.n	800cc88 <_printf_i+0x28>
 800cc78:	2f62      	cmp	r7, #98	; 0x62
 800cc7a:	d80a      	bhi.n	800cc92 <_printf_i+0x32>
 800cc7c:	2f00      	cmp	r7, #0
 800cc7e:	f000 80d4 	beq.w	800ce2a <_printf_i+0x1ca>
 800cc82:	2f58      	cmp	r7, #88	; 0x58
 800cc84:	f000 80c0 	beq.w	800ce08 <_printf_i+0x1a8>
 800cc88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cc90:	e03a      	b.n	800cd08 <_printf_i+0xa8>
 800cc92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cc96:	2b15      	cmp	r3, #21
 800cc98:	d8f6      	bhi.n	800cc88 <_printf_i+0x28>
 800cc9a:	a101      	add	r1, pc, #4	; (adr r1, 800cca0 <_printf_i+0x40>)
 800cc9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cca0:	0800ccf9 	.word	0x0800ccf9
 800cca4:	0800cd0d 	.word	0x0800cd0d
 800cca8:	0800cc89 	.word	0x0800cc89
 800ccac:	0800cc89 	.word	0x0800cc89
 800ccb0:	0800cc89 	.word	0x0800cc89
 800ccb4:	0800cc89 	.word	0x0800cc89
 800ccb8:	0800cd0d 	.word	0x0800cd0d
 800ccbc:	0800cc89 	.word	0x0800cc89
 800ccc0:	0800cc89 	.word	0x0800cc89
 800ccc4:	0800cc89 	.word	0x0800cc89
 800ccc8:	0800cc89 	.word	0x0800cc89
 800cccc:	0800ce11 	.word	0x0800ce11
 800ccd0:	0800cd39 	.word	0x0800cd39
 800ccd4:	0800cdcb 	.word	0x0800cdcb
 800ccd8:	0800cc89 	.word	0x0800cc89
 800ccdc:	0800cc89 	.word	0x0800cc89
 800cce0:	0800ce33 	.word	0x0800ce33
 800cce4:	0800cc89 	.word	0x0800cc89
 800cce8:	0800cd39 	.word	0x0800cd39
 800ccec:	0800cc89 	.word	0x0800cc89
 800ccf0:	0800cc89 	.word	0x0800cc89
 800ccf4:	0800cdd3 	.word	0x0800cdd3
 800ccf8:	682b      	ldr	r3, [r5, #0]
 800ccfa:	1d1a      	adds	r2, r3, #4
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	602a      	str	r2, [r5, #0]
 800cd00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd08:	2301      	movs	r3, #1
 800cd0a:	e09f      	b.n	800ce4c <_printf_i+0x1ec>
 800cd0c:	6820      	ldr	r0, [r4, #0]
 800cd0e:	682b      	ldr	r3, [r5, #0]
 800cd10:	0607      	lsls	r7, r0, #24
 800cd12:	f103 0104 	add.w	r1, r3, #4
 800cd16:	6029      	str	r1, [r5, #0]
 800cd18:	d501      	bpl.n	800cd1e <_printf_i+0xbe>
 800cd1a:	681e      	ldr	r6, [r3, #0]
 800cd1c:	e003      	b.n	800cd26 <_printf_i+0xc6>
 800cd1e:	0646      	lsls	r6, r0, #25
 800cd20:	d5fb      	bpl.n	800cd1a <_printf_i+0xba>
 800cd22:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cd26:	2e00      	cmp	r6, #0
 800cd28:	da03      	bge.n	800cd32 <_printf_i+0xd2>
 800cd2a:	232d      	movs	r3, #45	; 0x2d
 800cd2c:	4276      	negs	r6, r6
 800cd2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd32:	485a      	ldr	r0, [pc, #360]	; (800ce9c <_printf_i+0x23c>)
 800cd34:	230a      	movs	r3, #10
 800cd36:	e012      	b.n	800cd5e <_printf_i+0xfe>
 800cd38:	682b      	ldr	r3, [r5, #0]
 800cd3a:	6820      	ldr	r0, [r4, #0]
 800cd3c:	1d19      	adds	r1, r3, #4
 800cd3e:	6029      	str	r1, [r5, #0]
 800cd40:	0605      	lsls	r5, r0, #24
 800cd42:	d501      	bpl.n	800cd48 <_printf_i+0xe8>
 800cd44:	681e      	ldr	r6, [r3, #0]
 800cd46:	e002      	b.n	800cd4e <_printf_i+0xee>
 800cd48:	0641      	lsls	r1, r0, #25
 800cd4a:	d5fb      	bpl.n	800cd44 <_printf_i+0xe4>
 800cd4c:	881e      	ldrh	r6, [r3, #0]
 800cd4e:	4853      	ldr	r0, [pc, #332]	; (800ce9c <_printf_i+0x23c>)
 800cd50:	2f6f      	cmp	r7, #111	; 0x6f
 800cd52:	bf0c      	ite	eq
 800cd54:	2308      	moveq	r3, #8
 800cd56:	230a      	movne	r3, #10
 800cd58:	2100      	movs	r1, #0
 800cd5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd5e:	6865      	ldr	r5, [r4, #4]
 800cd60:	60a5      	str	r5, [r4, #8]
 800cd62:	2d00      	cmp	r5, #0
 800cd64:	bfa2      	ittt	ge
 800cd66:	6821      	ldrge	r1, [r4, #0]
 800cd68:	f021 0104 	bicge.w	r1, r1, #4
 800cd6c:	6021      	strge	r1, [r4, #0]
 800cd6e:	b90e      	cbnz	r6, 800cd74 <_printf_i+0x114>
 800cd70:	2d00      	cmp	r5, #0
 800cd72:	d04b      	beq.n	800ce0c <_printf_i+0x1ac>
 800cd74:	4615      	mov	r5, r2
 800cd76:	fbb6 f1f3 	udiv	r1, r6, r3
 800cd7a:	fb03 6711 	mls	r7, r3, r1, r6
 800cd7e:	5dc7      	ldrb	r7, [r0, r7]
 800cd80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cd84:	4637      	mov	r7, r6
 800cd86:	42bb      	cmp	r3, r7
 800cd88:	460e      	mov	r6, r1
 800cd8a:	d9f4      	bls.n	800cd76 <_printf_i+0x116>
 800cd8c:	2b08      	cmp	r3, #8
 800cd8e:	d10b      	bne.n	800cda8 <_printf_i+0x148>
 800cd90:	6823      	ldr	r3, [r4, #0]
 800cd92:	07de      	lsls	r6, r3, #31
 800cd94:	d508      	bpl.n	800cda8 <_printf_i+0x148>
 800cd96:	6923      	ldr	r3, [r4, #16]
 800cd98:	6861      	ldr	r1, [r4, #4]
 800cd9a:	4299      	cmp	r1, r3
 800cd9c:	bfde      	ittt	le
 800cd9e:	2330      	movle	r3, #48	; 0x30
 800cda0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cda4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cda8:	1b52      	subs	r2, r2, r5
 800cdaa:	6122      	str	r2, [r4, #16]
 800cdac:	f8cd a000 	str.w	sl, [sp]
 800cdb0:	464b      	mov	r3, r9
 800cdb2:	aa03      	add	r2, sp, #12
 800cdb4:	4621      	mov	r1, r4
 800cdb6:	4640      	mov	r0, r8
 800cdb8:	f7ff fee4 	bl	800cb84 <_printf_common>
 800cdbc:	3001      	adds	r0, #1
 800cdbe:	d14a      	bne.n	800ce56 <_printf_i+0x1f6>
 800cdc0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdc4:	b004      	add	sp, #16
 800cdc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdca:	6823      	ldr	r3, [r4, #0]
 800cdcc:	f043 0320 	orr.w	r3, r3, #32
 800cdd0:	6023      	str	r3, [r4, #0]
 800cdd2:	4833      	ldr	r0, [pc, #204]	; (800cea0 <_printf_i+0x240>)
 800cdd4:	2778      	movs	r7, #120	; 0x78
 800cdd6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cdda:	6823      	ldr	r3, [r4, #0]
 800cddc:	6829      	ldr	r1, [r5, #0]
 800cdde:	061f      	lsls	r7, r3, #24
 800cde0:	f851 6b04 	ldr.w	r6, [r1], #4
 800cde4:	d402      	bmi.n	800cdec <_printf_i+0x18c>
 800cde6:	065f      	lsls	r7, r3, #25
 800cde8:	bf48      	it	mi
 800cdea:	b2b6      	uxthmi	r6, r6
 800cdec:	07df      	lsls	r7, r3, #31
 800cdee:	bf48      	it	mi
 800cdf0:	f043 0320 	orrmi.w	r3, r3, #32
 800cdf4:	6029      	str	r1, [r5, #0]
 800cdf6:	bf48      	it	mi
 800cdf8:	6023      	strmi	r3, [r4, #0]
 800cdfa:	b91e      	cbnz	r6, 800ce04 <_printf_i+0x1a4>
 800cdfc:	6823      	ldr	r3, [r4, #0]
 800cdfe:	f023 0320 	bic.w	r3, r3, #32
 800ce02:	6023      	str	r3, [r4, #0]
 800ce04:	2310      	movs	r3, #16
 800ce06:	e7a7      	b.n	800cd58 <_printf_i+0xf8>
 800ce08:	4824      	ldr	r0, [pc, #144]	; (800ce9c <_printf_i+0x23c>)
 800ce0a:	e7e4      	b.n	800cdd6 <_printf_i+0x176>
 800ce0c:	4615      	mov	r5, r2
 800ce0e:	e7bd      	b.n	800cd8c <_printf_i+0x12c>
 800ce10:	682b      	ldr	r3, [r5, #0]
 800ce12:	6826      	ldr	r6, [r4, #0]
 800ce14:	6961      	ldr	r1, [r4, #20]
 800ce16:	1d18      	adds	r0, r3, #4
 800ce18:	6028      	str	r0, [r5, #0]
 800ce1a:	0635      	lsls	r5, r6, #24
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	d501      	bpl.n	800ce24 <_printf_i+0x1c4>
 800ce20:	6019      	str	r1, [r3, #0]
 800ce22:	e002      	b.n	800ce2a <_printf_i+0x1ca>
 800ce24:	0670      	lsls	r0, r6, #25
 800ce26:	d5fb      	bpl.n	800ce20 <_printf_i+0x1c0>
 800ce28:	8019      	strh	r1, [r3, #0]
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	6123      	str	r3, [r4, #16]
 800ce2e:	4615      	mov	r5, r2
 800ce30:	e7bc      	b.n	800cdac <_printf_i+0x14c>
 800ce32:	682b      	ldr	r3, [r5, #0]
 800ce34:	1d1a      	adds	r2, r3, #4
 800ce36:	602a      	str	r2, [r5, #0]
 800ce38:	681d      	ldr	r5, [r3, #0]
 800ce3a:	6862      	ldr	r2, [r4, #4]
 800ce3c:	2100      	movs	r1, #0
 800ce3e:	4628      	mov	r0, r5
 800ce40:	f7f3 fa4e 	bl	80002e0 <memchr>
 800ce44:	b108      	cbz	r0, 800ce4a <_printf_i+0x1ea>
 800ce46:	1b40      	subs	r0, r0, r5
 800ce48:	6060      	str	r0, [r4, #4]
 800ce4a:	6863      	ldr	r3, [r4, #4]
 800ce4c:	6123      	str	r3, [r4, #16]
 800ce4e:	2300      	movs	r3, #0
 800ce50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce54:	e7aa      	b.n	800cdac <_printf_i+0x14c>
 800ce56:	6923      	ldr	r3, [r4, #16]
 800ce58:	462a      	mov	r2, r5
 800ce5a:	4649      	mov	r1, r9
 800ce5c:	4640      	mov	r0, r8
 800ce5e:	47d0      	blx	sl
 800ce60:	3001      	adds	r0, #1
 800ce62:	d0ad      	beq.n	800cdc0 <_printf_i+0x160>
 800ce64:	6823      	ldr	r3, [r4, #0]
 800ce66:	079b      	lsls	r3, r3, #30
 800ce68:	d413      	bmi.n	800ce92 <_printf_i+0x232>
 800ce6a:	68e0      	ldr	r0, [r4, #12]
 800ce6c:	9b03      	ldr	r3, [sp, #12]
 800ce6e:	4298      	cmp	r0, r3
 800ce70:	bfb8      	it	lt
 800ce72:	4618      	movlt	r0, r3
 800ce74:	e7a6      	b.n	800cdc4 <_printf_i+0x164>
 800ce76:	2301      	movs	r3, #1
 800ce78:	4632      	mov	r2, r6
 800ce7a:	4649      	mov	r1, r9
 800ce7c:	4640      	mov	r0, r8
 800ce7e:	47d0      	blx	sl
 800ce80:	3001      	adds	r0, #1
 800ce82:	d09d      	beq.n	800cdc0 <_printf_i+0x160>
 800ce84:	3501      	adds	r5, #1
 800ce86:	68e3      	ldr	r3, [r4, #12]
 800ce88:	9903      	ldr	r1, [sp, #12]
 800ce8a:	1a5b      	subs	r3, r3, r1
 800ce8c:	42ab      	cmp	r3, r5
 800ce8e:	dcf2      	bgt.n	800ce76 <_printf_i+0x216>
 800ce90:	e7eb      	b.n	800ce6a <_printf_i+0x20a>
 800ce92:	2500      	movs	r5, #0
 800ce94:	f104 0619 	add.w	r6, r4, #25
 800ce98:	e7f5      	b.n	800ce86 <_printf_i+0x226>
 800ce9a:	bf00      	nop
 800ce9c:	0800f2ce 	.word	0x0800f2ce
 800cea0:	0800f2df 	.word	0x0800f2df

0800cea4 <std>:
 800cea4:	2300      	movs	r3, #0
 800cea6:	b510      	push	{r4, lr}
 800cea8:	4604      	mov	r4, r0
 800ceaa:	e9c0 3300 	strd	r3, r3, [r0]
 800ceae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ceb2:	6083      	str	r3, [r0, #8]
 800ceb4:	8181      	strh	r1, [r0, #12]
 800ceb6:	6643      	str	r3, [r0, #100]	; 0x64
 800ceb8:	81c2      	strh	r2, [r0, #14]
 800ceba:	6183      	str	r3, [r0, #24]
 800cebc:	4619      	mov	r1, r3
 800cebe:	2208      	movs	r2, #8
 800cec0:	305c      	adds	r0, #92	; 0x5c
 800cec2:	f000 f962 	bl	800d18a <memset>
 800cec6:	4b0d      	ldr	r3, [pc, #52]	; (800cefc <std+0x58>)
 800cec8:	6263      	str	r3, [r4, #36]	; 0x24
 800ceca:	4b0d      	ldr	r3, [pc, #52]	; (800cf00 <std+0x5c>)
 800cecc:	62a3      	str	r3, [r4, #40]	; 0x28
 800cece:	4b0d      	ldr	r3, [pc, #52]	; (800cf04 <std+0x60>)
 800ced0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ced2:	4b0d      	ldr	r3, [pc, #52]	; (800cf08 <std+0x64>)
 800ced4:	6323      	str	r3, [r4, #48]	; 0x30
 800ced6:	4b0d      	ldr	r3, [pc, #52]	; (800cf0c <std+0x68>)
 800ced8:	6224      	str	r4, [r4, #32]
 800ceda:	429c      	cmp	r4, r3
 800cedc:	d006      	beq.n	800ceec <std+0x48>
 800cede:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800cee2:	4294      	cmp	r4, r2
 800cee4:	d002      	beq.n	800ceec <std+0x48>
 800cee6:	33d0      	adds	r3, #208	; 0xd0
 800cee8:	429c      	cmp	r4, r3
 800ceea:	d105      	bne.n	800cef8 <std+0x54>
 800ceec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cef4:	f000 b9c6 	b.w	800d284 <__retarget_lock_init_recursive>
 800cef8:	bd10      	pop	{r4, pc}
 800cefa:	bf00      	nop
 800cefc:	0800d0d1 	.word	0x0800d0d1
 800cf00:	0800d0f3 	.word	0x0800d0f3
 800cf04:	0800d12b 	.word	0x0800d12b
 800cf08:	0800d14f 	.word	0x0800d14f
 800cf0c:	24000aac 	.word	0x24000aac

0800cf10 <stdio_exit_handler>:
 800cf10:	4a02      	ldr	r2, [pc, #8]	; (800cf1c <stdio_exit_handler+0xc>)
 800cf12:	4903      	ldr	r1, [pc, #12]	; (800cf20 <stdio_exit_handler+0x10>)
 800cf14:	4803      	ldr	r0, [pc, #12]	; (800cf24 <stdio_exit_handler+0x14>)
 800cf16:	f000 b869 	b.w	800cfec <_fwalk_sglue>
 800cf1a:	bf00      	nop
 800cf1c:	24000010 	.word	0x24000010
 800cf20:	0800eb2d 	.word	0x0800eb2d
 800cf24:	2400001c 	.word	0x2400001c

0800cf28 <cleanup_stdio>:
 800cf28:	6841      	ldr	r1, [r0, #4]
 800cf2a:	4b0c      	ldr	r3, [pc, #48]	; (800cf5c <cleanup_stdio+0x34>)
 800cf2c:	4299      	cmp	r1, r3
 800cf2e:	b510      	push	{r4, lr}
 800cf30:	4604      	mov	r4, r0
 800cf32:	d001      	beq.n	800cf38 <cleanup_stdio+0x10>
 800cf34:	f001 fdfa 	bl	800eb2c <_fflush_r>
 800cf38:	68a1      	ldr	r1, [r4, #8]
 800cf3a:	4b09      	ldr	r3, [pc, #36]	; (800cf60 <cleanup_stdio+0x38>)
 800cf3c:	4299      	cmp	r1, r3
 800cf3e:	d002      	beq.n	800cf46 <cleanup_stdio+0x1e>
 800cf40:	4620      	mov	r0, r4
 800cf42:	f001 fdf3 	bl	800eb2c <_fflush_r>
 800cf46:	68e1      	ldr	r1, [r4, #12]
 800cf48:	4b06      	ldr	r3, [pc, #24]	; (800cf64 <cleanup_stdio+0x3c>)
 800cf4a:	4299      	cmp	r1, r3
 800cf4c:	d004      	beq.n	800cf58 <cleanup_stdio+0x30>
 800cf4e:	4620      	mov	r0, r4
 800cf50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf54:	f001 bdea 	b.w	800eb2c <_fflush_r>
 800cf58:	bd10      	pop	{r4, pc}
 800cf5a:	bf00      	nop
 800cf5c:	24000aac 	.word	0x24000aac
 800cf60:	24000b14 	.word	0x24000b14
 800cf64:	24000b7c 	.word	0x24000b7c

0800cf68 <global_stdio_init.part.0>:
 800cf68:	b510      	push	{r4, lr}
 800cf6a:	4b0b      	ldr	r3, [pc, #44]	; (800cf98 <global_stdio_init.part.0+0x30>)
 800cf6c:	4c0b      	ldr	r4, [pc, #44]	; (800cf9c <global_stdio_init.part.0+0x34>)
 800cf6e:	4a0c      	ldr	r2, [pc, #48]	; (800cfa0 <global_stdio_init.part.0+0x38>)
 800cf70:	601a      	str	r2, [r3, #0]
 800cf72:	4620      	mov	r0, r4
 800cf74:	2200      	movs	r2, #0
 800cf76:	2104      	movs	r1, #4
 800cf78:	f7ff ff94 	bl	800cea4 <std>
 800cf7c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cf80:	2201      	movs	r2, #1
 800cf82:	2109      	movs	r1, #9
 800cf84:	f7ff ff8e 	bl	800cea4 <std>
 800cf88:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cf8c:	2202      	movs	r2, #2
 800cf8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf92:	2112      	movs	r1, #18
 800cf94:	f7ff bf86 	b.w	800cea4 <std>
 800cf98:	24000be4 	.word	0x24000be4
 800cf9c:	24000aac 	.word	0x24000aac
 800cfa0:	0800cf11 	.word	0x0800cf11

0800cfa4 <__sfp_lock_acquire>:
 800cfa4:	4801      	ldr	r0, [pc, #4]	; (800cfac <__sfp_lock_acquire+0x8>)
 800cfa6:	f000 b96e 	b.w	800d286 <__retarget_lock_acquire_recursive>
 800cfaa:	bf00      	nop
 800cfac:	24000bed 	.word	0x24000bed

0800cfb0 <__sfp_lock_release>:
 800cfb0:	4801      	ldr	r0, [pc, #4]	; (800cfb8 <__sfp_lock_release+0x8>)
 800cfb2:	f000 b969 	b.w	800d288 <__retarget_lock_release_recursive>
 800cfb6:	bf00      	nop
 800cfb8:	24000bed 	.word	0x24000bed

0800cfbc <__sinit>:
 800cfbc:	b510      	push	{r4, lr}
 800cfbe:	4604      	mov	r4, r0
 800cfc0:	f7ff fff0 	bl	800cfa4 <__sfp_lock_acquire>
 800cfc4:	6a23      	ldr	r3, [r4, #32]
 800cfc6:	b11b      	cbz	r3, 800cfd0 <__sinit+0x14>
 800cfc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfcc:	f7ff bff0 	b.w	800cfb0 <__sfp_lock_release>
 800cfd0:	4b04      	ldr	r3, [pc, #16]	; (800cfe4 <__sinit+0x28>)
 800cfd2:	6223      	str	r3, [r4, #32]
 800cfd4:	4b04      	ldr	r3, [pc, #16]	; (800cfe8 <__sinit+0x2c>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d1f5      	bne.n	800cfc8 <__sinit+0xc>
 800cfdc:	f7ff ffc4 	bl	800cf68 <global_stdio_init.part.0>
 800cfe0:	e7f2      	b.n	800cfc8 <__sinit+0xc>
 800cfe2:	bf00      	nop
 800cfe4:	0800cf29 	.word	0x0800cf29
 800cfe8:	24000be4 	.word	0x24000be4

0800cfec <_fwalk_sglue>:
 800cfec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cff0:	4607      	mov	r7, r0
 800cff2:	4688      	mov	r8, r1
 800cff4:	4614      	mov	r4, r2
 800cff6:	2600      	movs	r6, #0
 800cff8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cffc:	f1b9 0901 	subs.w	r9, r9, #1
 800d000:	d505      	bpl.n	800d00e <_fwalk_sglue+0x22>
 800d002:	6824      	ldr	r4, [r4, #0]
 800d004:	2c00      	cmp	r4, #0
 800d006:	d1f7      	bne.n	800cff8 <_fwalk_sglue+0xc>
 800d008:	4630      	mov	r0, r6
 800d00a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d00e:	89ab      	ldrh	r3, [r5, #12]
 800d010:	2b01      	cmp	r3, #1
 800d012:	d907      	bls.n	800d024 <_fwalk_sglue+0x38>
 800d014:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d018:	3301      	adds	r3, #1
 800d01a:	d003      	beq.n	800d024 <_fwalk_sglue+0x38>
 800d01c:	4629      	mov	r1, r5
 800d01e:	4638      	mov	r0, r7
 800d020:	47c0      	blx	r8
 800d022:	4306      	orrs	r6, r0
 800d024:	3568      	adds	r5, #104	; 0x68
 800d026:	e7e9      	b.n	800cffc <_fwalk_sglue+0x10>

0800d028 <sniprintf>:
 800d028:	b40c      	push	{r2, r3}
 800d02a:	b530      	push	{r4, r5, lr}
 800d02c:	4b17      	ldr	r3, [pc, #92]	; (800d08c <sniprintf+0x64>)
 800d02e:	1e0c      	subs	r4, r1, #0
 800d030:	681d      	ldr	r5, [r3, #0]
 800d032:	b09d      	sub	sp, #116	; 0x74
 800d034:	da08      	bge.n	800d048 <sniprintf+0x20>
 800d036:	238b      	movs	r3, #139	; 0x8b
 800d038:	602b      	str	r3, [r5, #0]
 800d03a:	f04f 30ff 	mov.w	r0, #4294967295
 800d03e:	b01d      	add	sp, #116	; 0x74
 800d040:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d044:	b002      	add	sp, #8
 800d046:	4770      	bx	lr
 800d048:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d04c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d050:	bf14      	ite	ne
 800d052:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d056:	4623      	moveq	r3, r4
 800d058:	9304      	str	r3, [sp, #16]
 800d05a:	9307      	str	r3, [sp, #28]
 800d05c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d060:	9002      	str	r0, [sp, #8]
 800d062:	9006      	str	r0, [sp, #24]
 800d064:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d068:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d06a:	ab21      	add	r3, sp, #132	; 0x84
 800d06c:	a902      	add	r1, sp, #8
 800d06e:	4628      	mov	r0, r5
 800d070:	9301      	str	r3, [sp, #4]
 800d072:	f001 fbd7 	bl	800e824 <_svfiprintf_r>
 800d076:	1c43      	adds	r3, r0, #1
 800d078:	bfbc      	itt	lt
 800d07a:	238b      	movlt	r3, #139	; 0x8b
 800d07c:	602b      	strlt	r3, [r5, #0]
 800d07e:	2c00      	cmp	r4, #0
 800d080:	d0dd      	beq.n	800d03e <sniprintf+0x16>
 800d082:	9b02      	ldr	r3, [sp, #8]
 800d084:	2200      	movs	r2, #0
 800d086:	701a      	strb	r2, [r3, #0]
 800d088:	e7d9      	b.n	800d03e <sniprintf+0x16>
 800d08a:	bf00      	nop
 800d08c:	24000068 	.word	0x24000068

0800d090 <siprintf>:
 800d090:	b40e      	push	{r1, r2, r3}
 800d092:	b500      	push	{lr}
 800d094:	b09c      	sub	sp, #112	; 0x70
 800d096:	ab1d      	add	r3, sp, #116	; 0x74
 800d098:	9002      	str	r0, [sp, #8]
 800d09a:	9006      	str	r0, [sp, #24]
 800d09c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d0a0:	4809      	ldr	r0, [pc, #36]	; (800d0c8 <siprintf+0x38>)
 800d0a2:	9107      	str	r1, [sp, #28]
 800d0a4:	9104      	str	r1, [sp, #16]
 800d0a6:	4909      	ldr	r1, [pc, #36]	; (800d0cc <siprintf+0x3c>)
 800d0a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0ac:	9105      	str	r1, [sp, #20]
 800d0ae:	6800      	ldr	r0, [r0, #0]
 800d0b0:	9301      	str	r3, [sp, #4]
 800d0b2:	a902      	add	r1, sp, #8
 800d0b4:	f001 fbb6 	bl	800e824 <_svfiprintf_r>
 800d0b8:	9b02      	ldr	r3, [sp, #8]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	701a      	strb	r2, [r3, #0]
 800d0be:	b01c      	add	sp, #112	; 0x70
 800d0c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0c4:	b003      	add	sp, #12
 800d0c6:	4770      	bx	lr
 800d0c8:	24000068 	.word	0x24000068
 800d0cc:	ffff0208 	.word	0xffff0208

0800d0d0 <__sread>:
 800d0d0:	b510      	push	{r4, lr}
 800d0d2:	460c      	mov	r4, r1
 800d0d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0d8:	f000 f886 	bl	800d1e8 <_read_r>
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	bfab      	itete	ge
 800d0e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d0e2:	89a3      	ldrhlt	r3, [r4, #12]
 800d0e4:	181b      	addge	r3, r3, r0
 800d0e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d0ea:	bfac      	ite	ge
 800d0ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800d0ee:	81a3      	strhlt	r3, [r4, #12]
 800d0f0:	bd10      	pop	{r4, pc}

0800d0f2 <__swrite>:
 800d0f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0f6:	461f      	mov	r7, r3
 800d0f8:	898b      	ldrh	r3, [r1, #12]
 800d0fa:	05db      	lsls	r3, r3, #23
 800d0fc:	4605      	mov	r5, r0
 800d0fe:	460c      	mov	r4, r1
 800d100:	4616      	mov	r6, r2
 800d102:	d505      	bpl.n	800d110 <__swrite+0x1e>
 800d104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d108:	2302      	movs	r3, #2
 800d10a:	2200      	movs	r2, #0
 800d10c:	f000 f85a 	bl	800d1c4 <_lseek_r>
 800d110:	89a3      	ldrh	r3, [r4, #12]
 800d112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d116:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d11a:	81a3      	strh	r3, [r4, #12]
 800d11c:	4632      	mov	r2, r6
 800d11e:	463b      	mov	r3, r7
 800d120:	4628      	mov	r0, r5
 800d122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d126:	f000 b871 	b.w	800d20c <_write_r>

0800d12a <__sseek>:
 800d12a:	b510      	push	{r4, lr}
 800d12c:	460c      	mov	r4, r1
 800d12e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d132:	f000 f847 	bl	800d1c4 <_lseek_r>
 800d136:	1c43      	adds	r3, r0, #1
 800d138:	89a3      	ldrh	r3, [r4, #12]
 800d13a:	bf15      	itete	ne
 800d13c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d13e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d142:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d146:	81a3      	strheq	r3, [r4, #12]
 800d148:	bf18      	it	ne
 800d14a:	81a3      	strhne	r3, [r4, #12]
 800d14c:	bd10      	pop	{r4, pc}

0800d14e <__sclose>:
 800d14e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d152:	f000 b827 	b.w	800d1a4 <_close_r>

0800d156 <memmove>:
 800d156:	4288      	cmp	r0, r1
 800d158:	b510      	push	{r4, lr}
 800d15a:	eb01 0402 	add.w	r4, r1, r2
 800d15e:	d902      	bls.n	800d166 <memmove+0x10>
 800d160:	4284      	cmp	r4, r0
 800d162:	4623      	mov	r3, r4
 800d164:	d807      	bhi.n	800d176 <memmove+0x20>
 800d166:	1e43      	subs	r3, r0, #1
 800d168:	42a1      	cmp	r1, r4
 800d16a:	d008      	beq.n	800d17e <memmove+0x28>
 800d16c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d170:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d174:	e7f8      	b.n	800d168 <memmove+0x12>
 800d176:	4402      	add	r2, r0
 800d178:	4601      	mov	r1, r0
 800d17a:	428a      	cmp	r2, r1
 800d17c:	d100      	bne.n	800d180 <memmove+0x2a>
 800d17e:	bd10      	pop	{r4, pc}
 800d180:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d184:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d188:	e7f7      	b.n	800d17a <memmove+0x24>

0800d18a <memset>:
 800d18a:	4402      	add	r2, r0
 800d18c:	4603      	mov	r3, r0
 800d18e:	4293      	cmp	r3, r2
 800d190:	d100      	bne.n	800d194 <memset+0xa>
 800d192:	4770      	bx	lr
 800d194:	f803 1b01 	strb.w	r1, [r3], #1
 800d198:	e7f9      	b.n	800d18e <memset+0x4>
	...

0800d19c <_localeconv_r>:
 800d19c:	4800      	ldr	r0, [pc, #0]	; (800d1a0 <_localeconv_r+0x4>)
 800d19e:	4770      	bx	lr
 800d1a0:	2400015c 	.word	0x2400015c

0800d1a4 <_close_r>:
 800d1a4:	b538      	push	{r3, r4, r5, lr}
 800d1a6:	4d06      	ldr	r5, [pc, #24]	; (800d1c0 <_close_r+0x1c>)
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	4604      	mov	r4, r0
 800d1ac:	4608      	mov	r0, r1
 800d1ae:	602b      	str	r3, [r5, #0]
 800d1b0:	f7f4 fa8f 	bl	80016d2 <_close>
 800d1b4:	1c43      	adds	r3, r0, #1
 800d1b6:	d102      	bne.n	800d1be <_close_r+0x1a>
 800d1b8:	682b      	ldr	r3, [r5, #0]
 800d1ba:	b103      	cbz	r3, 800d1be <_close_r+0x1a>
 800d1bc:	6023      	str	r3, [r4, #0]
 800d1be:	bd38      	pop	{r3, r4, r5, pc}
 800d1c0:	24000be8 	.word	0x24000be8

0800d1c4 <_lseek_r>:
 800d1c4:	b538      	push	{r3, r4, r5, lr}
 800d1c6:	4d07      	ldr	r5, [pc, #28]	; (800d1e4 <_lseek_r+0x20>)
 800d1c8:	4604      	mov	r4, r0
 800d1ca:	4608      	mov	r0, r1
 800d1cc:	4611      	mov	r1, r2
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	602a      	str	r2, [r5, #0]
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	f7f4 faa4 	bl	8001720 <_lseek>
 800d1d8:	1c43      	adds	r3, r0, #1
 800d1da:	d102      	bne.n	800d1e2 <_lseek_r+0x1e>
 800d1dc:	682b      	ldr	r3, [r5, #0]
 800d1de:	b103      	cbz	r3, 800d1e2 <_lseek_r+0x1e>
 800d1e0:	6023      	str	r3, [r4, #0]
 800d1e2:	bd38      	pop	{r3, r4, r5, pc}
 800d1e4:	24000be8 	.word	0x24000be8

0800d1e8 <_read_r>:
 800d1e8:	b538      	push	{r3, r4, r5, lr}
 800d1ea:	4d07      	ldr	r5, [pc, #28]	; (800d208 <_read_r+0x20>)
 800d1ec:	4604      	mov	r4, r0
 800d1ee:	4608      	mov	r0, r1
 800d1f0:	4611      	mov	r1, r2
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	602a      	str	r2, [r5, #0]
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	f7f4 fa32 	bl	8001660 <_read>
 800d1fc:	1c43      	adds	r3, r0, #1
 800d1fe:	d102      	bne.n	800d206 <_read_r+0x1e>
 800d200:	682b      	ldr	r3, [r5, #0]
 800d202:	b103      	cbz	r3, 800d206 <_read_r+0x1e>
 800d204:	6023      	str	r3, [r4, #0]
 800d206:	bd38      	pop	{r3, r4, r5, pc}
 800d208:	24000be8 	.word	0x24000be8

0800d20c <_write_r>:
 800d20c:	b538      	push	{r3, r4, r5, lr}
 800d20e:	4d07      	ldr	r5, [pc, #28]	; (800d22c <_write_r+0x20>)
 800d210:	4604      	mov	r4, r0
 800d212:	4608      	mov	r0, r1
 800d214:	4611      	mov	r1, r2
 800d216:	2200      	movs	r2, #0
 800d218:	602a      	str	r2, [r5, #0]
 800d21a:	461a      	mov	r2, r3
 800d21c:	f7f4 fa3d 	bl	800169a <_write>
 800d220:	1c43      	adds	r3, r0, #1
 800d222:	d102      	bne.n	800d22a <_write_r+0x1e>
 800d224:	682b      	ldr	r3, [r5, #0]
 800d226:	b103      	cbz	r3, 800d22a <_write_r+0x1e>
 800d228:	6023      	str	r3, [r4, #0]
 800d22a:	bd38      	pop	{r3, r4, r5, pc}
 800d22c:	24000be8 	.word	0x24000be8

0800d230 <__errno>:
 800d230:	4b01      	ldr	r3, [pc, #4]	; (800d238 <__errno+0x8>)
 800d232:	6818      	ldr	r0, [r3, #0]
 800d234:	4770      	bx	lr
 800d236:	bf00      	nop
 800d238:	24000068 	.word	0x24000068

0800d23c <__libc_init_array>:
 800d23c:	b570      	push	{r4, r5, r6, lr}
 800d23e:	4d0d      	ldr	r5, [pc, #52]	; (800d274 <__libc_init_array+0x38>)
 800d240:	4c0d      	ldr	r4, [pc, #52]	; (800d278 <__libc_init_array+0x3c>)
 800d242:	1b64      	subs	r4, r4, r5
 800d244:	10a4      	asrs	r4, r4, #2
 800d246:	2600      	movs	r6, #0
 800d248:	42a6      	cmp	r6, r4
 800d24a:	d109      	bne.n	800d260 <__libc_init_array+0x24>
 800d24c:	4d0b      	ldr	r5, [pc, #44]	; (800d27c <__libc_init_array+0x40>)
 800d24e:	4c0c      	ldr	r4, [pc, #48]	; (800d280 <__libc_init_array+0x44>)
 800d250:	f001 fff6 	bl	800f240 <_init>
 800d254:	1b64      	subs	r4, r4, r5
 800d256:	10a4      	asrs	r4, r4, #2
 800d258:	2600      	movs	r6, #0
 800d25a:	42a6      	cmp	r6, r4
 800d25c:	d105      	bne.n	800d26a <__libc_init_array+0x2e>
 800d25e:	bd70      	pop	{r4, r5, r6, pc}
 800d260:	f855 3b04 	ldr.w	r3, [r5], #4
 800d264:	4798      	blx	r3
 800d266:	3601      	adds	r6, #1
 800d268:	e7ee      	b.n	800d248 <__libc_init_array+0xc>
 800d26a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d26e:	4798      	blx	r3
 800d270:	3601      	adds	r6, #1
 800d272:	e7f2      	b.n	800d25a <__libc_init_array+0x1e>
 800d274:	0800f634 	.word	0x0800f634
 800d278:	0800f634 	.word	0x0800f634
 800d27c:	0800f634 	.word	0x0800f634
 800d280:	0800f638 	.word	0x0800f638

0800d284 <__retarget_lock_init_recursive>:
 800d284:	4770      	bx	lr

0800d286 <__retarget_lock_acquire_recursive>:
 800d286:	4770      	bx	lr

0800d288 <__retarget_lock_release_recursive>:
 800d288:	4770      	bx	lr

0800d28a <quorem>:
 800d28a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d28e:	6903      	ldr	r3, [r0, #16]
 800d290:	690c      	ldr	r4, [r1, #16]
 800d292:	42a3      	cmp	r3, r4
 800d294:	4607      	mov	r7, r0
 800d296:	db7e      	blt.n	800d396 <quorem+0x10c>
 800d298:	3c01      	subs	r4, #1
 800d29a:	f101 0814 	add.w	r8, r1, #20
 800d29e:	f100 0514 	add.w	r5, r0, #20
 800d2a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d2a6:	9301      	str	r3, [sp, #4]
 800d2a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d2ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d2b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d2bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800d2c0:	d331      	bcc.n	800d326 <quorem+0x9c>
 800d2c2:	f04f 0e00 	mov.w	lr, #0
 800d2c6:	4640      	mov	r0, r8
 800d2c8:	46ac      	mov	ip, r5
 800d2ca:	46f2      	mov	sl, lr
 800d2cc:	f850 2b04 	ldr.w	r2, [r0], #4
 800d2d0:	b293      	uxth	r3, r2
 800d2d2:	fb06 e303 	mla	r3, r6, r3, lr
 800d2d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d2da:	0c1a      	lsrs	r2, r3, #16
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	ebaa 0303 	sub.w	r3, sl, r3
 800d2e2:	f8dc a000 	ldr.w	sl, [ip]
 800d2e6:	fa13 f38a 	uxtah	r3, r3, sl
 800d2ea:	fb06 220e 	mla	r2, r6, lr, r2
 800d2ee:	9300      	str	r3, [sp, #0]
 800d2f0:	9b00      	ldr	r3, [sp, #0]
 800d2f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d2f6:	b292      	uxth	r2, r2
 800d2f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d2fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d300:	f8bd 3000 	ldrh.w	r3, [sp]
 800d304:	4581      	cmp	r9, r0
 800d306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d30a:	f84c 3b04 	str.w	r3, [ip], #4
 800d30e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d312:	d2db      	bcs.n	800d2cc <quorem+0x42>
 800d314:	f855 300b 	ldr.w	r3, [r5, fp]
 800d318:	b92b      	cbnz	r3, 800d326 <quorem+0x9c>
 800d31a:	9b01      	ldr	r3, [sp, #4]
 800d31c:	3b04      	subs	r3, #4
 800d31e:	429d      	cmp	r5, r3
 800d320:	461a      	mov	r2, r3
 800d322:	d32c      	bcc.n	800d37e <quorem+0xf4>
 800d324:	613c      	str	r4, [r7, #16]
 800d326:	4638      	mov	r0, r7
 800d328:	f001 f922 	bl	800e570 <__mcmp>
 800d32c:	2800      	cmp	r0, #0
 800d32e:	db22      	blt.n	800d376 <quorem+0xec>
 800d330:	3601      	adds	r6, #1
 800d332:	4629      	mov	r1, r5
 800d334:	2000      	movs	r0, #0
 800d336:	f858 2b04 	ldr.w	r2, [r8], #4
 800d33a:	f8d1 c000 	ldr.w	ip, [r1]
 800d33e:	b293      	uxth	r3, r2
 800d340:	1ac3      	subs	r3, r0, r3
 800d342:	0c12      	lsrs	r2, r2, #16
 800d344:	fa13 f38c 	uxtah	r3, r3, ip
 800d348:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d34c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d350:	b29b      	uxth	r3, r3
 800d352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d356:	45c1      	cmp	r9, r8
 800d358:	f841 3b04 	str.w	r3, [r1], #4
 800d35c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d360:	d2e9      	bcs.n	800d336 <quorem+0xac>
 800d362:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d366:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d36a:	b922      	cbnz	r2, 800d376 <quorem+0xec>
 800d36c:	3b04      	subs	r3, #4
 800d36e:	429d      	cmp	r5, r3
 800d370:	461a      	mov	r2, r3
 800d372:	d30a      	bcc.n	800d38a <quorem+0x100>
 800d374:	613c      	str	r4, [r7, #16]
 800d376:	4630      	mov	r0, r6
 800d378:	b003      	add	sp, #12
 800d37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d37e:	6812      	ldr	r2, [r2, #0]
 800d380:	3b04      	subs	r3, #4
 800d382:	2a00      	cmp	r2, #0
 800d384:	d1ce      	bne.n	800d324 <quorem+0x9a>
 800d386:	3c01      	subs	r4, #1
 800d388:	e7c9      	b.n	800d31e <quorem+0x94>
 800d38a:	6812      	ldr	r2, [r2, #0]
 800d38c:	3b04      	subs	r3, #4
 800d38e:	2a00      	cmp	r2, #0
 800d390:	d1f0      	bne.n	800d374 <quorem+0xea>
 800d392:	3c01      	subs	r4, #1
 800d394:	e7eb      	b.n	800d36e <quorem+0xe4>
 800d396:	2000      	movs	r0, #0
 800d398:	e7ee      	b.n	800d378 <quorem+0xee>
 800d39a:	0000      	movs	r0, r0
 800d39c:	0000      	movs	r0, r0
	...

0800d3a0 <_dtoa_r>:
 800d3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a4:	ed2d 8b02 	vpush	{d8}
 800d3a8:	69c5      	ldr	r5, [r0, #28]
 800d3aa:	b091      	sub	sp, #68	; 0x44
 800d3ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d3b0:	ec59 8b10 	vmov	r8, r9, d0
 800d3b4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800d3b6:	9106      	str	r1, [sp, #24]
 800d3b8:	4606      	mov	r6, r0
 800d3ba:	9208      	str	r2, [sp, #32]
 800d3bc:	930c      	str	r3, [sp, #48]	; 0x30
 800d3be:	b975      	cbnz	r5, 800d3de <_dtoa_r+0x3e>
 800d3c0:	2010      	movs	r0, #16
 800d3c2:	f000 fda5 	bl	800df10 <malloc>
 800d3c6:	4602      	mov	r2, r0
 800d3c8:	61f0      	str	r0, [r6, #28]
 800d3ca:	b920      	cbnz	r0, 800d3d6 <_dtoa_r+0x36>
 800d3cc:	4ba6      	ldr	r3, [pc, #664]	; (800d668 <_dtoa_r+0x2c8>)
 800d3ce:	21ef      	movs	r1, #239	; 0xef
 800d3d0:	48a6      	ldr	r0, [pc, #664]	; (800d66c <_dtoa_r+0x2cc>)
 800d3d2:	f001 fbf1 	bl	800ebb8 <__assert_func>
 800d3d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d3da:	6005      	str	r5, [r0, #0]
 800d3dc:	60c5      	str	r5, [r0, #12]
 800d3de:	69f3      	ldr	r3, [r6, #28]
 800d3e0:	6819      	ldr	r1, [r3, #0]
 800d3e2:	b151      	cbz	r1, 800d3fa <_dtoa_r+0x5a>
 800d3e4:	685a      	ldr	r2, [r3, #4]
 800d3e6:	604a      	str	r2, [r1, #4]
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	4093      	lsls	r3, r2
 800d3ec:	608b      	str	r3, [r1, #8]
 800d3ee:	4630      	mov	r0, r6
 800d3f0:	f000 fe82 	bl	800e0f8 <_Bfree>
 800d3f4:	69f3      	ldr	r3, [r6, #28]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	601a      	str	r2, [r3, #0]
 800d3fa:	f1b9 0300 	subs.w	r3, r9, #0
 800d3fe:	bfbb      	ittet	lt
 800d400:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d404:	9303      	strlt	r3, [sp, #12]
 800d406:	2300      	movge	r3, #0
 800d408:	2201      	movlt	r2, #1
 800d40a:	bfac      	ite	ge
 800d40c:	6023      	strge	r3, [r4, #0]
 800d40e:	6022      	strlt	r2, [r4, #0]
 800d410:	4b97      	ldr	r3, [pc, #604]	; (800d670 <_dtoa_r+0x2d0>)
 800d412:	9c03      	ldr	r4, [sp, #12]
 800d414:	43a3      	bics	r3, r4
 800d416:	d11c      	bne.n	800d452 <_dtoa_r+0xb2>
 800d418:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d41a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d41e:	6013      	str	r3, [r2, #0]
 800d420:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d424:	ea53 0308 	orrs.w	r3, r3, r8
 800d428:	f000 84fb 	beq.w	800de22 <_dtoa_r+0xa82>
 800d42c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d42e:	b963      	cbnz	r3, 800d44a <_dtoa_r+0xaa>
 800d430:	4b90      	ldr	r3, [pc, #576]	; (800d674 <_dtoa_r+0x2d4>)
 800d432:	e020      	b.n	800d476 <_dtoa_r+0xd6>
 800d434:	4b90      	ldr	r3, [pc, #576]	; (800d678 <_dtoa_r+0x2d8>)
 800d436:	9301      	str	r3, [sp, #4]
 800d438:	3308      	adds	r3, #8
 800d43a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d43c:	6013      	str	r3, [r2, #0]
 800d43e:	9801      	ldr	r0, [sp, #4]
 800d440:	b011      	add	sp, #68	; 0x44
 800d442:	ecbd 8b02 	vpop	{d8}
 800d446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d44a:	4b8a      	ldr	r3, [pc, #552]	; (800d674 <_dtoa_r+0x2d4>)
 800d44c:	9301      	str	r3, [sp, #4]
 800d44e:	3303      	adds	r3, #3
 800d450:	e7f3      	b.n	800d43a <_dtoa_r+0x9a>
 800d452:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d456:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d45e:	d10c      	bne.n	800d47a <_dtoa_r+0xda>
 800d460:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d462:	2301      	movs	r3, #1
 800d464:	6013      	str	r3, [r2, #0]
 800d466:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d468:	2b00      	cmp	r3, #0
 800d46a:	f000 84d7 	beq.w	800de1c <_dtoa_r+0xa7c>
 800d46e:	4b83      	ldr	r3, [pc, #524]	; (800d67c <_dtoa_r+0x2dc>)
 800d470:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d472:	6013      	str	r3, [r2, #0]
 800d474:	3b01      	subs	r3, #1
 800d476:	9301      	str	r3, [sp, #4]
 800d478:	e7e1      	b.n	800d43e <_dtoa_r+0x9e>
 800d47a:	aa0e      	add	r2, sp, #56	; 0x38
 800d47c:	a90f      	add	r1, sp, #60	; 0x3c
 800d47e:	4630      	mov	r0, r6
 800d480:	eeb0 0b48 	vmov.f64	d0, d8
 800d484:	f001 f91a 	bl	800e6bc <__d2b>
 800d488:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800d48c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d48e:	4605      	mov	r5, r0
 800d490:	2b00      	cmp	r3, #0
 800d492:	d046      	beq.n	800d522 <_dtoa_r+0x182>
 800d494:	eeb0 7b48 	vmov.f64	d7, d8
 800d498:	ee18 1a90 	vmov	r1, s17
 800d49c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d4a0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800d4a4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d4a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d4ac:	2000      	movs	r0, #0
 800d4ae:	ee07 1a90 	vmov	s15, r1
 800d4b2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800d4b6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800d650 <_dtoa_r+0x2b0>
 800d4ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d4be:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800d658 <_dtoa_r+0x2b8>
 800d4c2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d4c6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800d660 <_dtoa_r+0x2c0>
 800d4ca:	ee07 3a90 	vmov	s15, r3
 800d4ce:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d4d2:	eeb0 7b46 	vmov.f64	d7, d6
 800d4d6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d4da:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d4de:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d4e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4e6:	ee16 ba90 	vmov	fp, s13
 800d4ea:	9009      	str	r0, [sp, #36]	; 0x24
 800d4ec:	d508      	bpl.n	800d500 <_dtoa_r+0x160>
 800d4ee:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d4f2:	eeb4 6b47 	vcmp.f64	d6, d7
 800d4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4fa:	bf18      	it	ne
 800d4fc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d500:	f1bb 0f16 	cmp.w	fp, #22
 800d504:	d82b      	bhi.n	800d55e <_dtoa_r+0x1be>
 800d506:	495e      	ldr	r1, [pc, #376]	; (800d680 <_dtoa_r+0x2e0>)
 800d508:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800d50c:	ed91 7b00 	vldr	d7, [r1]
 800d510:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d518:	d501      	bpl.n	800d51e <_dtoa_r+0x17e>
 800d51a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d51e:	2100      	movs	r1, #0
 800d520:	e01e      	b.n	800d560 <_dtoa_r+0x1c0>
 800d522:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d524:	4413      	add	r3, r2
 800d526:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800d52a:	2920      	cmp	r1, #32
 800d52c:	bfc1      	itttt	gt
 800d52e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800d532:	408c      	lslgt	r4, r1
 800d534:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800d538:	fa28 f101 	lsrgt.w	r1, r8, r1
 800d53c:	bfd6      	itet	le
 800d53e:	f1c1 0120 	rsble	r1, r1, #32
 800d542:	4321      	orrgt	r1, r4
 800d544:	fa08 f101 	lslle.w	r1, r8, r1
 800d548:	ee07 1a90 	vmov	s15, r1
 800d54c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d550:	3b01      	subs	r3, #1
 800d552:	ee17 1a90 	vmov	r1, s15
 800d556:	2001      	movs	r0, #1
 800d558:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d55c:	e7a7      	b.n	800d4ae <_dtoa_r+0x10e>
 800d55e:	2101      	movs	r1, #1
 800d560:	1ad2      	subs	r2, r2, r3
 800d562:	1e53      	subs	r3, r2, #1
 800d564:	9305      	str	r3, [sp, #20]
 800d566:	bf45      	ittet	mi
 800d568:	f1c2 0301 	rsbmi	r3, r2, #1
 800d56c:	9304      	strmi	r3, [sp, #16]
 800d56e:	2300      	movpl	r3, #0
 800d570:	2300      	movmi	r3, #0
 800d572:	bf4c      	ite	mi
 800d574:	9305      	strmi	r3, [sp, #20]
 800d576:	9304      	strpl	r3, [sp, #16]
 800d578:	f1bb 0f00 	cmp.w	fp, #0
 800d57c:	910b      	str	r1, [sp, #44]	; 0x2c
 800d57e:	db18      	blt.n	800d5b2 <_dtoa_r+0x212>
 800d580:	9b05      	ldr	r3, [sp, #20]
 800d582:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d586:	445b      	add	r3, fp
 800d588:	9305      	str	r3, [sp, #20]
 800d58a:	2300      	movs	r3, #0
 800d58c:	9a06      	ldr	r2, [sp, #24]
 800d58e:	2a09      	cmp	r2, #9
 800d590:	d848      	bhi.n	800d624 <_dtoa_r+0x284>
 800d592:	2a05      	cmp	r2, #5
 800d594:	bfc4      	itt	gt
 800d596:	3a04      	subgt	r2, #4
 800d598:	9206      	strgt	r2, [sp, #24]
 800d59a:	9a06      	ldr	r2, [sp, #24]
 800d59c:	f1a2 0202 	sub.w	r2, r2, #2
 800d5a0:	bfcc      	ite	gt
 800d5a2:	2400      	movgt	r4, #0
 800d5a4:	2401      	movle	r4, #1
 800d5a6:	2a03      	cmp	r2, #3
 800d5a8:	d847      	bhi.n	800d63a <_dtoa_r+0x29a>
 800d5aa:	e8df f002 	tbb	[pc, r2]
 800d5ae:	2d0b      	.short	0x2d0b
 800d5b0:	392b      	.short	0x392b
 800d5b2:	9b04      	ldr	r3, [sp, #16]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	eba3 030b 	sub.w	r3, r3, fp
 800d5ba:	9304      	str	r3, [sp, #16]
 800d5bc:	920a      	str	r2, [sp, #40]	; 0x28
 800d5be:	f1cb 0300 	rsb	r3, fp, #0
 800d5c2:	e7e3      	b.n	800d58c <_dtoa_r+0x1ec>
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	9207      	str	r2, [sp, #28]
 800d5c8:	9a08      	ldr	r2, [sp, #32]
 800d5ca:	2a00      	cmp	r2, #0
 800d5cc:	dc38      	bgt.n	800d640 <_dtoa_r+0x2a0>
 800d5ce:	f04f 0a01 	mov.w	sl, #1
 800d5d2:	46d1      	mov	r9, sl
 800d5d4:	4652      	mov	r2, sl
 800d5d6:	f8cd a020 	str.w	sl, [sp, #32]
 800d5da:	69f7      	ldr	r7, [r6, #28]
 800d5dc:	2100      	movs	r1, #0
 800d5de:	2004      	movs	r0, #4
 800d5e0:	f100 0c14 	add.w	ip, r0, #20
 800d5e4:	4594      	cmp	ip, r2
 800d5e6:	d930      	bls.n	800d64a <_dtoa_r+0x2aa>
 800d5e8:	6079      	str	r1, [r7, #4]
 800d5ea:	4630      	mov	r0, r6
 800d5ec:	930d      	str	r3, [sp, #52]	; 0x34
 800d5ee:	f000 fd43 	bl	800e078 <_Balloc>
 800d5f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5f4:	9001      	str	r0, [sp, #4]
 800d5f6:	4602      	mov	r2, r0
 800d5f8:	2800      	cmp	r0, #0
 800d5fa:	d145      	bne.n	800d688 <_dtoa_r+0x2e8>
 800d5fc:	4b21      	ldr	r3, [pc, #132]	; (800d684 <_dtoa_r+0x2e4>)
 800d5fe:	f240 11af 	movw	r1, #431	; 0x1af
 800d602:	e6e5      	b.n	800d3d0 <_dtoa_r+0x30>
 800d604:	2201      	movs	r2, #1
 800d606:	e7de      	b.n	800d5c6 <_dtoa_r+0x226>
 800d608:	2200      	movs	r2, #0
 800d60a:	9207      	str	r2, [sp, #28]
 800d60c:	9a08      	ldr	r2, [sp, #32]
 800d60e:	eb0b 0a02 	add.w	sl, fp, r2
 800d612:	f10a 0901 	add.w	r9, sl, #1
 800d616:	464a      	mov	r2, r9
 800d618:	2a01      	cmp	r2, #1
 800d61a:	bfb8      	it	lt
 800d61c:	2201      	movlt	r2, #1
 800d61e:	e7dc      	b.n	800d5da <_dtoa_r+0x23a>
 800d620:	2201      	movs	r2, #1
 800d622:	e7f2      	b.n	800d60a <_dtoa_r+0x26a>
 800d624:	2401      	movs	r4, #1
 800d626:	2200      	movs	r2, #0
 800d628:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800d62c:	f04f 3aff 	mov.w	sl, #4294967295
 800d630:	2100      	movs	r1, #0
 800d632:	46d1      	mov	r9, sl
 800d634:	2212      	movs	r2, #18
 800d636:	9108      	str	r1, [sp, #32]
 800d638:	e7cf      	b.n	800d5da <_dtoa_r+0x23a>
 800d63a:	2201      	movs	r2, #1
 800d63c:	9207      	str	r2, [sp, #28]
 800d63e:	e7f5      	b.n	800d62c <_dtoa_r+0x28c>
 800d640:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d644:	46d1      	mov	r9, sl
 800d646:	4652      	mov	r2, sl
 800d648:	e7c7      	b.n	800d5da <_dtoa_r+0x23a>
 800d64a:	3101      	adds	r1, #1
 800d64c:	0040      	lsls	r0, r0, #1
 800d64e:	e7c7      	b.n	800d5e0 <_dtoa_r+0x240>
 800d650:	636f4361 	.word	0x636f4361
 800d654:	3fd287a7 	.word	0x3fd287a7
 800d658:	8b60c8b3 	.word	0x8b60c8b3
 800d65c:	3fc68a28 	.word	0x3fc68a28
 800d660:	509f79fb 	.word	0x509f79fb
 800d664:	3fd34413 	.word	0x3fd34413
 800d668:	0800f2fd 	.word	0x0800f2fd
 800d66c:	0800f314 	.word	0x0800f314
 800d670:	7ff00000 	.word	0x7ff00000
 800d674:	0800f2f9 	.word	0x0800f2f9
 800d678:	0800f2f0 	.word	0x0800f2f0
 800d67c:	0800f2cd 	.word	0x0800f2cd
 800d680:	0800f400 	.word	0x0800f400
 800d684:	0800f36c 	.word	0x0800f36c
 800d688:	69f2      	ldr	r2, [r6, #28]
 800d68a:	9901      	ldr	r1, [sp, #4]
 800d68c:	6011      	str	r1, [r2, #0]
 800d68e:	f1b9 0f0e 	cmp.w	r9, #14
 800d692:	d86c      	bhi.n	800d76e <_dtoa_r+0x3ce>
 800d694:	2c00      	cmp	r4, #0
 800d696:	d06a      	beq.n	800d76e <_dtoa_r+0x3ce>
 800d698:	f1bb 0f00 	cmp.w	fp, #0
 800d69c:	f340 80a0 	ble.w	800d7e0 <_dtoa_r+0x440>
 800d6a0:	4ac1      	ldr	r2, [pc, #772]	; (800d9a8 <_dtoa_r+0x608>)
 800d6a2:	f00b 010f 	and.w	r1, fp, #15
 800d6a6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d6aa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d6ae:	ed92 7b00 	vldr	d7, [r2]
 800d6b2:	ea4f 122b 	mov.w	r2, fp, asr #4
 800d6b6:	f000 8087 	beq.w	800d7c8 <_dtoa_r+0x428>
 800d6ba:	49bc      	ldr	r1, [pc, #752]	; (800d9ac <_dtoa_r+0x60c>)
 800d6bc:	ed91 6b08 	vldr	d6, [r1, #32]
 800d6c0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d6c4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d6c8:	f002 020f 	and.w	r2, r2, #15
 800d6cc:	2103      	movs	r1, #3
 800d6ce:	48b7      	ldr	r0, [pc, #732]	; (800d9ac <_dtoa_r+0x60c>)
 800d6d0:	2a00      	cmp	r2, #0
 800d6d2:	d17b      	bne.n	800d7cc <_dtoa_r+0x42c>
 800d6d4:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d6d8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d6dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d6e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d6e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d6e6:	2a00      	cmp	r2, #0
 800d6e8:	f000 80a0 	beq.w	800d82c <_dtoa_r+0x48c>
 800d6ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d6f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6f8:	f140 8098 	bpl.w	800d82c <_dtoa_r+0x48c>
 800d6fc:	f1b9 0f00 	cmp.w	r9, #0
 800d700:	f000 8094 	beq.w	800d82c <_dtoa_r+0x48c>
 800d704:	f1ba 0f00 	cmp.w	sl, #0
 800d708:	dd2f      	ble.n	800d76a <_dtoa_r+0x3ca>
 800d70a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d70e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d712:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d716:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d71a:	3101      	adds	r1, #1
 800d71c:	4654      	mov	r4, sl
 800d71e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d722:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d726:	ee07 1a90 	vmov	s15, r1
 800d72a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d72e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d732:	ee15 7a90 	vmov	r7, s11
 800d736:	ec51 0b15 	vmov	r0, r1, d5
 800d73a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800d73e:	2c00      	cmp	r4, #0
 800d740:	d177      	bne.n	800d832 <_dtoa_r+0x492>
 800d742:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d746:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d74a:	ec41 0b17 	vmov	d7, r0, r1
 800d74e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d756:	f300 826a 	bgt.w	800dc2e <_dtoa_r+0x88e>
 800d75a:	eeb1 7b47 	vneg.f64	d7, d7
 800d75e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d766:	f100 8260 	bmi.w	800dc2a <_dtoa_r+0x88a>
 800d76a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d76e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d770:	2a00      	cmp	r2, #0
 800d772:	f2c0 811d 	blt.w	800d9b0 <_dtoa_r+0x610>
 800d776:	f1bb 0f0e 	cmp.w	fp, #14
 800d77a:	f300 8119 	bgt.w	800d9b0 <_dtoa_r+0x610>
 800d77e:	4b8a      	ldr	r3, [pc, #552]	; (800d9a8 <_dtoa_r+0x608>)
 800d780:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d784:	ed93 6b00 	vldr	d6, [r3]
 800d788:	9b08      	ldr	r3, [sp, #32]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	f280 80b7 	bge.w	800d8fe <_dtoa_r+0x55e>
 800d790:	f1b9 0f00 	cmp.w	r9, #0
 800d794:	f300 80b3 	bgt.w	800d8fe <_dtoa_r+0x55e>
 800d798:	f040 8246 	bne.w	800dc28 <_dtoa_r+0x888>
 800d79c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d7a0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d7a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d7a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d7ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7b0:	464c      	mov	r4, r9
 800d7b2:	464f      	mov	r7, r9
 800d7b4:	f280 821c 	bge.w	800dbf0 <_dtoa_r+0x850>
 800d7b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d7bc:	2331      	movs	r3, #49	; 0x31
 800d7be:	f808 3b01 	strb.w	r3, [r8], #1
 800d7c2:	f10b 0b01 	add.w	fp, fp, #1
 800d7c6:	e218      	b.n	800dbfa <_dtoa_r+0x85a>
 800d7c8:	2102      	movs	r1, #2
 800d7ca:	e780      	b.n	800d6ce <_dtoa_r+0x32e>
 800d7cc:	07d4      	lsls	r4, r2, #31
 800d7ce:	d504      	bpl.n	800d7da <_dtoa_r+0x43a>
 800d7d0:	ed90 6b00 	vldr	d6, [r0]
 800d7d4:	3101      	adds	r1, #1
 800d7d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d7da:	1052      	asrs	r2, r2, #1
 800d7dc:	3008      	adds	r0, #8
 800d7de:	e777      	b.n	800d6d0 <_dtoa_r+0x330>
 800d7e0:	d022      	beq.n	800d828 <_dtoa_r+0x488>
 800d7e2:	f1cb 0200 	rsb	r2, fp, #0
 800d7e6:	4970      	ldr	r1, [pc, #448]	; (800d9a8 <_dtoa_r+0x608>)
 800d7e8:	f002 000f 	and.w	r0, r2, #15
 800d7ec:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d7f0:	ed91 7b00 	vldr	d7, [r1]
 800d7f4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d7f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d7fc:	486b      	ldr	r0, [pc, #428]	; (800d9ac <_dtoa_r+0x60c>)
 800d7fe:	1112      	asrs	r2, r2, #4
 800d800:	2400      	movs	r4, #0
 800d802:	2102      	movs	r1, #2
 800d804:	b92a      	cbnz	r2, 800d812 <_dtoa_r+0x472>
 800d806:	2c00      	cmp	r4, #0
 800d808:	f43f af6a 	beq.w	800d6e0 <_dtoa_r+0x340>
 800d80c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d810:	e766      	b.n	800d6e0 <_dtoa_r+0x340>
 800d812:	07d7      	lsls	r7, r2, #31
 800d814:	d505      	bpl.n	800d822 <_dtoa_r+0x482>
 800d816:	ed90 6b00 	vldr	d6, [r0]
 800d81a:	3101      	adds	r1, #1
 800d81c:	2401      	movs	r4, #1
 800d81e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d822:	1052      	asrs	r2, r2, #1
 800d824:	3008      	adds	r0, #8
 800d826:	e7ed      	b.n	800d804 <_dtoa_r+0x464>
 800d828:	2102      	movs	r1, #2
 800d82a:	e759      	b.n	800d6e0 <_dtoa_r+0x340>
 800d82c:	465a      	mov	r2, fp
 800d82e:	464c      	mov	r4, r9
 800d830:	e775      	b.n	800d71e <_dtoa_r+0x37e>
 800d832:	ec41 0b17 	vmov	d7, r0, r1
 800d836:	495c      	ldr	r1, [pc, #368]	; (800d9a8 <_dtoa_r+0x608>)
 800d838:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800d83c:	ed11 4b02 	vldr	d4, [r1, #-8]
 800d840:	9901      	ldr	r1, [sp, #4]
 800d842:	440c      	add	r4, r1
 800d844:	9907      	ldr	r1, [sp, #28]
 800d846:	b351      	cbz	r1, 800d89e <_dtoa_r+0x4fe>
 800d848:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d84c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d850:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d854:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d858:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d85c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d860:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d864:	ee14 1a90 	vmov	r1, s9
 800d868:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d86c:	3130      	adds	r1, #48	; 0x30
 800d86e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d872:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d87a:	f808 1b01 	strb.w	r1, [r8], #1
 800d87e:	d439      	bmi.n	800d8f4 <_dtoa_r+0x554>
 800d880:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d884:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d88c:	d472      	bmi.n	800d974 <_dtoa_r+0x5d4>
 800d88e:	45a0      	cmp	r8, r4
 800d890:	f43f af6b 	beq.w	800d76a <_dtoa_r+0x3ca>
 800d894:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d898:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d89c:	e7e0      	b.n	800d860 <_dtoa_r+0x4c0>
 800d89e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d8a2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d8a6:	4620      	mov	r0, r4
 800d8a8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d8ac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d8b0:	ee14 1a90 	vmov	r1, s9
 800d8b4:	3130      	adds	r1, #48	; 0x30
 800d8b6:	f808 1b01 	strb.w	r1, [r8], #1
 800d8ba:	45a0      	cmp	r8, r4
 800d8bc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d8c0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d8c4:	d118      	bne.n	800d8f8 <_dtoa_r+0x558>
 800d8c6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d8ca:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d8ce:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d8d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8d6:	dc4d      	bgt.n	800d974 <_dtoa_r+0x5d4>
 800d8d8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d8dc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d8e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8e4:	f57f af41 	bpl.w	800d76a <_dtoa_r+0x3ca>
 800d8e8:	4680      	mov	r8, r0
 800d8ea:	3801      	subs	r0, #1
 800d8ec:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d8f0:	2b30      	cmp	r3, #48	; 0x30
 800d8f2:	d0f9      	beq.n	800d8e8 <_dtoa_r+0x548>
 800d8f4:	4693      	mov	fp, r2
 800d8f6:	e02a      	b.n	800d94e <_dtoa_r+0x5ae>
 800d8f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d8fc:	e7d6      	b.n	800d8ac <_dtoa_r+0x50c>
 800d8fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d902:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d906:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d90a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d90e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d912:	ee15 3a10 	vmov	r3, s10
 800d916:	3330      	adds	r3, #48	; 0x30
 800d918:	f808 3b01 	strb.w	r3, [r8], #1
 800d91c:	9b01      	ldr	r3, [sp, #4]
 800d91e:	eba8 0303 	sub.w	r3, r8, r3
 800d922:	4599      	cmp	r9, r3
 800d924:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d928:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d92c:	d133      	bne.n	800d996 <_dtoa_r+0x5f6>
 800d92e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d932:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d93a:	dc1a      	bgt.n	800d972 <_dtoa_r+0x5d2>
 800d93c:	eeb4 7b46 	vcmp.f64	d7, d6
 800d940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d944:	d103      	bne.n	800d94e <_dtoa_r+0x5ae>
 800d946:	ee15 3a10 	vmov	r3, s10
 800d94a:	07d9      	lsls	r1, r3, #31
 800d94c:	d411      	bmi.n	800d972 <_dtoa_r+0x5d2>
 800d94e:	4629      	mov	r1, r5
 800d950:	4630      	mov	r0, r6
 800d952:	f000 fbd1 	bl	800e0f8 <_Bfree>
 800d956:	2300      	movs	r3, #0
 800d958:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d95a:	f888 3000 	strb.w	r3, [r8]
 800d95e:	f10b 0301 	add.w	r3, fp, #1
 800d962:	6013      	str	r3, [r2, #0]
 800d964:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d966:	2b00      	cmp	r3, #0
 800d968:	f43f ad69 	beq.w	800d43e <_dtoa_r+0x9e>
 800d96c:	f8c3 8000 	str.w	r8, [r3]
 800d970:	e565      	b.n	800d43e <_dtoa_r+0x9e>
 800d972:	465a      	mov	r2, fp
 800d974:	4643      	mov	r3, r8
 800d976:	4698      	mov	r8, r3
 800d978:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800d97c:	2939      	cmp	r1, #57	; 0x39
 800d97e:	d106      	bne.n	800d98e <_dtoa_r+0x5ee>
 800d980:	9901      	ldr	r1, [sp, #4]
 800d982:	4299      	cmp	r1, r3
 800d984:	d1f7      	bne.n	800d976 <_dtoa_r+0x5d6>
 800d986:	9801      	ldr	r0, [sp, #4]
 800d988:	2130      	movs	r1, #48	; 0x30
 800d98a:	3201      	adds	r2, #1
 800d98c:	7001      	strb	r1, [r0, #0]
 800d98e:	7819      	ldrb	r1, [r3, #0]
 800d990:	3101      	adds	r1, #1
 800d992:	7019      	strb	r1, [r3, #0]
 800d994:	e7ae      	b.n	800d8f4 <_dtoa_r+0x554>
 800d996:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d99a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9a2:	d1b2      	bne.n	800d90a <_dtoa_r+0x56a>
 800d9a4:	e7d3      	b.n	800d94e <_dtoa_r+0x5ae>
 800d9a6:	bf00      	nop
 800d9a8:	0800f400 	.word	0x0800f400
 800d9ac:	0800f3d8 	.word	0x0800f3d8
 800d9b0:	9907      	ldr	r1, [sp, #28]
 800d9b2:	2900      	cmp	r1, #0
 800d9b4:	f000 80d0 	beq.w	800db58 <_dtoa_r+0x7b8>
 800d9b8:	9906      	ldr	r1, [sp, #24]
 800d9ba:	2901      	cmp	r1, #1
 800d9bc:	f300 80b4 	bgt.w	800db28 <_dtoa_r+0x788>
 800d9c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d9c2:	2900      	cmp	r1, #0
 800d9c4:	f000 80ac 	beq.w	800db20 <_dtoa_r+0x780>
 800d9c8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d9cc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d9d0:	461c      	mov	r4, r3
 800d9d2:	9309      	str	r3, [sp, #36]	; 0x24
 800d9d4:	9b04      	ldr	r3, [sp, #16]
 800d9d6:	4413      	add	r3, r2
 800d9d8:	9304      	str	r3, [sp, #16]
 800d9da:	9b05      	ldr	r3, [sp, #20]
 800d9dc:	2101      	movs	r1, #1
 800d9de:	4413      	add	r3, r2
 800d9e0:	4630      	mov	r0, r6
 800d9e2:	9305      	str	r3, [sp, #20]
 800d9e4:	f000 fc3e 	bl	800e264 <__i2b>
 800d9e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9ea:	4607      	mov	r7, r0
 800d9ec:	f1b8 0f00 	cmp.w	r8, #0
 800d9f0:	d00d      	beq.n	800da0e <_dtoa_r+0x66e>
 800d9f2:	9a05      	ldr	r2, [sp, #20]
 800d9f4:	2a00      	cmp	r2, #0
 800d9f6:	dd0a      	ble.n	800da0e <_dtoa_r+0x66e>
 800d9f8:	4542      	cmp	r2, r8
 800d9fa:	9904      	ldr	r1, [sp, #16]
 800d9fc:	bfa8      	it	ge
 800d9fe:	4642      	movge	r2, r8
 800da00:	1a89      	subs	r1, r1, r2
 800da02:	9104      	str	r1, [sp, #16]
 800da04:	9905      	ldr	r1, [sp, #20]
 800da06:	eba8 0802 	sub.w	r8, r8, r2
 800da0a:	1a8a      	subs	r2, r1, r2
 800da0c:	9205      	str	r2, [sp, #20]
 800da0e:	b303      	cbz	r3, 800da52 <_dtoa_r+0x6b2>
 800da10:	9a07      	ldr	r2, [sp, #28]
 800da12:	2a00      	cmp	r2, #0
 800da14:	f000 80a5 	beq.w	800db62 <_dtoa_r+0x7c2>
 800da18:	2c00      	cmp	r4, #0
 800da1a:	dd13      	ble.n	800da44 <_dtoa_r+0x6a4>
 800da1c:	4639      	mov	r1, r7
 800da1e:	4622      	mov	r2, r4
 800da20:	4630      	mov	r0, r6
 800da22:	930d      	str	r3, [sp, #52]	; 0x34
 800da24:	f000 fcde 	bl	800e3e4 <__pow5mult>
 800da28:	462a      	mov	r2, r5
 800da2a:	4601      	mov	r1, r0
 800da2c:	4607      	mov	r7, r0
 800da2e:	4630      	mov	r0, r6
 800da30:	f000 fc2e 	bl	800e290 <__multiply>
 800da34:	4629      	mov	r1, r5
 800da36:	9009      	str	r0, [sp, #36]	; 0x24
 800da38:	4630      	mov	r0, r6
 800da3a:	f000 fb5d 	bl	800e0f8 <_Bfree>
 800da3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da42:	4615      	mov	r5, r2
 800da44:	1b1a      	subs	r2, r3, r4
 800da46:	d004      	beq.n	800da52 <_dtoa_r+0x6b2>
 800da48:	4629      	mov	r1, r5
 800da4a:	4630      	mov	r0, r6
 800da4c:	f000 fcca 	bl	800e3e4 <__pow5mult>
 800da50:	4605      	mov	r5, r0
 800da52:	2101      	movs	r1, #1
 800da54:	4630      	mov	r0, r6
 800da56:	f000 fc05 	bl	800e264 <__i2b>
 800da5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	4604      	mov	r4, r0
 800da60:	f340 8081 	ble.w	800db66 <_dtoa_r+0x7c6>
 800da64:	461a      	mov	r2, r3
 800da66:	4601      	mov	r1, r0
 800da68:	4630      	mov	r0, r6
 800da6a:	f000 fcbb 	bl	800e3e4 <__pow5mult>
 800da6e:	9b06      	ldr	r3, [sp, #24]
 800da70:	2b01      	cmp	r3, #1
 800da72:	4604      	mov	r4, r0
 800da74:	dd7a      	ble.n	800db6c <_dtoa_r+0x7cc>
 800da76:	2300      	movs	r3, #0
 800da78:	9309      	str	r3, [sp, #36]	; 0x24
 800da7a:	6922      	ldr	r2, [r4, #16]
 800da7c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800da80:	6910      	ldr	r0, [r2, #16]
 800da82:	f000 fba1 	bl	800e1c8 <__hi0bits>
 800da86:	f1c0 0020 	rsb	r0, r0, #32
 800da8a:	9b05      	ldr	r3, [sp, #20]
 800da8c:	4418      	add	r0, r3
 800da8e:	f010 001f 	ands.w	r0, r0, #31
 800da92:	f000 8093 	beq.w	800dbbc <_dtoa_r+0x81c>
 800da96:	f1c0 0220 	rsb	r2, r0, #32
 800da9a:	2a04      	cmp	r2, #4
 800da9c:	f340 8085 	ble.w	800dbaa <_dtoa_r+0x80a>
 800daa0:	9b04      	ldr	r3, [sp, #16]
 800daa2:	f1c0 001c 	rsb	r0, r0, #28
 800daa6:	4403      	add	r3, r0
 800daa8:	9304      	str	r3, [sp, #16]
 800daaa:	9b05      	ldr	r3, [sp, #20]
 800daac:	4480      	add	r8, r0
 800daae:	4403      	add	r3, r0
 800dab0:	9305      	str	r3, [sp, #20]
 800dab2:	9b04      	ldr	r3, [sp, #16]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	dd05      	ble.n	800dac4 <_dtoa_r+0x724>
 800dab8:	4629      	mov	r1, r5
 800daba:	461a      	mov	r2, r3
 800dabc:	4630      	mov	r0, r6
 800dabe:	f000 fceb 	bl	800e498 <__lshift>
 800dac2:	4605      	mov	r5, r0
 800dac4:	9b05      	ldr	r3, [sp, #20]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	dd05      	ble.n	800dad6 <_dtoa_r+0x736>
 800daca:	4621      	mov	r1, r4
 800dacc:	461a      	mov	r2, r3
 800dace:	4630      	mov	r0, r6
 800dad0:	f000 fce2 	bl	800e498 <__lshift>
 800dad4:	4604      	mov	r4, r0
 800dad6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d071      	beq.n	800dbc0 <_dtoa_r+0x820>
 800dadc:	4621      	mov	r1, r4
 800dade:	4628      	mov	r0, r5
 800dae0:	f000 fd46 	bl	800e570 <__mcmp>
 800dae4:	2800      	cmp	r0, #0
 800dae6:	da6b      	bge.n	800dbc0 <_dtoa_r+0x820>
 800dae8:	2300      	movs	r3, #0
 800daea:	4629      	mov	r1, r5
 800daec:	220a      	movs	r2, #10
 800daee:	4630      	mov	r0, r6
 800daf0:	f000 fb24 	bl	800e13c <__multadd>
 800daf4:	9b07      	ldr	r3, [sp, #28]
 800daf6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dafa:	4605      	mov	r5, r0
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	f000 8197 	beq.w	800de30 <_dtoa_r+0xa90>
 800db02:	4639      	mov	r1, r7
 800db04:	2300      	movs	r3, #0
 800db06:	220a      	movs	r2, #10
 800db08:	4630      	mov	r0, r6
 800db0a:	f000 fb17 	bl	800e13c <__multadd>
 800db0e:	f1ba 0f00 	cmp.w	sl, #0
 800db12:	4607      	mov	r7, r0
 800db14:	f300 8093 	bgt.w	800dc3e <_dtoa_r+0x89e>
 800db18:	9b06      	ldr	r3, [sp, #24]
 800db1a:	2b02      	cmp	r3, #2
 800db1c:	dc57      	bgt.n	800dbce <_dtoa_r+0x82e>
 800db1e:	e08e      	b.n	800dc3e <_dtoa_r+0x89e>
 800db20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db22:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800db26:	e751      	b.n	800d9cc <_dtoa_r+0x62c>
 800db28:	f109 34ff 	add.w	r4, r9, #4294967295
 800db2c:	42a3      	cmp	r3, r4
 800db2e:	bfbf      	itttt	lt
 800db30:	1ae2      	sublt	r2, r4, r3
 800db32:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800db34:	189b      	addlt	r3, r3, r2
 800db36:	930a      	strlt	r3, [sp, #40]	; 0x28
 800db38:	bfae      	itee	ge
 800db3a:	1b1c      	subge	r4, r3, r4
 800db3c:	4623      	movlt	r3, r4
 800db3e:	2400      	movlt	r4, #0
 800db40:	f1b9 0f00 	cmp.w	r9, #0
 800db44:	bfb5      	itete	lt
 800db46:	9a04      	ldrlt	r2, [sp, #16]
 800db48:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800db4c:	eba2 0809 	sublt.w	r8, r2, r9
 800db50:	464a      	movge	r2, r9
 800db52:	bfb8      	it	lt
 800db54:	2200      	movlt	r2, #0
 800db56:	e73c      	b.n	800d9d2 <_dtoa_r+0x632>
 800db58:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800db5c:	9f07      	ldr	r7, [sp, #28]
 800db5e:	461c      	mov	r4, r3
 800db60:	e744      	b.n	800d9ec <_dtoa_r+0x64c>
 800db62:	461a      	mov	r2, r3
 800db64:	e770      	b.n	800da48 <_dtoa_r+0x6a8>
 800db66:	9b06      	ldr	r3, [sp, #24]
 800db68:	2b01      	cmp	r3, #1
 800db6a:	dc18      	bgt.n	800db9e <_dtoa_r+0x7fe>
 800db6c:	9b02      	ldr	r3, [sp, #8]
 800db6e:	b9b3      	cbnz	r3, 800db9e <_dtoa_r+0x7fe>
 800db70:	9b03      	ldr	r3, [sp, #12]
 800db72:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800db76:	b9a2      	cbnz	r2, 800dba2 <_dtoa_r+0x802>
 800db78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800db7c:	0d12      	lsrs	r2, r2, #20
 800db7e:	0512      	lsls	r2, r2, #20
 800db80:	b18a      	cbz	r2, 800dba6 <_dtoa_r+0x806>
 800db82:	9b04      	ldr	r3, [sp, #16]
 800db84:	3301      	adds	r3, #1
 800db86:	9304      	str	r3, [sp, #16]
 800db88:	9b05      	ldr	r3, [sp, #20]
 800db8a:	3301      	adds	r3, #1
 800db8c:	9305      	str	r3, [sp, #20]
 800db8e:	2301      	movs	r3, #1
 800db90:	9309      	str	r3, [sp, #36]	; 0x24
 800db92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db94:	2b00      	cmp	r3, #0
 800db96:	f47f af70 	bne.w	800da7a <_dtoa_r+0x6da>
 800db9a:	2001      	movs	r0, #1
 800db9c:	e775      	b.n	800da8a <_dtoa_r+0x6ea>
 800db9e:	2300      	movs	r3, #0
 800dba0:	e7f6      	b.n	800db90 <_dtoa_r+0x7f0>
 800dba2:	9b02      	ldr	r3, [sp, #8]
 800dba4:	e7f4      	b.n	800db90 <_dtoa_r+0x7f0>
 800dba6:	9209      	str	r2, [sp, #36]	; 0x24
 800dba8:	e7f3      	b.n	800db92 <_dtoa_r+0x7f2>
 800dbaa:	d082      	beq.n	800dab2 <_dtoa_r+0x712>
 800dbac:	9b04      	ldr	r3, [sp, #16]
 800dbae:	321c      	adds	r2, #28
 800dbb0:	4413      	add	r3, r2
 800dbb2:	9304      	str	r3, [sp, #16]
 800dbb4:	9b05      	ldr	r3, [sp, #20]
 800dbb6:	4490      	add	r8, r2
 800dbb8:	4413      	add	r3, r2
 800dbba:	e779      	b.n	800dab0 <_dtoa_r+0x710>
 800dbbc:	4602      	mov	r2, r0
 800dbbe:	e7f5      	b.n	800dbac <_dtoa_r+0x80c>
 800dbc0:	f1b9 0f00 	cmp.w	r9, #0
 800dbc4:	dc36      	bgt.n	800dc34 <_dtoa_r+0x894>
 800dbc6:	9b06      	ldr	r3, [sp, #24]
 800dbc8:	2b02      	cmp	r3, #2
 800dbca:	dd33      	ble.n	800dc34 <_dtoa_r+0x894>
 800dbcc:	46ca      	mov	sl, r9
 800dbce:	f1ba 0f00 	cmp.w	sl, #0
 800dbd2:	d10d      	bne.n	800dbf0 <_dtoa_r+0x850>
 800dbd4:	4621      	mov	r1, r4
 800dbd6:	4653      	mov	r3, sl
 800dbd8:	2205      	movs	r2, #5
 800dbda:	4630      	mov	r0, r6
 800dbdc:	f000 faae 	bl	800e13c <__multadd>
 800dbe0:	4601      	mov	r1, r0
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	4628      	mov	r0, r5
 800dbe6:	f000 fcc3 	bl	800e570 <__mcmp>
 800dbea:	2800      	cmp	r0, #0
 800dbec:	f73f ade4 	bgt.w	800d7b8 <_dtoa_r+0x418>
 800dbf0:	9b08      	ldr	r3, [sp, #32]
 800dbf2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dbf6:	ea6f 0b03 	mvn.w	fp, r3
 800dbfa:	f04f 0900 	mov.w	r9, #0
 800dbfe:	4621      	mov	r1, r4
 800dc00:	4630      	mov	r0, r6
 800dc02:	f000 fa79 	bl	800e0f8 <_Bfree>
 800dc06:	2f00      	cmp	r7, #0
 800dc08:	f43f aea1 	beq.w	800d94e <_dtoa_r+0x5ae>
 800dc0c:	f1b9 0f00 	cmp.w	r9, #0
 800dc10:	d005      	beq.n	800dc1e <_dtoa_r+0x87e>
 800dc12:	45b9      	cmp	r9, r7
 800dc14:	d003      	beq.n	800dc1e <_dtoa_r+0x87e>
 800dc16:	4649      	mov	r1, r9
 800dc18:	4630      	mov	r0, r6
 800dc1a:	f000 fa6d 	bl	800e0f8 <_Bfree>
 800dc1e:	4639      	mov	r1, r7
 800dc20:	4630      	mov	r0, r6
 800dc22:	f000 fa69 	bl	800e0f8 <_Bfree>
 800dc26:	e692      	b.n	800d94e <_dtoa_r+0x5ae>
 800dc28:	2400      	movs	r4, #0
 800dc2a:	4627      	mov	r7, r4
 800dc2c:	e7e0      	b.n	800dbf0 <_dtoa_r+0x850>
 800dc2e:	4693      	mov	fp, r2
 800dc30:	4627      	mov	r7, r4
 800dc32:	e5c1      	b.n	800d7b8 <_dtoa_r+0x418>
 800dc34:	9b07      	ldr	r3, [sp, #28]
 800dc36:	46ca      	mov	sl, r9
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	f000 8100 	beq.w	800de3e <_dtoa_r+0xa9e>
 800dc3e:	f1b8 0f00 	cmp.w	r8, #0
 800dc42:	dd05      	ble.n	800dc50 <_dtoa_r+0x8b0>
 800dc44:	4639      	mov	r1, r7
 800dc46:	4642      	mov	r2, r8
 800dc48:	4630      	mov	r0, r6
 800dc4a:	f000 fc25 	bl	800e498 <__lshift>
 800dc4e:	4607      	mov	r7, r0
 800dc50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d05d      	beq.n	800dd12 <_dtoa_r+0x972>
 800dc56:	6879      	ldr	r1, [r7, #4]
 800dc58:	4630      	mov	r0, r6
 800dc5a:	f000 fa0d 	bl	800e078 <_Balloc>
 800dc5e:	4680      	mov	r8, r0
 800dc60:	b928      	cbnz	r0, 800dc6e <_dtoa_r+0x8ce>
 800dc62:	4b82      	ldr	r3, [pc, #520]	; (800de6c <_dtoa_r+0xacc>)
 800dc64:	4602      	mov	r2, r0
 800dc66:	f240 21ef 	movw	r1, #751	; 0x2ef
 800dc6a:	f7ff bbb1 	b.w	800d3d0 <_dtoa_r+0x30>
 800dc6e:	693a      	ldr	r2, [r7, #16]
 800dc70:	3202      	adds	r2, #2
 800dc72:	0092      	lsls	r2, r2, #2
 800dc74:	f107 010c 	add.w	r1, r7, #12
 800dc78:	300c      	adds	r0, #12
 800dc7a:	f000 ff8f 	bl	800eb9c <memcpy>
 800dc7e:	2201      	movs	r2, #1
 800dc80:	4641      	mov	r1, r8
 800dc82:	4630      	mov	r0, r6
 800dc84:	f000 fc08 	bl	800e498 <__lshift>
 800dc88:	9b01      	ldr	r3, [sp, #4]
 800dc8a:	3301      	adds	r3, #1
 800dc8c:	9304      	str	r3, [sp, #16]
 800dc8e:	9b01      	ldr	r3, [sp, #4]
 800dc90:	4453      	add	r3, sl
 800dc92:	9308      	str	r3, [sp, #32]
 800dc94:	9b02      	ldr	r3, [sp, #8]
 800dc96:	f003 0301 	and.w	r3, r3, #1
 800dc9a:	46b9      	mov	r9, r7
 800dc9c:	9307      	str	r3, [sp, #28]
 800dc9e:	4607      	mov	r7, r0
 800dca0:	9b04      	ldr	r3, [sp, #16]
 800dca2:	4621      	mov	r1, r4
 800dca4:	3b01      	subs	r3, #1
 800dca6:	4628      	mov	r0, r5
 800dca8:	9302      	str	r3, [sp, #8]
 800dcaa:	f7ff faee 	bl	800d28a <quorem>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	3330      	adds	r3, #48	; 0x30
 800dcb2:	9005      	str	r0, [sp, #20]
 800dcb4:	4649      	mov	r1, r9
 800dcb6:	4628      	mov	r0, r5
 800dcb8:	9309      	str	r3, [sp, #36]	; 0x24
 800dcba:	f000 fc59 	bl	800e570 <__mcmp>
 800dcbe:	463a      	mov	r2, r7
 800dcc0:	4682      	mov	sl, r0
 800dcc2:	4621      	mov	r1, r4
 800dcc4:	4630      	mov	r0, r6
 800dcc6:	f000 fc6f 	bl	800e5a8 <__mdiff>
 800dcca:	68c2      	ldr	r2, [r0, #12]
 800dccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcce:	4680      	mov	r8, r0
 800dcd0:	bb0a      	cbnz	r2, 800dd16 <_dtoa_r+0x976>
 800dcd2:	4601      	mov	r1, r0
 800dcd4:	4628      	mov	r0, r5
 800dcd6:	f000 fc4b 	bl	800e570 <__mcmp>
 800dcda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcdc:	4602      	mov	r2, r0
 800dcde:	4641      	mov	r1, r8
 800dce0:	4630      	mov	r0, r6
 800dce2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800dce6:	f000 fa07 	bl	800e0f8 <_Bfree>
 800dcea:	9b06      	ldr	r3, [sp, #24]
 800dcec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dcee:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800dcf2:	ea43 0102 	orr.w	r1, r3, r2
 800dcf6:	9b07      	ldr	r3, [sp, #28]
 800dcf8:	4319      	orrs	r1, r3
 800dcfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcfc:	d10d      	bne.n	800dd1a <_dtoa_r+0x97a>
 800dcfe:	2b39      	cmp	r3, #57	; 0x39
 800dd00:	d029      	beq.n	800dd56 <_dtoa_r+0x9b6>
 800dd02:	f1ba 0f00 	cmp.w	sl, #0
 800dd06:	dd01      	ble.n	800dd0c <_dtoa_r+0x96c>
 800dd08:	9b05      	ldr	r3, [sp, #20]
 800dd0a:	3331      	adds	r3, #49	; 0x31
 800dd0c:	9a02      	ldr	r2, [sp, #8]
 800dd0e:	7013      	strb	r3, [r2, #0]
 800dd10:	e775      	b.n	800dbfe <_dtoa_r+0x85e>
 800dd12:	4638      	mov	r0, r7
 800dd14:	e7b8      	b.n	800dc88 <_dtoa_r+0x8e8>
 800dd16:	2201      	movs	r2, #1
 800dd18:	e7e1      	b.n	800dcde <_dtoa_r+0x93e>
 800dd1a:	f1ba 0f00 	cmp.w	sl, #0
 800dd1e:	db06      	blt.n	800dd2e <_dtoa_r+0x98e>
 800dd20:	9906      	ldr	r1, [sp, #24]
 800dd22:	ea41 0a0a 	orr.w	sl, r1, sl
 800dd26:	9907      	ldr	r1, [sp, #28]
 800dd28:	ea5a 0a01 	orrs.w	sl, sl, r1
 800dd2c:	d120      	bne.n	800dd70 <_dtoa_r+0x9d0>
 800dd2e:	2a00      	cmp	r2, #0
 800dd30:	ddec      	ble.n	800dd0c <_dtoa_r+0x96c>
 800dd32:	4629      	mov	r1, r5
 800dd34:	2201      	movs	r2, #1
 800dd36:	4630      	mov	r0, r6
 800dd38:	9304      	str	r3, [sp, #16]
 800dd3a:	f000 fbad 	bl	800e498 <__lshift>
 800dd3e:	4621      	mov	r1, r4
 800dd40:	4605      	mov	r5, r0
 800dd42:	f000 fc15 	bl	800e570 <__mcmp>
 800dd46:	2800      	cmp	r0, #0
 800dd48:	9b04      	ldr	r3, [sp, #16]
 800dd4a:	dc02      	bgt.n	800dd52 <_dtoa_r+0x9b2>
 800dd4c:	d1de      	bne.n	800dd0c <_dtoa_r+0x96c>
 800dd4e:	07da      	lsls	r2, r3, #31
 800dd50:	d5dc      	bpl.n	800dd0c <_dtoa_r+0x96c>
 800dd52:	2b39      	cmp	r3, #57	; 0x39
 800dd54:	d1d8      	bne.n	800dd08 <_dtoa_r+0x968>
 800dd56:	9a02      	ldr	r2, [sp, #8]
 800dd58:	2339      	movs	r3, #57	; 0x39
 800dd5a:	7013      	strb	r3, [r2, #0]
 800dd5c:	4643      	mov	r3, r8
 800dd5e:	4698      	mov	r8, r3
 800dd60:	3b01      	subs	r3, #1
 800dd62:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800dd66:	2a39      	cmp	r2, #57	; 0x39
 800dd68:	d051      	beq.n	800de0e <_dtoa_r+0xa6e>
 800dd6a:	3201      	adds	r2, #1
 800dd6c:	701a      	strb	r2, [r3, #0]
 800dd6e:	e746      	b.n	800dbfe <_dtoa_r+0x85e>
 800dd70:	2a00      	cmp	r2, #0
 800dd72:	dd03      	ble.n	800dd7c <_dtoa_r+0x9dc>
 800dd74:	2b39      	cmp	r3, #57	; 0x39
 800dd76:	d0ee      	beq.n	800dd56 <_dtoa_r+0x9b6>
 800dd78:	3301      	adds	r3, #1
 800dd7a:	e7c7      	b.n	800dd0c <_dtoa_r+0x96c>
 800dd7c:	9a04      	ldr	r2, [sp, #16]
 800dd7e:	9908      	ldr	r1, [sp, #32]
 800dd80:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dd84:	428a      	cmp	r2, r1
 800dd86:	d02b      	beq.n	800dde0 <_dtoa_r+0xa40>
 800dd88:	4629      	mov	r1, r5
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	220a      	movs	r2, #10
 800dd8e:	4630      	mov	r0, r6
 800dd90:	f000 f9d4 	bl	800e13c <__multadd>
 800dd94:	45b9      	cmp	r9, r7
 800dd96:	4605      	mov	r5, r0
 800dd98:	f04f 0300 	mov.w	r3, #0
 800dd9c:	f04f 020a 	mov.w	r2, #10
 800dda0:	4649      	mov	r1, r9
 800dda2:	4630      	mov	r0, r6
 800dda4:	d107      	bne.n	800ddb6 <_dtoa_r+0xa16>
 800dda6:	f000 f9c9 	bl	800e13c <__multadd>
 800ddaa:	4681      	mov	r9, r0
 800ddac:	4607      	mov	r7, r0
 800ddae:	9b04      	ldr	r3, [sp, #16]
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	9304      	str	r3, [sp, #16]
 800ddb4:	e774      	b.n	800dca0 <_dtoa_r+0x900>
 800ddb6:	f000 f9c1 	bl	800e13c <__multadd>
 800ddba:	4639      	mov	r1, r7
 800ddbc:	4681      	mov	r9, r0
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	220a      	movs	r2, #10
 800ddc2:	4630      	mov	r0, r6
 800ddc4:	f000 f9ba 	bl	800e13c <__multadd>
 800ddc8:	4607      	mov	r7, r0
 800ddca:	e7f0      	b.n	800ddae <_dtoa_r+0xa0e>
 800ddcc:	f1ba 0f00 	cmp.w	sl, #0
 800ddd0:	9a01      	ldr	r2, [sp, #4]
 800ddd2:	bfcc      	ite	gt
 800ddd4:	46d0      	movgt	r8, sl
 800ddd6:	f04f 0801 	movle.w	r8, #1
 800ddda:	4490      	add	r8, r2
 800dddc:	f04f 0900 	mov.w	r9, #0
 800dde0:	4629      	mov	r1, r5
 800dde2:	2201      	movs	r2, #1
 800dde4:	4630      	mov	r0, r6
 800dde6:	9302      	str	r3, [sp, #8]
 800dde8:	f000 fb56 	bl	800e498 <__lshift>
 800ddec:	4621      	mov	r1, r4
 800ddee:	4605      	mov	r5, r0
 800ddf0:	f000 fbbe 	bl	800e570 <__mcmp>
 800ddf4:	2800      	cmp	r0, #0
 800ddf6:	dcb1      	bgt.n	800dd5c <_dtoa_r+0x9bc>
 800ddf8:	d102      	bne.n	800de00 <_dtoa_r+0xa60>
 800ddfa:	9b02      	ldr	r3, [sp, #8]
 800ddfc:	07db      	lsls	r3, r3, #31
 800ddfe:	d4ad      	bmi.n	800dd5c <_dtoa_r+0x9bc>
 800de00:	4643      	mov	r3, r8
 800de02:	4698      	mov	r8, r3
 800de04:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de08:	2a30      	cmp	r2, #48	; 0x30
 800de0a:	d0fa      	beq.n	800de02 <_dtoa_r+0xa62>
 800de0c:	e6f7      	b.n	800dbfe <_dtoa_r+0x85e>
 800de0e:	9a01      	ldr	r2, [sp, #4]
 800de10:	429a      	cmp	r2, r3
 800de12:	d1a4      	bne.n	800dd5e <_dtoa_r+0x9be>
 800de14:	f10b 0b01 	add.w	fp, fp, #1
 800de18:	2331      	movs	r3, #49	; 0x31
 800de1a:	e778      	b.n	800dd0e <_dtoa_r+0x96e>
 800de1c:	4b14      	ldr	r3, [pc, #80]	; (800de70 <_dtoa_r+0xad0>)
 800de1e:	f7ff bb2a 	b.w	800d476 <_dtoa_r+0xd6>
 800de22:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800de24:	2b00      	cmp	r3, #0
 800de26:	f47f ab05 	bne.w	800d434 <_dtoa_r+0x94>
 800de2a:	4b12      	ldr	r3, [pc, #72]	; (800de74 <_dtoa_r+0xad4>)
 800de2c:	f7ff bb23 	b.w	800d476 <_dtoa_r+0xd6>
 800de30:	f1ba 0f00 	cmp.w	sl, #0
 800de34:	dc03      	bgt.n	800de3e <_dtoa_r+0xa9e>
 800de36:	9b06      	ldr	r3, [sp, #24]
 800de38:	2b02      	cmp	r3, #2
 800de3a:	f73f aec8 	bgt.w	800dbce <_dtoa_r+0x82e>
 800de3e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800de42:	4621      	mov	r1, r4
 800de44:	4628      	mov	r0, r5
 800de46:	f7ff fa20 	bl	800d28a <quorem>
 800de4a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800de4e:	f808 3b01 	strb.w	r3, [r8], #1
 800de52:	9a01      	ldr	r2, [sp, #4]
 800de54:	eba8 0202 	sub.w	r2, r8, r2
 800de58:	4592      	cmp	sl, r2
 800de5a:	ddb7      	ble.n	800ddcc <_dtoa_r+0xa2c>
 800de5c:	4629      	mov	r1, r5
 800de5e:	2300      	movs	r3, #0
 800de60:	220a      	movs	r2, #10
 800de62:	4630      	mov	r0, r6
 800de64:	f000 f96a 	bl	800e13c <__multadd>
 800de68:	4605      	mov	r5, r0
 800de6a:	e7ea      	b.n	800de42 <_dtoa_r+0xaa2>
 800de6c:	0800f36c 	.word	0x0800f36c
 800de70:	0800f2cc 	.word	0x0800f2cc
 800de74:	0800f2f0 	.word	0x0800f2f0

0800de78 <_free_r>:
 800de78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de7a:	2900      	cmp	r1, #0
 800de7c:	d044      	beq.n	800df08 <_free_r+0x90>
 800de7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de82:	9001      	str	r0, [sp, #4]
 800de84:	2b00      	cmp	r3, #0
 800de86:	f1a1 0404 	sub.w	r4, r1, #4
 800de8a:	bfb8      	it	lt
 800de8c:	18e4      	addlt	r4, r4, r3
 800de8e:	f000 f8e7 	bl	800e060 <__malloc_lock>
 800de92:	4a1e      	ldr	r2, [pc, #120]	; (800df0c <_free_r+0x94>)
 800de94:	9801      	ldr	r0, [sp, #4]
 800de96:	6813      	ldr	r3, [r2, #0]
 800de98:	b933      	cbnz	r3, 800dea8 <_free_r+0x30>
 800de9a:	6063      	str	r3, [r4, #4]
 800de9c:	6014      	str	r4, [r2, #0]
 800de9e:	b003      	add	sp, #12
 800dea0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dea4:	f000 b8e2 	b.w	800e06c <__malloc_unlock>
 800dea8:	42a3      	cmp	r3, r4
 800deaa:	d908      	bls.n	800debe <_free_r+0x46>
 800deac:	6825      	ldr	r5, [r4, #0]
 800deae:	1961      	adds	r1, r4, r5
 800deb0:	428b      	cmp	r3, r1
 800deb2:	bf01      	itttt	eq
 800deb4:	6819      	ldreq	r1, [r3, #0]
 800deb6:	685b      	ldreq	r3, [r3, #4]
 800deb8:	1949      	addeq	r1, r1, r5
 800deba:	6021      	streq	r1, [r4, #0]
 800debc:	e7ed      	b.n	800de9a <_free_r+0x22>
 800debe:	461a      	mov	r2, r3
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	b10b      	cbz	r3, 800dec8 <_free_r+0x50>
 800dec4:	42a3      	cmp	r3, r4
 800dec6:	d9fa      	bls.n	800debe <_free_r+0x46>
 800dec8:	6811      	ldr	r1, [r2, #0]
 800deca:	1855      	adds	r5, r2, r1
 800decc:	42a5      	cmp	r5, r4
 800dece:	d10b      	bne.n	800dee8 <_free_r+0x70>
 800ded0:	6824      	ldr	r4, [r4, #0]
 800ded2:	4421      	add	r1, r4
 800ded4:	1854      	adds	r4, r2, r1
 800ded6:	42a3      	cmp	r3, r4
 800ded8:	6011      	str	r1, [r2, #0]
 800deda:	d1e0      	bne.n	800de9e <_free_r+0x26>
 800dedc:	681c      	ldr	r4, [r3, #0]
 800dede:	685b      	ldr	r3, [r3, #4]
 800dee0:	6053      	str	r3, [r2, #4]
 800dee2:	440c      	add	r4, r1
 800dee4:	6014      	str	r4, [r2, #0]
 800dee6:	e7da      	b.n	800de9e <_free_r+0x26>
 800dee8:	d902      	bls.n	800def0 <_free_r+0x78>
 800deea:	230c      	movs	r3, #12
 800deec:	6003      	str	r3, [r0, #0]
 800deee:	e7d6      	b.n	800de9e <_free_r+0x26>
 800def0:	6825      	ldr	r5, [r4, #0]
 800def2:	1961      	adds	r1, r4, r5
 800def4:	428b      	cmp	r3, r1
 800def6:	bf04      	itt	eq
 800def8:	6819      	ldreq	r1, [r3, #0]
 800defa:	685b      	ldreq	r3, [r3, #4]
 800defc:	6063      	str	r3, [r4, #4]
 800defe:	bf04      	itt	eq
 800df00:	1949      	addeq	r1, r1, r5
 800df02:	6021      	streq	r1, [r4, #0]
 800df04:	6054      	str	r4, [r2, #4]
 800df06:	e7ca      	b.n	800de9e <_free_r+0x26>
 800df08:	b003      	add	sp, #12
 800df0a:	bd30      	pop	{r4, r5, pc}
 800df0c:	24000bf0 	.word	0x24000bf0

0800df10 <malloc>:
 800df10:	4b02      	ldr	r3, [pc, #8]	; (800df1c <malloc+0xc>)
 800df12:	4601      	mov	r1, r0
 800df14:	6818      	ldr	r0, [r3, #0]
 800df16:	f000 b823 	b.w	800df60 <_malloc_r>
 800df1a:	bf00      	nop
 800df1c:	24000068 	.word	0x24000068

0800df20 <sbrk_aligned>:
 800df20:	b570      	push	{r4, r5, r6, lr}
 800df22:	4e0e      	ldr	r6, [pc, #56]	; (800df5c <sbrk_aligned+0x3c>)
 800df24:	460c      	mov	r4, r1
 800df26:	6831      	ldr	r1, [r6, #0]
 800df28:	4605      	mov	r5, r0
 800df2a:	b911      	cbnz	r1, 800df32 <sbrk_aligned+0x12>
 800df2c:	f000 fe26 	bl	800eb7c <_sbrk_r>
 800df30:	6030      	str	r0, [r6, #0]
 800df32:	4621      	mov	r1, r4
 800df34:	4628      	mov	r0, r5
 800df36:	f000 fe21 	bl	800eb7c <_sbrk_r>
 800df3a:	1c43      	adds	r3, r0, #1
 800df3c:	d00a      	beq.n	800df54 <sbrk_aligned+0x34>
 800df3e:	1cc4      	adds	r4, r0, #3
 800df40:	f024 0403 	bic.w	r4, r4, #3
 800df44:	42a0      	cmp	r0, r4
 800df46:	d007      	beq.n	800df58 <sbrk_aligned+0x38>
 800df48:	1a21      	subs	r1, r4, r0
 800df4a:	4628      	mov	r0, r5
 800df4c:	f000 fe16 	bl	800eb7c <_sbrk_r>
 800df50:	3001      	adds	r0, #1
 800df52:	d101      	bne.n	800df58 <sbrk_aligned+0x38>
 800df54:	f04f 34ff 	mov.w	r4, #4294967295
 800df58:	4620      	mov	r0, r4
 800df5a:	bd70      	pop	{r4, r5, r6, pc}
 800df5c:	24000bf4 	.word	0x24000bf4

0800df60 <_malloc_r>:
 800df60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df64:	1ccd      	adds	r5, r1, #3
 800df66:	f025 0503 	bic.w	r5, r5, #3
 800df6a:	3508      	adds	r5, #8
 800df6c:	2d0c      	cmp	r5, #12
 800df6e:	bf38      	it	cc
 800df70:	250c      	movcc	r5, #12
 800df72:	2d00      	cmp	r5, #0
 800df74:	4607      	mov	r7, r0
 800df76:	db01      	blt.n	800df7c <_malloc_r+0x1c>
 800df78:	42a9      	cmp	r1, r5
 800df7a:	d905      	bls.n	800df88 <_malloc_r+0x28>
 800df7c:	230c      	movs	r3, #12
 800df7e:	603b      	str	r3, [r7, #0]
 800df80:	2600      	movs	r6, #0
 800df82:	4630      	mov	r0, r6
 800df84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e05c <_malloc_r+0xfc>
 800df8c:	f000 f868 	bl	800e060 <__malloc_lock>
 800df90:	f8d8 3000 	ldr.w	r3, [r8]
 800df94:	461c      	mov	r4, r3
 800df96:	bb5c      	cbnz	r4, 800dff0 <_malloc_r+0x90>
 800df98:	4629      	mov	r1, r5
 800df9a:	4638      	mov	r0, r7
 800df9c:	f7ff ffc0 	bl	800df20 <sbrk_aligned>
 800dfa0:	1c43      	adds	r3, r0, #1
 800dfa2:	4604      	mov	r4, r0
 800dfa4:	d155      	bne.n	800e052 <_malloc_r+0xf2>
 800dfa6:	f8d8 4000 	ldr.w	r4, [r8]
 800dfaa:	4626      	mov	r6, r4
 800dfac:	2e00      	cmp	r6, #0
 800dfae:	d145      	bne.n	800e03c <_malloc_r+0xdc>
 800dfb0:	2c00      	cmp	r4, #0
 800dfb2:	d048      	beq.n	800e046 <_malloc_r+0xe6>
 800dfb4:	6823      	ldr	r3, [r4, #0]
 800dfb6:	4631      	mov	r1, r6
 800dfb8:	4638      	mov	r0, r7
 800dfba:	eb04 0903 	add.w	r9, r4, r3
 800dfbe:	f000 fddd 	bl	800eb7c <_sbrk_r>
 800dfc2:	4581      	cmp	r9, r0
 800dfc4:	d13f      	bne.n	800e046 <_malloc_r+0xe6>
 800dfc6:	6821      	ldr	r1, [r4, #0]
 800dfc8:	1a6d      	subs	r5, r5, r1
 800dfca:	4629      	mov	r1, r5
 800dfcc:	4638      	mov	r0, r7
 800dfce:	f7ff ffa7 	bl	800df20 <sbrk_aligned>
 800dfd2:	3001      	adds	r0, #1
 800dfd4:	d037      	beq.n	800e046 <_malloc_r+0xe6>
 800dfd6:	6823      	ldr	r3, [r4, #0]
 800dfd8:	442b      	add	r3, r5
 800dfda:	6023      	str	r3, [r4, #0]
 800dfdc:	f8d8 3000 	ldr.w	r3, [r8]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d038      	beq.n	800e056 <_malloc_r+0xf6>
 800dfe4:	685a      	ldr	r2, [r3, #4]
 800dfe6:	42a2      	cmp	r2, r4
 800dfe8:	d12b      	bne.n	800e042 <_malloc_r+0xe2>
 800dfea:	2200      	movs	r2, #0
 800dfec:	605a      	str	r2, [r3, #4]
 800dfee:	e00f      	b.n	800e010 <_malloc_r+0xb0>
 800dff0:	6822      	ldr	r2, [r4, #0]
 800dff2:	1b52      	subs	r2, r2, r5
 800dff4:	d41f      	bmi.n	800e036 <_malloc_r+0xd6>
 800dff6:	2a0b      	cmp	r2, #11
 800dff8:	d917      	bls.n	800e02a <_malloc_r+0xca>
 800dffa:	1961      	adds	r1, r4, r5
 800dffc:	42a3      	cmp	r3, r4
 800dffe:	6025      	str	r5, [r4, #0]
 800e000:	bf18      	it	ne
 800e002:	6059      	strne	r1, [r3, #4]
 800e004:	6863      	ldr	r3, [r4, #4]
 800e006:	bf08      	it	eq
 800e008:	f8c8 1000 	streq.w	r1, [r8]
 800e00c:	5162      	str	r2, [r4, r5]
 800e00e:	604b      	str	r3, [r1, #4]
 800e010:	4638      	mov	r0, r7
 800e012:	f104 060b 	add.w	r6, r4, #11
 800e016:	f000 f829 	bl	800e06c <__malloc_unlock>
 800e01a:	f026 0607 	bic.w	r6, r6, #7
 800e01e:	1d23      	adds	r3, r4, #4
 800e020:	1af2      	subs	r2, r6, r3
 800e022:	d0ae      	beq.n	800df82 <_malloc_r+0x22>
 800e024:	1b9b      	subs	r3, r3, r6
 800e026:	50a3      	str	r3, [r4, r2]
 800e028:	e7ab      	b.n	800df82 <_malloc_r+0x22>
 800e02a:	42a3      	cmp	r3, r4
 800e02c:	6862      	ldr	r2, [r4, #4]
 800e02e:	d1dd      	bne.n	800dfec <_malloc_r+0x8c>
 800e030:	f8c8 2000 	str.w	r2, [r8]
 800e034:	e7ec      	b.n	800e010 <_malloc_r+0xb0>
 800e036:	4623      	mov	r3, r4
 800e038:	6864      	ldr	r4, [r4, #4]
 800e03a:	e7ac      	b.n	800df96 <_malloc_r+0x36>
 800e03c:	4634      	mov	r4, r6
 800e03e:	6876      	ldr	r6, [r6, #4]
 800e040:	e7b4      	b.n	800dfac <_malloc_r+0x4c>
 800e042:	4613      	mov	r3, r2
 800e044:	e7cc      	b.n	800dfe0 <_malloc_r+0x80>
 800e046:	230c      	movs	r3, #12
 800e048:	603b      	str	r3, [r7, #0]
 800e04a:	4638      	mov	r0, r7
 800e04c:	f000 f80e 	bl	800e06c <__malloc_unlock>
 800e050:	e797      	b.n	800df82 <_malloc_r+0x22>
 800e052:	6025      	str	r5, [r4, #0]
 800e054:	e7dc      	b.n	800e010 <_malloc_r+0xb0>
 800e056:	605b      	str	r3, [r3, #4]
 800e058:	deff      	udf	#255	; 0xff
 800e05a:	bf00      	nop
 800e05c:	24000bf0 	.word	0x24000bf0

0800e060 <__malloc_lock>:
 800e060:	4801      	ldr	r0, [pc, #4]	; (800e068 <__malloc_lock+0x8>)
 800e062:	f7ff b910 	b.w	800d286 <__retarget_lock_acquire_recursive>
 800e066:	bf00      	nop
 800e068:	24000bec 	.word	0x24000bec

0800e06c <__malloc_unlock>:
 800e06c:	4801      	ldr	r0, [pc, #4]	; (800e074 <__malloc_unlock+0x8>)
 800e06e:	f7ff b90b 	b.w	800d288 <__retarget_lock_release_recursive>
 800e072:	bf00      	nop
 800e074:	24000bec 	.word	0x24000bec

0800e078 <_Balloc>:
 800e078:	b570      	push	{r4, r5, r6, lr}
 800e07a:	69c6      	ldr	r6, [r0, #28]
 800e07c:	4604      	mov	r4, r0
 800e07e:	460d      	mov	r5, r1
 800e080:	b976      	cbnz	r6, 800e0a0 <_Balloc+0x28>
 800e082:	2010      	movs	r0, #16
 800e084:	f7ff ff44 	bl	800df10 <malloc>
 800e088:	4602      	mov	r2, r0
 800e08a:	61e0      	str	r0, [r4, #28]
 800e08c:	b920      	cbnz	r0, 800e098 <_Balloc+0x20>
 800e08e:	4b18      	ldr	r3, [pc, #96]	; (800e0f0 <_Balloc+0x78>)
 800e090:	4818      	ldr	r0, [pc, #96]	; (800e0f4 <_Balloc+0x7c>)
 800e092:	216b      	movs	r1, #107	; 0x6b
 800e094:	f000 fd90 	bl	800ebb8 <__assert_func>
 800e098:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e09c:	6006      	str	r6, [r0, #0]
 800e09e:	60c6      	str	r6, [r0, #12]
 800e0a0:	69e6      	ldr	r6, [r4, #28]
 800e0a2:	68f3      	ldr	r3, [r6, #12]
 800e0a4:	b183      	cbz	r3, 800e0c8 <_Balloc+0x50>
 800e0a6:	69e3      	ldr	r3, [r4, #28]
 800e0a8:	68db      	ldr	r3, [r3, #12]
 800e0aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e0ae:	b9b8      	cbnz	r0, 800e0e0 <_Balloc+0x68>
 800e0b0:	2101      	movs	r1, #1
 800e0b2:	fa01 f605 	lsl.w	r6, r1, r5
 800e0b6:	1d72      	adds	r2, r6, #5
 800e0b8:	0092      	lsls	r2, r2, #2
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	f000 fd9a 	bl	800ebf4 <_calloc_r>
 800e0c0:	b160      	cbz	r0, 800e0dc <_Balloc+0x64>
 800e0c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e0c6:	e00e      	b.n	800e0e6 <_Balloc+0x6e>
 800e0c8:	2221      	movs	r2, #33	; 0x21
 800e0ca:	2104      	movs	r1, #4
 800e0cc:	4620      	mov	r0, r4
 800e0ce:	f000 fd91 	bl	800ebf4 <_calloc_r>
 800e0d2:	69e3      	ldr	r3, [r4, #28]
 800e0d4:	60f0      	str	r0, [r6, #12]
 800e0d6:	68db      	ldr	r3, [r3, #12]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d1e4      	bne.n	800e0a6 <_Balloc+0x2e>
 800e0dc:	2000      	movs	r0, #0
 800e0de:	bd70      	pop	{r4, r5, r6, pc}
 800e0e0:	6802      	ldr	r2, [r0, #0]
 800e0e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e0ec:	e7f7      	b.n	800e0de <_Balloc+0x66>
 800e0ee:	bf00      	nop
 800e0f0:	0800f2fd 	.word	0x0800f2fd
 800e0f4:	0800f37d 	.word	0x0800f37d

0800e0f8 <_Bfree>:
 800e0f8:	b570      	push	{r4, r5, r6, lr}
 800e0fa:	69c6      	ldr	r6, [r0, #28]
 800e0fc:	4605      	mov	r5, r0
 800e0fe:	460c      	mov	r4, r1
 800e100:	b976      	cbnz	r6, 800e120 <_Bfree+0x28>
 800e102:	2010      	movs	r0, #16
 800e104:	f7ff ff04 	bl	800df10 <malloc>
 800e108:	4602      	mov	r2, r0
 800e10a:	61e8      	str	r0, [r5, #28]
 800e10c:	b920      	cbnz	r0, 800e118 <_Bfree+0x20>
 800e10e:	4b09      	ldr	r3, [pc, #36]	; (800e134 <_Bfree+0x3c>)
 800e110:	4809      	ldr	r0, [pc, #36]	; (800e138 <_Bfree+0x40>)
 800e112:	218f      	movs	r1, #143	; 0x8f
 800e114:	f000 fd50 	bl	800ebb8 <__assert_func>
 800e118:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e11c:	6006      	str	r6, [r0, #0]
 800e11e:	60c6      	str	r6, [r0, #12]
 800e120:	b13c      	cbz	r4, 800e132 <_Bfree+0x3a>
 800e122:	69eb      	ldr	r3, [r5, #28]
 800e124:	6862      	ldr	r2, [r4, #4]
 800e126:	68db      	ldr	r3, [r3, #12]
 800e128:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e12c:	6021      	str	r1, [r4, #0]
 800e12e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e132:	bd70      	pop	{r4, r5, r6, pc}
 800e134:	0800f2fd 	.word	0x0800f2fd
 800e138:	0800f37d 	.word	0x0800f37d

0800e13c <__multadd>:
 800e13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e140:	690d      	ldr	r5, [r1, #16]
 800e142:	4607      	mov	r7, r0
 800e144:	460c      	mov	r4, r1
 800e146:	461e      	mov	r6, r3
 800e148:	f101 0c14 	add.w	ip, r1, #20
 800e14c:	2000      	movs	r0, #0
 800e14e:	f8dc 3000 	ldr.w	r3, [ip]
 800e152:	b299      	uxth	r1, r3
 800e154:	fb02 6101 	mla	r1, r2, r1, r6
 800e158:	0c1e      	lsrs	r6, r3, #16
 800e15a:	0c0b      	lsrs	r3, r1, #16
 800e15c:	fb02 3306 	mla	r3, r2, r6, r3
 800e160:	b289      	uxth	r1, r1
 800e162:	3001      	adds	r0, #1
 800e164:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e168:	4285      	cmp	r5, r0
 800e16a:	f84c 1b04 	str.w	r1, [ip], #4
 800e16e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e172:	dcec      	bgt.n	800e14e <__multadd+0x12>
 800e174:	b30e      	cbz	r6, 800e1ba <__multadd+0x7e>
 800e176:	68a3      	ldr	r3, [r4, #8]
 800e178:	42ab      	cmp	r3, r5
 800e17a:	dc19      	bgt.n	800e1b0 <__multadd+0x74>
 800e17c:	6861      	ldr	r1, [r4, #4]
 800e17e:	4638      	mov	r0, r7
 800e180:	3101      	adds	r1, #1
 800e182:	f7ff ff79 	bl	800e078 <_Balloc>
 800e186:	4680      	mov	r8, r0
 800e188:	b928      	cbnz	r0, 800e196 <__multadd+0x5a>
 800e18a:	4602      	mov	r2, r0
 800e18c:	4b0c      	ldr	r3, [pc, #48]	; (800e1c0 <__multadd+0x84>)
 800e18e:	480d      	ldr	r0, [pc, #52]	; (800e1c4 <__multadd+0x88>)
 800e190:	21ba      	movs	r1, #186	; 0xba
 800e192:	f000 fd11 	bl	800ebb8 <__assert_func>
 800e196:	6922      	ldr	r2, [r4, #16]
 800e198:	3202      	adds	r2, #2
 800e19a:	f104 010c 	add.w	r1, r4, #12
 800e19e:	0092      	lsls	r2, r2, #2
 800e1a0:	300c      	adds	r0, #12
 800e1a2:	f000 fcfb 	bl	800eb9c <memcpy>
 800e1a6:	4621      	mov	r1, r4
 800e1a8:	4638      	mov	r0, r7
 800e1aa:	f7ff ffa5 	bl	800e0f8 <_Bfree>
 800e1ae:	4644      	mov	r4, r8
 800e1b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e1b4:	3501      	adds	r5, #1
 800e1b6:	615e      	str	r6, [r3, #20]
 800e1b8:	6125      	str	r5, [r4, #16]
 800e1ba:	4620      	mov	r0, r4
 800e1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1c0:	0800f36c 	.word	0x0800f36c
 800e1c4:	0800f37d 	.word	0x0800f37d

0800e1c8 <__hi0bits>:
 800e1c8:	0c03      	lsrs	r3, r0, #16
 800e1ca:	041b      	lsls	r3, r3, #16
 800e1cc:	b9d3      	cbnz	r3, 800e204 <__hi0bits+0x3c>
 800e1ce:	0400      	lsls	r0, r0, #16
 800e1d0:	2310      	movs	r3, #16
 800e1d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e1d6:	bf04      	itt	eq
 800e1d8:	0200      	lsleq	r0, r0, #8
 800e1da:	3308      	addeq	r3, #8
 800e1dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e1e0:	bf04      	itt	eq
 800e1e2:	0100      	lsleq	r0, r0, #4
 800e1e4:	3304      	addeq	r3, #4
 800e1e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e1ea:	bf04      	itt	eq
 800e1ec:	0080      	lsleq	r0, r0, #2
 800e1ee:	3302      	addeq	r3, #2
 800e1f0:	2800      	cmp	r0, #0
 800e1f2:	db05      	blt.n	800e200 <__hi0bits+0x38>
 800e1f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e1f8:	f103 0301 	add.w	r3, r3, #1
 800e1fc:	bf08      	it	eq
 800e1fe:	2320      	moveq	r3, #32
 800e200:	4618      	mov	r0, r3
 800e202:	4770      	bx	lr
 800e204:	2300      	movs	r3, #0
 800e206:	e7e4      	b.n	800e1d2 <__hi0bits+0xa>

0800e208 <__lo0bits>:
 800e208:	6803      	ldr	r3, [r0, #0]
 800e20a:	f013 0207 	ands.w	r2, r3, #7
 800e20e:	d00c      	beq.n	800e22a <__lo0bits+0x22>
 800e210:	07d9      	lsls	r1, r3, #31
 800e212:	d422      	bmi.n	800e25a <__lo0bits+0x52>
 800e214:	079a      	lsls	r2, r3, #30
 800e216:	bf49      	itett	mi
 800e218:	085b      	lsrmi	r3, r3, #1
 800e21a:	089b      	lsrpl	r3, r3, #2
 800e21c:	6003      	strmi	r3, [r0, #0]
 800e21e:	2201      	movmi	r2, #1
 800e220:	bf5c      	itt	pl
 800e222:	6003      	strpl	r3, [r0, #0]
 800e224:	2202      	movpl	r2, #2
 800e226:	4610      	mov	r0, r2
 800e228:	4770      	bx	lr
 800e22a:	b299      	uxth	r1, r3
 800e22c:	b909      	cbnz	r1, 800e232 <__lo0bits+0x2a>
 800e22e:	0c1b      	lsrs	r3, r3, #16
 800e230:	2210      	movs	r2, #16
 800e232:	b2d9      	uxtb	r1, r3
 800e234:	b909      	cbnz	r1, 800e23a <__lo0bits+0x32>
 800e236:	3208      	adds	r2, #8
 800e238:	0a1b      	lsrs	r3, r3, #8
 800e23a:	0719      	lsls	r1, r3, #28
 800e23c:	bf04      	itt	eq
 800e23e:	091b      	lsreq	r3, r3, #4
 800e240:	3204      	addeq	r2, #4
 800e242:	0799      	lsls	r1, r3, #30
 800e244:	bf04      	itt	eq
 800e246:	089b      	lsreq	r3, r3, #2
 800e248:	3202      	addeq	r2, #2
 800e24a:	07d9      	lsls	r1, r3, #31
 800e24c:	d403      	bmi.n	800e256 <__lo0bits+0x4e>
 800e24e:	085b      	lsrs	r3, r3, #1
 800e250:	f102 0201 	add.w	r2, r2, #1
 800e254:	d003      	beq.n	800e25e <__lo0bits+0x56>
 800e256:	6003      	str	r3, [r0, #0]
 800e258:	e7e5      	b.n	800e226 <__lo0bits+0x1e>
 800e25a:	2200      	movs	r2, #0
 800e25c:	e7e3      	b.n	800e226 <__lo0bits+0x1e>
 800e25e:	2220      	movs	r2, #32
 800e260:	e7e1      	b.n	800e226 <__lo0bits+0x1e>
	...

0800e264 <__i2b>:
 800e264:	b510      	push	{r4, lr}
 800e266:	460c      	mov	r4, r1
 800e268:	2101      	movs	r1, #1
 800e26a:	f7ff ff05 	bl	800e078 <_Balloc>
 800e26e:	4602      	mov	r2, r0
 800e270:	b928      	cbnz	r0, 800e27e <__i2b+0x1a>
 800e272:	4b05      	ldr	r3, [pc, #20]	; (800e288 <__i2b+0x24>)
 800e274:	4805      	ldr	r0, [pc, #20]	; (800e28c <__i2b+0x28>)
 800e276:	f240 1145 	movw	r1, #325	; 0x145
 800e27a:	f000 fc9d 	bl	800ebb8 <__assert_func>
 800e27e:	2301      	movs	r3, #1
 800e280:	6144      	str	r4, [r0, #20]
 800e282:	6103      	str	r3, [r0, #16]
 800e284:	bd10      	pop	{r4, pc}
 800e286:	bf00      	nop
 800e288:	0800f36c 	.word	0x0800f36c
 800e28c:	0800f37d 	.word	0x0800f37d

0800e290 <__multiply>:
 800e290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e294:	4691      	mov	r9, r2
 800e296:	690a      	ldr	r2, [r1, #16]
 800e298:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	bfb8      	it	lt
 800e2a0:	460b      	movlt	r3, r1
 800e2a2:	460c      	mov	r4, r1
 800e2a4:	bfbc      	itt	lt
 800e2a6:	464c      	movlt	r4, r9
 800e2a8:	4699      	movlt	r9, r3
 800e2aa:	6927      	ldr	r7, [r4, #16]
 800e2ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e2b0:	68a3      	ldr	r3, [r4, #8]
 800e2b2:	6861      	ldr	r1, [r4, #4]
 800e2b4:	eb07 060a 	add.w	r6, r7, sl
 800e2b8:	42b3      	cmp	r3, r6
 800e2ba:	b085      	sub	sp, #20
 800e2bc:	bfb8      	it	lt
 800e2be:	3101      	addlt	r1, #1
 800e2c0:	f7ff feda 	bl	800e078 <_Balloc>
 800e2c4:	b930      	cbnz	r0, 800e2d4 <__multiply+0x44>
 800e2c6:	4602      	mov	r2, r0
 800e2c8:	4b44      	ldr	r3, [pc, #272]	; (800e3dc <__multiply+0x14c>)
 800e2ca:	4845      	ldr	r0, [pc, #276]	; (800e3e0 <__multiply+0x150>)
 800e2cc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e2d0:	f000 fc72 	bl	800ebb8 <__assert_func>
 800e2d4:	f100 0514 	add.w	r5, r0, #20
 800e2d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e2dc:	462b      	mov	r3, r5
 800e2de:	2200      	movs	r2, #0
 800e2e0:	4543      	cmp	r3, r8
 800e2e2:	d321      	bcc.n	800e328 <__multiply+0x98>
 800e2e4:	f104 0314 	add.w	r3, r4, #20
 800e2e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e2ec:	f109 0314 	add.w	r3, r9, #20
 800e2f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e2f4:	9202      	str	r2, [sp, #8]
 800e2f6:	1b3a      	subs	r2, r7, r4
 800e2f8:	3a15      	subs	r2, #21
 800e2fa:	f022 0203 	bic.w	r2, r2, #3
 800e2fe:	3204      	adds	r2, #4
 800e300:	f104 0115 	add.w	r1, r4, #21
 800e304:	428f      	cmp	r7, r1
 800e306:	bf38      	it	cc
 800e308:	2204      	movcc	r2, #4
 800e30a:	9201      	str	r2, [sp, #4]
 800e30c:	9a02      	ldr	r2, [sp, #8]
 800e30e:	9303      	str	r3, [sp, #12]
 800e310:	429a      	cmp	r2, r3
 800e312:	d80c      	bhi.n	800e32e <__multiply+0x9e>
 800e314:	2e00      	cmp	r6, #0
 800e316:	dd03      	ble.n	800e320 <__multiply+0x90>
 800e318:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d05b      	beq.n	800e3d8 <__multiply+0x148>
 800e320:	6106      	str	r6, [r0, #16]
 800e322:	b005      	add	sp, #20
 800e324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e328:	f843 2b04 	str.w	r2, [r3], #4
 800e32c:	e7d8      	b.n	800e2e0 <__multiply+0x50>
 800e32e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e332:	f1ba 0f00 	cmp.w	sl, #0
 800e336:	d024      	beq.n	800e382 <__multiply+0xf2>
 800e338:	f104 0e14 	add.w	lr, r4, #20
 800e33c:	46a9      	mov	r9, r5
 800e33e:	f04f 0c00 	mov.w	ip, #0
 800e342:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e346:	f8d9 1000 	ldr.w	r1, [r9]
 800e34a:	fa1f fb82 	uxth.w	fp, r2
 800e34e:	b289      	uxth	r1, r1
 800e350:	fb0a 110b 	mla	r1, sl, fp, r1
 800e354:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e358:	f8d9 2000 	ldr.w	r2, [r9]
 800e35c:	4461      	add	r1, ip
 800e35e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e362:	fb0a c20b 	mla	r2, sl, fp, ip
 800e366:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e36a:	b289      	uxth	r1, r1
 800e36c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e370:	4577      	cmp	r7, lr
 800e372:	f849 1b04 	str.w	r1, [r9], #4
 800e376:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e37a:	d8e2      	bhi.n	800e342 <__multiply+0xb2>
 800e37c:	9a01      	ldr	r2, [sp, #4]
 800e37e:	f845 c002 	str.w	ip, [r5, r2]
 800e382:	9a03      	ldr	r2, [sp, #12]
 800e384:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e388:	3304      	adds	r3, #4
 800e38a:	f1b9 0f00 	cmp.w	r9, #0
 800e38e:	d021      	beq.n	800e3d4 <__multiply+0x144>
 800e390:	6829      	ldr	r1, [r5, #0]
 800e392:	f104 0c14 	add.w	ip, r4, #20
 800e396:	46ae      	mov	lr, r5
 800e398:	f04f 0a00 	mov.w	sl, #0
 800e39c:	f8bc b000 	ldrh.w	fp, [ip]
 800e3a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e3a4:	fb09 220b 	mla	r2, r9, fp, r2
 800e3a8:	4452      	add	r2, sl
 800e3aa:	b289      	uxth	r1, r1
 800e3ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e3b0:	f84e 1b04 	str.w	r1, [lr], #4
 800e3b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e3b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e3bc:	f8be 1000 	ldrh.w	r1, [lr]
 800e3c0:	fb09 110a 	mla	r1, r9, sl, r1
 800e3c4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e3c8:	4567      	cmp	r7, ip
 800e3ca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e3ce:	d8e5      	bhi.n	800e39c <__multiply+0x10c>
 800e3d0:	9a01      	ldr	r2, [sp, #4]
 800e3d2:	50a9      	str	r1, [r5, r2]
 800e3d4:	3504      	adds	r5, #4
 800e3d6:	e799      	b.n	800e30c <__multiply+0x7c>
 800e3d8:	3e01      	subs	r6, #1
 800e3da:	e79b      	b.n	800e314 <__multiply+0x84>
 800e3dc:	0800f36c 	.word	0x0800f36c
 800e3e0:	0800f37d 	.word	0x0800f37d

0800e3e4 <__pow5mult>:
 800e3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3e8:	4615      	mov	r5, r2
 800e3ea:	f012 0203 	ands.w	r2, r2, #3
 800e3ee:	4606      	mov	r6, r0
 800e3f0:	460f      	mov	r7, r1
 800e3f2:	d007      	beq.n	800e404 <__pow5mult+0x20>
 800e3f4:	4c25      	ldr	r4, [pc, #148]	; (800e48c <__pow5mult+0xa8>)
 800e3f6:	3a01      	subs	r2, #1
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e3fe:	f7ff fe9d 	bl	800e13c <__multadd>
 800e402:	4607      	mov	r7, r0
 800e404:	10ad      	asrs	r5, r5, #2
 800e406:	d03d      	beq.n	800e484 <__pow5mult+0xa0>
 800e408:	69f4      	ldr	r4, [r6, #28]
 800e40a:	b97c      	cbnz	r4, 800e42c <__pow5mult+0x48>
 800e40c:	2010      	movs	r0, #16
 800e40e:	f7ff fd7f 	bl	800df10 <malloc>
 800e412:	4602      	mov	r2, r0
 800e414:	61f0      	str	r0, [r6, #28]
 800e416:	b928      	cbnz	r0, 800e424 <__pow5mult+0x40>
 800e418:	4b1d      	ldr	r3, [pc, #116]	; (800e490 <__pow5mult+0xac>)
 800e41a:	481e      	ldr	r0, [pc, #120]	; (800e494 <__pow5mult+0xb0>)
 800e41c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e420:	f000 fbca 	bl	800ebb8 <__assert_func>
 800e424:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e428:	6004      	str	r4, [r0, #0]
 800e42a:	60c4      	str	r4, [r0, #12]
 800e42c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e430:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e434:	b94c      	cbnz	r4, 800e44a <__pow5mult+0x66>
 800e436:	f240 2171 	movw	r1, #625	; 0x271
 800e43a:	4630      	mov	r0, r6
 800e43c:	f7ff ff12 	bl	800e264 <__i2b>
 800e440:	2300      	movs	r3, #0
 800e442:	f8c8 0008 	str.w	r0, [r8, #8]
 800e446:	4604      	mov	r4, r0
 800e448:	6003      	str	r3, [r0, #0]
 800e44a:	f04f 0900 	mov.w	r9, #0
 800e44e:	07eb      	lsls	r3, r5, #31
 800e450:	d50a      	bpl.n	800e468 <__pow5mult+0x84>
 800e452:	4639      	mov	r1, r7
 800e454:	4622      	mov	r2, r4
 800e456:	4630      	mov	r0, r6
 800e458:	f7ff ff1a 	bl	800e290 <__multiply>
 800e45c:	4639      	mov	r1, r7
 800e45e:	4680      	mov	r8, r0
 800e460:	4630      	mov	r0, r6
 800e462:	f7ff fe49 	bl	800e0f8 <_Bfree>
 800e466:	4647      	mov	r7, r8
 800e468:	106d      	asrs	r5, r5, #1
 800e46a:	d00b      	beq.n	800e484 <__pow5mult+0xa0>
 800e46c:	6820      	ldr	r0, [r4, #0]
 800e46e:	b938      	cbnz	r0, 800e480 <__pow5mult+0x9c>
 800e470:	4622      	mov	r2, r4
 800e472:	4621      	mov	r1, r4
 800e474:	4630      	mov	r0, r6
 800e476:	f7ff ff0b 	bl	800e290 <__multiply>
 800e47a:	6020      	str	r0, [r4, #0]
 800e47c:	f8c0 9000 	str.w	r9, [r0]
 800e480:	4604      	mov	r4, r0
 800e482:	e7e4      	b.n	800e44e <__pow5mult+0x6a>
 800e484:	4638      	mov	r0, r7
 800e486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e48a:	bf00      	nop
 800e48c:	0800f4c8 	.word	0x0800f4c8
 800e490:	0800f2fd 	.word	0x0800f2fd
 800e494:	0800f37d 	.word	0x0800f37d

0800e498 <__lshift>:
 800e498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e49c:	460c      	mov	r4, r1
 800e49e:	6849      	ldr	r1, [r1, #4]
 800e4a0:	6923      	ldr	r3, [r4, #16]
 800e4a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e4a6:	68a3      	ldr	r3, [r4, #8]
 800e4a8:	4607      	mov	r7, r0
 800e4aa:	4691      	mov	r9, r2
 800e4ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e4b0:	f108 0601 	add.w	r6, r8, #1
 800e4b4:	42b3      	cmp	r3, r6
 800e4b6:	db0b      	blt.n	800e4d0 <__lshift+0x38>
 800e4b8:	4638      	mov	r0, r7
 800e4ba:	f7ff fddd 	bl	800e078 <_Balloc>
 800e4be:	4605      	mov	r5, r0
 800e4c0:	b948      	cbnz	r0, 800e4d6 <__lshift+0x3e>
 800e4c2:	4602      	mov	r2, r0
 800e4c4:	4b28      	ldr	r3, [pc, #160]	; (800e568 <__lshift+0xd0>)
 800e4c6:	4829      	ldr	r0, [pc, #164]	; (800e56c <__lshift+0xd4>)
 800e4c8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e4cc:	f000 fb74 	bl	800ebb8 <__assert_func>
 800e4d0:	3101      	adds	r1, #1
 800e4d2:	005b      	lsls	r3, r3, #1
 800e4d4:	e7ee      	b.n	800e4b4 <__lshift+0x1c>
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	f100 0114 	add.w	r1, r0, #20
 800e4dc:	f100 0210 	add.w	r2, r0, #16
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	4553      	cmp	r3, sl
 800e4e4:	db33      	blt.n	800e54e <__lshift+0xb6>
 800e4e6:	6920      	ldr	r0, [r4, #16]
 800e4e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e4ec:	f104 0314 	add.w	r3, r4, #20
 800e4f0:	f019 091f 	ands.w	r9, r9, #31
 800e4f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e4f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e4fc:	d02b      	beq.n	800e556 <__lshift+0xbe>
 800e4fe:	f1c9 0e20 	rsb	lr, r9, #32
 800e502:	468a      	mov	sl, r1
 800e504:	2200      	movs	r2, #0
 800e506:	6818      	ldr	r0, [r3, #0]
 800e508:	fa00 f009 	lsl.w	r0, r0, r9
 800e50c:	4310      	orrs	r0, r2
 800e50e:	f84a 0b04 	str.w	r0, [sl], #4
 800e512:	f853 2b04 	ldr.w	r2, [r3], #4
 800e516:	459c      	cmp	ip, r3
 800e518:	fa22 f20e 	lsr.w	r2, r2, lr
 800e51c:	d8f3      	bhi.n	800e506 <__lshift+0x6e>
 800e51e:	ebac 0304 	sub.w	r3, ip, r4
 800e522:	3b15      	subs	r3, #21
 800e524:	f023 0303 	bic.w	r3, r3, #3
 800e528:	3304      	adds	r3, #4
 800e52a:	f104 0015 	add.w	r0, r4, #21
 800e52e:	4584      	cmp	ip, r0
 800e530:	bf38      	it	cc
 800e532:	2304      	movcc	r3, #4
 800e534:	50ca      	str	r2, [r1, r3]
 800e536:	b10a      	cbz	r2, 800e53c <__lshift+0xa4>
 800e538:	f108 0602 	add.w	r6, r8, #2
 800e53c:	3e01      	subs	r6, #1
 800e53e:	4638      	mov	r0, r7
 800e540:	612e      	str	r6, [r5, #16]
 800e542:	4621      	mov	r1, r4
 800e544:	f7ff fdd8 	bl	800e0f8 <_Bfree>
 800e548:	4628      	mov	r0, r5
 800e54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e54e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e552:	3301      	adds	r3, #1
 800e554:	e7c5      	b.n	800e4e2 <__lshift+0x4a>
 800e556:	3904      	subs	r1, #4
 800e558:	f853 2b04 	ldr.w	r2, [r3], #4
 800e55c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e560:	459c      	cmp	ip, r3
 800e562:	d8f9      	bhi.n	800e558 <__lshift+0xc0>
 800e564:	e7ea      	b.n	800e53c <__lshift+0xa4>
 800e566:	bf00      	nop
 800e568:	0800f36c 	.word	0x0800f36c
 800e56c:	0800f37d 	.word	0x0800f37d

0800e570 <__mcmp>:
 800e570:	b530      	push	{r4, r5, lr}
 800e572:	6902      	ldr	r2, [r0, #16]
 800e574:	690c      	ldr	r4, [r1, #16]
 800e576:	1b12      	subs	r2, r2, r4
 800e578:	d10e      	bne.n	800e598 <__mcmp+0x28>
 800e57a:	f100 0314 	add.w	r3, r0, #20
 800e57e:	3114      	adds	r1, #20
 800e580:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e584:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e588:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e58c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e590:	42a5      	cmp	r5, r4
 800e592:	d003      	beq.n	800e59c <__mcmp+0x2c>
 800e594:	d305      	bcc.n	800e5a2 <__mcmp+0x32>
 800e596:	2201      	movs	r2, #1
 800e598:	4610      	mov	r0, r2
 800e59a:	bd30      	pop	{r4, r5, pc}
 800e59c:	4283      	cmp	r3, r0
 800e59e:	d3f3      	bcc.n	800e588 <__mcmp+0x18>
 800e5a0:	e7fa      	b.n	800e598 <__mcmp+0x28>
 800e5a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e5a6:	e7f7      	b.n	800e598 <__mcmp+0x28>

0800e5a8 <__mdiff>:
 800e5a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ac:	460c      	mov	r4, r1
 800e5ae:	4606      	mov	r6, r0
 800e5b0:	4611      	mov	r1, r2
 800e5b2:	4620      	mov	r0, r4
 800e5b4:	4690      	mov	r8, r2
 800e5b6:	f7ff ffdb 	bl	800e570 <__mcmp>
 800e5ba:	1e05      	subs	r5, r0, #0
 800e5bc:	d110      	bne.n	800e5e0 <__mdiff+0x38>
 800e5be:	4629      	mov	r1, r5
 800e5c0:	4630      	mov	r0, r6
 800e5c2:	f7ff fd59 	bl	800e078 <_Balloc>
 800e5c6:	b930      	cbnz	r0, 800e5d6 <__mdiff+0x2e>
 800e5c8:	4b3a      	ldr	r3, [pc, #232]	; (800e6b4 <__mdiff+0x10c>)
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	f240 2137 	movw	r1, #567	; 0x237
 800e5d0:	4839      	ldr	r0, [pc, #228]	; (800e6b8 <__mdiff+0x110>)
 800e5d2:	f000 faf1 	bl	800ebb8 <__assert_func>
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e5dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5e0:	bfa4      	itt	ge
 800e5e2:	4643      	movge	r3, r8
 800e5e4:	46a0      	movge	r8, r4
 800e5e6:	4630      	mov	r0, r6
 800e5e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e5ec:	bfa6      	itte	ge
 800e5ee:	461c      	movge	r4, r3
 800e5f0:	2500      	movge	r5, #0
 800e5f2:	2501      	movlt	r5, #1
 800e5f4:	f7ff fd40 	bl	800e078 <_Balloc>
 800e5f8:	b920      	cbnz	r0, 800e604 <__mdiff+0x5c>
 800e5fa:	4b2e      	ldr	r3, [pc, #184]	; (800e6b4 <__mdiff+0x10c>)
 800e5fc:	4602      	mov	r2, r0
 800e5fe:	f240 2145 	movw	r1, #581	; 0x245
 800e602:	e7e5      	b.n	800e5d0 <__mdiff+0x28>
 800e604:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e608:	6926      	ldr	r6, [r4, #16]
 800e60a:	60c5      	str	r5, [r0, #12]
 800e60c:	f104 0914 	add.w	r9, r4, #20
 800e610:	f108 0514 	add.w	r5, r8, #20
 800e614:	f100 0e14 	add.w	lr, r0, #20
 800e618:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e61c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e620:	f108 0210 	add.w	r2, r8, #16
 800e624:	46f2      	mov	sl, lr
 800e626:	2100      	movs	r1, #0
 800e628:	f859 3b04 	ldr.w	r3, [r9], #4
 800e62c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e630:	fa11 f88b 	uxtah	r8, r1, fp
 800e634:	b299      	uxth	r1, r3
 800e636:	0c1b      	lsrs	r3, r3, #16
 800e638:	eba8 0801 	sub.w	r8, r8, r1
 800e63c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e640:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e644:	fa1f f888 	uxth.w	r8, r8
 800e648:	1419      	asrs	r1, r3, #16
 800e64a:	454e      	cmp	r6, r9
 800e64c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e650:	f84a 3b04 	str.w	r3, [sl], #4
 800e654:	d8e8      	bhi.n	800e628 <__mdiff+0x80>
 800e656:	1b33      	subs	r3, r6, r4
 800e658:	3b15      	subs	r3, #21
 800e65a:	f023 0303 	bic.w	r3, r3, #3
 800e65e:	3304      	adds	r3, #4
 800e660:	3415      	adds	r4, #21
 800e662:	42a6      	cmp	r6, r4
 800e664:	bf38      	it	cc
 800e666:	2304      	movcc	r3, #4
 800e668:	441d      	add	r5, r3
 800e66a:	4473      	add	r3, lr
 800e66c:	469e      	mov	lr, r3
 800e66e:	462e      	mov	r6, r5
 800e670:	4566      	cmp	r6, ip
 800e672:	d30e      	bcc.n	800e692 <__mdiff+0xea>
 800e674:	f10c 0203 	add.w	r2, ip, #3
 800e678:	1b52      	subs	r2, r2, r5
 800e67a:	f022 0203 	bic.w	r2, r2, #3
 800e67e:	3d03      	subs	r5, #3
 800e680:	45ac      	cmp	ip, r5
 800e682:	bf38      	it	cc
 800e684:	2200      	movcc	r2, #0
 800e686:	4413      	add	r3, r2
 800e688:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e68c:	b17a      	cbz	r2, 800e6ae <__mdiff+0x106>
 800e68e:	6107      	str	r7, [r0, #16]
 800e690:	e7a4      	b.n	800e5dc <__mdiff+0x34>
 800e692:	f856 8b04 	ldr.w	r8, [r6], #4
 800e696:	fa11 f288 	uxtah	r2, r1, r8
 800e69a:	1414      	asrs	r4, r2, #16
 800e69c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e6a0:	b292      	uxth	r2, r2
 800e6a2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e6a6:	f84e 2b04 	str.w	r2, [lr], #4
 800e6aa:	1421      	asrs	r1, r4, #16
 800e6ac:	e7e0      	b.n	800e670 <__mdiff+0xc8>
 800e6ae:	3f01      	subs	r7, #1
 800e6b0:	e7ea      	b.n	800e688 <__mdiff+0xe0>
 800e6b2:	bf00      	nop
 800e6b4:	0800f36c 	.word	0x0800f36c
 800e6b8:	0800f37d 	.word	0x0800f37d

0800e6bc <__d2b>:
 800e6bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e6c0:	460f      	mov	r7, r1
 800e6c2:	2101      	movs	r1, #1
 800e6c4:	ec59 8b10 	vmov	r8, r9, d0
 800e6c8:	4616      	mov	r6, r2
 800e6ca:	f7ff fcd5 	bl	800e078 <_Balloc>
 800e6ce:	4604      	mov	r4, r0
 800e6d0:	b930      	cbnz	r0, 800e6e0 <__d2b+0x24>
 800e6d2:	4602      	mov	r2, r0
 800e6d4:	4b24      	ldr	r3, [pc, #144]	; (800e768 <__d2b+0xac>)
 800e6d6:	4825      	ldr	r0, [pc, #148]	; (800e76c <__d2b+0xb0>)
 800e6d8:	f240 310f 	movw	r1, #783	; 0x30f
 800e6dc:	f000 fa6c 	bl	800ebb8 <__assert_func>
 800e6e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e6e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e6e8:	bb2d      	cbnz	r5, 800e736 <__d2b+0x7a>
 800e6ea:	9301      	str	r3, [sp, #4]
 800e6ec:	f1b8 0300 	subs.w	r3, r8, #0
 800e6f0:	d026      	beq.n	800e740 <__d2b+0x84>
 800e6f2:	4668      	mov	r0, sp
 800e6f4:	9300      	str	r3, [sp, #0]
 800e6f6:	f7ff fd87 	bl	800e208 <__lo0bits>
 800e6fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e6fe:	b1e8      	cbz	r0, 800e73c <__d2b+0x80>
 800e700:	f1c0 0320 	rsb	r3, r0, #32
 800e704:	fa02 f303 	lsl.w	r3, r2, r3
 800e708:	430b      	orrs	r3, r1
 800e70a:	40c2      	lsrs	r2, r0
 800e70c:	6163      	str	r3, [r4, #20]
 800e70e:	9201      	str	r2, [sp, #4]
 800e710:	9b01      	ldr	r3, [sp, #4]
 800e712:	61a3      	str	r3, [r4, #24]
 800e714:	2b00      	cmp	r3, #0
 800e716:	bf14      	ite	ne
 800e718:	2202      	movne	r2, #2
 800e71a:	2201      	moveq	r2, #1
 800e71c:	6122      	str	r2, [r4, #16]
 800e71e:	b1bd      	cbz	r5, 800e750 <__d2b+0x94>
 800e720:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e724:	4405      	add	r5, r0
 800e726:	603d      	str	r5, [r7, #0]
 800e728:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e72c:	6030      	str	r0, [r6, #0]
 800e72e:	4620      	mov	r0, r4
 800e730:	b003      	add	sp, #12
 800e732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e736:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e73a:	e7d6      	b.n	800e6ea <__d2b+0x2e>
 800e73c:	6161      	str	r1, [r4, #20]
 800e73e:	e7e7      	b.n	800e710 <__d2b+0x54>
 800e740:	a801      	add	r0, sp, #4
 800e742:	f7ff fd61 	bl	800e208 <__lo0bits>
 800e746:	9b01      	ldr	r3, [sp, #4]
 800e748:	6163      	str	r3, [r4, #20]
 800e74a:	3020      	adds	r0, #32
 800e74c:	2201      	movs	r2, #1
 800e74e:	e7e5      	b.n	800e71c <__d2b+0x60>
 800e750:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e754:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e758:	6038      	str	r0, [r7, #0]
 800e75a:	6918      	ldr	r0, [r3, #16]
 800e75c:	f7ff fd34 	bl	800e1c8 <__hi0bits>
 800e760:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e764:	e7e2      	b.n	800e72c <__d2b+0x70>
 800e766:	bf00      	nop
 800e768:	0800f36c 	.word	0x0800f36c
 800e76c:	0800f37d 	.word	0x0800f37d

0800e770 <__ssputs_r>:
 800e770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e774:	688e      	ldr	r6, [r1, #8]
 800e776:	461f      	mov	r7, r3
 800e778:	42be      	cmp	r6, r7
 800e77a:	680b      	ldr	r3, [r1, #0]
 800e77c:	4682      	mov	sl, r0
 800e77e:	460c      	mov	r4, r1
 800e780:	4690      	mov	r8, r2
 800e782:	d82c      	bhi.n	800e7de <__ssputs_r+0x6e>
 800e784:	898a      	ldrh	r2, [r1, #12]
 800e786:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e78a:	d026      	beq.n	800e7da <__ssputs_r+0x6a>
 800e78c:	6965      	ldr	r5, [r4, #20]
 800e78e:	6909      	ldr	r1, [r1, #16]
 800e790:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e794:	eba3 0901 	sub.w	r9, r3, r1
 800e798:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e79c:	1c7b      	adds	r3, r7, #1
 800e79e:	444b      	add	r3, r9
 800e7a0:	106d      	asrs	r5, r5, #1
 800e7a2:	429d      	cmp	r5, r3
 800e7a4:	bf38      	it	cc
 800e7a6:	461d      	movcc	r5, r3
 800e7a8:	0553      	lsls	r3, r2, #21
 800e7aa:	d527      	bpl.n	800e7fc <__ssputs_r+0x8c>
 800e7ac:	4629      	mov	r1, r5
 800e7ae:	f7ff fbd7 	bl	800df60 <_malloc_r>
 800e7b2:	4606      	mov	r6, r0
 800e7b4:	b360      	cbz	r0, 800e810 <__ssputs_r+0xa0>
 800e7b6:	6921      	ldr	r1, [r4, #16]
 800e7b8:	464a      	mov	r2, r9
 800e7ba:	f000 f9ef 	bl	800eb9c <memcpy>
 800e7be:	89a3      	ldrh	r3, [r4, #12]
 800e7c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e7c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7c8:	81a3      	strh	r3, [r4, #12]
 800e7ca:	6126      	str	r6, [r4, #16]
 800e7cc:	6165      	str	r5, [r4, #20]
 800e7ce:	444e      	add	r6, r9
 800e7d0:	eba5 0509 	sub.w	r5, r5, r9
 800e7d4:	6026      	str	r6, [r4, #0]
 800e7d6:	60a5      	str	r5, [r4, #8]
 800e7d8:	463e      	mov	r6, r7
 800e7da:	42be      	cmp	r6, r7
 800e7dc:	d900      	bls.n	800e7e0 <__ssputs_r+0x70>
 800e7de:	463e      	mov	r6, r7
 800e7e0:	6820      	ldr	r0, [r4, #0]
 800e7e2:	4632      	mov	r2, r6
 800e7e4:	4641      	mov	r1, r8
 800e7e6:	f7fe fcb6 	bl	800d156 <memmove>
 800e7ea:	68a3      	ldr	r3, [r4, #8]
 800e7ec:	1b9b      	subs	r3, r3, r6
 800e7ee:	60a3      	str	r3, [r4, #8]
 800e7f0:	6823      	ldr	r3, [r4, #0]
 800e7f2:	4433      	add	r3, r6
 800e7f4:	6023      	str	r3, [r4, #0]
 800e7f6:	2000      	movs	r0, #0
 800e7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7fc:	462a      	mov	r2, r5
 800e7fe:	f000 fa21 	bl	800ec44 <_realloc_r>
 800e802:	4606      	mov	r6, r0
 800e804:	2800      	cmp	r0, #0
 800e806:	d1e0      	bne.n	800e7ca <__ssputs_r+0x5a>
 800e808:	6921      	ldr	r1, [r4, #16]
 800e80a:	4650      	mov	r0, sl
 800e80c:	f7ff fb34 	bl	800de78 <_free_r>
 800e810:	230c      	movs	r3, #12
 800e812:	f8ca 3000 	str.w	r3, [sl]
 800e816:	89a3      	ldrh	r3, [r4, #12]
 800e818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e81c:	81a3      	strh	r3, [r4, #12]
 800e81e:	f04f 30ff 	mov.w	r0, #4294967295
 800e822:	e7e9      	b.n	800e7f8 <__ssputs_r+0x88>

0800e824 <_svfiprintf_r>:
 800e824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e828:	4698      	mov	r8, r3
 800e82a:	898b      	ldrh	r3, [r1, #12]
 800e82c:	061b      	lsls	r3, r3, #24
 800e82e:	b09d      	sub	sp, #116	; 0x74
 800e830:	4607      	mov	r7, r0
 800e832:	460d      	mov	r5, r1
 800e834:	4614      	mov	r4, r2
 800e836:	d50e      	bpl.n	800e856 <_svfiprintf_r+0x32>
 800e838:	690b      	ldr	r3, [r1, #16]
 800e83a:	b963      	cbnz	r3, 800e856 <_svfiprintf_r+0x32>
 800e83c:	2140      	movs	r1, #64	; 0x40
 800e83e:	f7ff fb8f 	bl	800df60 <_malloc_r>
 800e842:	6028      	str	r0, [r5, #0]
 800e844:	6128      	str	r0, [r5, #16]
 800e846:	b920      	cbnz	r0, 800e852 <_svfiprintf_r+0x2e>
 800e848:	230c      	movs	r3, #12
 800e84a:	603b      	str	r3, [r7, #0]
 800e84c:	f04f 30ff 	mov.w	r0, #4294967295
 800e850:	e0d0      	b.n	800e9f4 <_svfiprintf_r+0x1d0>
 800e852:	2340      	movs	r3, #64	; 0x40
 800e854:	616b      	str	r3, [r5, #20]
 800e856:	2300      	movs	r3, #0
 800e858:	9309      	str	r3, [sp, #36]	; 0x24
 800e85a:	2320      	movs	r3, #32
 800e85c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e860:	f8cd 800c 	str.w	r8, [sp, #12]
 800e864:	2330      	movs	r3, #48	; 0x30
 800e866:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ea0c <_svfiprintf_r+0x1e8>
 800e86a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e86e:	f04f 0901 	mov.w	r9, #1
 800e872:	4623      	mov	r3, r4
 800e874:	469a      	mov	sl, r3
 800e876:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e87a:	b10a      	cbz	r2, 800e880 <_svfiprintf_r+0x5c>
 800e87c:	2a25      	cmp	r2, #37	; 0x25
 800e87e:	d1f9      	bne.n	800e874 <_svfiprintf_r+0x50>
 800e880:	ebba 0b04 	subs.w	fp, sl, r4
 800e884:	d00b      	beq.n	800e89e <_svfiprintf_r+0x7a>
 800e886:	465b      	mov	r3, fp
 800e888:	4622      	mov	r2, r4
 800e88a:	4629      	mov	r1, r5
 800e88c:	4638      	mov	r0, r7
 800e88e:	f7ff ff6f 	bl	800e770 <__ssputs_r>
 800e892:	3001      	adds	r0, #1
 800e894:	f000 80a9 	beq.w	800e9ea <_svfiprintf_r+0x1c6>
 800e898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e89a:	445a      	add	r2, fp
 800e89c:	9209      	str	r2, [sp, #36]	; 0x24
 800e89e:	f89a 3000 	ldrb.w	r3, [sl]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	f000 80a1 	beq.w	800e9ea <_svfiprintf_r+0x1c6>
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8b2:	f10a 0a01 	add.w	sl, sl, #1
 800e8b6:	9304      	str	r3, [sp, #16]
 800e8b8:	9307      	str	r3, [sp, #28]
 800e8ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e8be:	931a      	str	r3, [sp, #104]	; 0x68
 800e8c0:	4654      	mov	r4, sl
 800e8c2:	2205      	movs	r2, #5
 800e8c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8c8:	4850      	ldr	r0, [pc, #320]	; (800ea0c <_svfiprintf_r+0x1e8>)
 800e8ca:	f7f1 fd09 	bl	80002e0 <memchr>
 800e8ce:	9a04      	ldr	r2, [sp, #16]
 800e8d0:	b9d8      	cbnz	r0, 800e90a <_svfiprintf_r+0xe6>
 800e8d2:	06d0      	lsls	r0, r2, #27
 800e8d4:	bf44      	itt	mi
 800e8d6:	2320      	movmi	r3, #32
 800e8d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8dc:	0711      	lsls	r1, r2, #28
 800e8de:	bf44      	itt	mi
 800e8e0:	232b      	movmi	r3, #43	; 0x2b
 800e8e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8e6:	f89a 3000 	ldrb.w	r3, [sl]
 800e8ea:	2b2a      	cmp	r3, #42	; 0x2a
 800e8ec:	d015      	beq.n	800e91a <_svfiprintf_r+0xf6>
 800e8ee:	9a07      	ldr	r2, [sp, #28]
 800e8f0:	4654      	mov	r4, sl
 800e8f2:	2000      	movs	r0, #0
 800e8f4:	f04f 0c0a 	mov.w	ip, #10
 800e8f8:	4621      	mov	r1, r4
 800e8fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8fe:	3b30      	subs	r3, #48	; 0x30
 800e900:	2b09      	cmp	r3, #9
 800e902:	d94d      	bls.n	800e9a0 <_svfiprintf_r+0x17c>
 800e904:	b1b0      	cbz	r0, 800e934 <_svfiprintf_r+0x110>
 800e906:	9207      	str	r2, [sp, #28]
 800e908:	e014      	b.n	800e934 <_svfiprintf_r+0x110>
 800e90a:	eba0 0308 	sub.w	r3, r0, r8
 800e90e:	fa09 f303 	lsl.w	r3, r9, r3
 800e912:	4313      	orrs	r3, r2
 800e914:	9304      	str	r3, [sp, #16]
 800e916:	46a2      	mov	sl, r4
 800e918:	e7d2      	b.n	800e8c0 <_svfiprintf_r+0x9c>
 800e91a:	9b03      	ldr	r3, [sp, #12]
 800e91c:	1d19      	adds	r1, r3, #4
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	9103      	str	r1, [sp, #12]
 800e922:	2b00      	cmp	r3, #0
 800e924:	bfbb      	ittet	lt
 800e926:	425b      	neglt	r3, r3
 800e928:	f042 0202 	orrlt.w	r2, r2, #2
 800e92c:	9307      	strge	r3, [sp, #28]
 800e92e:	9307      	strlt	r3, [sp, #28]
 800e930:	bfb8      	it	lt
 800e932:	9204      	strlt	r2, [sp, #16]
 800e934:	7823      	ldrb	r3, [r4, #0]
 800e936:	2b2e      	cmp	r3, #46	; 0x2e
 800e938:	d10c      	bne.n	800e954 <_svfiprintf_r+0x130>
 800e93a:	7863      	ldrb	r3, [r4, #1]
 800e93c:	2b2a      	cmp	r3, #42	; 0x2a
 800e93e:	d134      	bne.n	800e9aa <_svfiprintf_r+0x186>
 800e940:	9b03      	ldr	r3, [sp, #12]
 800e942:	1d1a      	adds	r2, r3, #4
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	9203      	str	r2, [sp, #12]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	bfb8      	it	lt
 800e94c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e950:	3402      	adds	r4, #2
 800e952:	9305      	str	r3, [sp, #20]
 800e954:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ea1c <_svfiprintf_r+0x1f8>
 800e958:	7821      	ldrb	r1, [r4, #0]
 800e95a:	2203      	movs	r2, #3
 800e95c:	4650      	mov	r0, sl
 800e95e:	f7f1 fcbf 	bl	80002e0 <memchr>
 800e962:	b138      	cbz	r0, 800e974 <_svfiprintf_r+0x150>
 800e964:	9b04      	ldr	r3, [sp, #16]
 800e966:	eba0 000a 	sub.w	r0, r0, sl
 800e96a:	2240      	movs	r2, #64	; 0x40
 800e96c:	4082      	lsls	r2, r0
 800e96e:	4313      	orrs	r3, r2
 800e970:	3401      	adds	r4, #1
 800e972:	9304      	str	r3, [sp, #16]
 800e974:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e978:	4825      	ldr	r0, [pc, #148]	; (800ea10 <_svfiprintf_r+0x1ec>)
 800e97a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e97e:	2206      	movs	r2, #6
 800e980:	f7f1 fcae 	bl	80002e0 <memchr>
 800e984:	2800      	cmp	r0, #0
 800e986:	d038      	beq.n	800e9fa <_svfiprintf_r+0x1d6>
 800e988:	4b22      	ldr	r3, [pc, #136]	; (800ea14 <_svfiprintf_r+0x1f0>)
 800e98a:	bb1b      	cbnz	r3, 800e9d4 <_svfiprintf_r+0x1b0>
 800e98c:	9b03      	ldr	r3, [sp, #12]
 800e98e:	3307      	adds	r3, #7
 800e990:	f023 0307 	bic.w	r3, r3, #7
 800e994:	3308      	adds	r3, #8
 800e996:	9303      	str	r3, [sp, #12]
 800e998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e99a:	4433      	add	r3, r6
 800e99c:	9309      	str	r3, [sp, #36]	; 0x24
 800e99e:	e768      	b.n	800e872 <_svfiprintf_r+0x4e>
 800e9a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9a4:	460c      	mov	r4, r1
 800e9a6:	2001      	movs	r0, #1
 800e9a8:	e7a6      	b.n	800e8f8 <_svfiprintf_r+0xd4>
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	3401      	adds	r4, #1
 800e9ae:	9305      	str	r3, [sp, #20]
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	f04f 0c0a 	mov.w	ip, #10
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9bc:	3a30      	subs	r2, #48	; 0x30
 800e9be:	2a09      	cmp	r2, #9
 800e9c0:	d903      	bls.n	800e9ca <_svfiprintf_r+0x1a6>
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d0c6      	beq.n	800e954 <_svfiprintf_r+0x130>
 800e9c6:	9105      	str	r1, [sp, #20]
 800e9c8:	e7c4      	b.n	800e954 <_svfiprintf_r+0x130>
 800e9ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9ce:	4604      	mov	r4, r0
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	e7f0      	b.n	800e9b6 <_svfiprintf_r+0x192>
 800e9d4:	ab03      	add	r3, sp, #12
 800e9d6:	9300      	str	r3, [sp, #0]
 800e9d8:	462a      	mov	r2, r5
 800e9da:	4b0f      	ldr	r3, [pc, #60]	; (800ea18 <_svfiprintf_r+0x1f4>)
 800e9dc:	a904      	add	r1, sp, #16
 800e9de:	4638      	mov	r0, r7
 800e9e0:	f7fd feb6 	bl	800c750 <_printf_float>
 800e9e4:	1c42      	adds	r2, r0, #1
 800e9e6:	4606      	mov	r6, r0
 800e9e8:	d1d6      	bne.n	800e998 <_svfiprintf_r+0x174>
 800e9ea:	89ab      	ldrh	r3, [r5, #12]
 800e9ec:	065b      	lsls	r3, r3, #25
 800e9ee:	f53f af2d 	bmi.w	800e84c <_svfiprintf_r+0x28>
 800e9f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9f4:	b01d      	add	sp, #116	; 0x74
 800e9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9fa:	ab03      	add	r3, sp, #12
 800e9fc:	9300      	str	r3, [sp, #0]
 800e9fe:	462a      	mov	r2, r5
 800ea00:	4b05      	ldr	r3, [pc, #20]	; (800ea18 <_svfiprintf_r+0x1f4>)
 800ea02:	a904      	add	r1, sp, #16
 800ea04:	4638      	mov	r0, r7
 800ea06:	f7fe f92b 	bl	800cc60 <_printf_i>
 800ea0a:	e7eb      	b.n	800e9e4 <_svfiprintf_r+0x1c0>
 800ea0c:	0800f4d4 	.word	0x0800f4d4
 800ea10:	0800f4de 	.word	0x0800f4de
 800ea14:	0800c751 	.word	0x0800c751
 800ea18:	0800e771 	.word	0x0800e771
 800ea1c:	0800f4da 	.word	0x0800f4da

0800ea20 <__sflush_r>:
 800ea20:	898a      	ldrh	r2, [r1, #12]
 800ea22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea26:	4605      	mov	r5, r0
 800ea28:	0710      	lsls	r0, r2, #28
 800ea2a:	460c      	mov	r4, r1
 800ea2c:	d458      	bmi.n	800eae0 <__sflush_r+0xc0>
 800ea2e:	684b      	ldr	r3, [r1, #4]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	dc05      	bgt.n	800ea40 <__sflush_r+0x20>
 800ea34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	dc02      	bgt.n	800ea40 <__sflush_r+0x20>
 800ea3a:	2000      	movs	r0, #0
 800ea3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea42:	2e00      	cmp	r6, #0
 800ea44:	d0f9      	beq.n	800ea3a <__sflush_r+0x1a>
 800ea46:	2300      	movs	r3, #0
 800ea48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ea4c:	682f      	ldr	r7, [r5, #0]
 800ea4e:	6a21      	ldr	r1, [r4, #32]
 800ea50:	602b      	str	r3, [r5, #0]
 800ea52:	d032      	beq.n	800eaba <__sflush_r+0x9a>
 800ea54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ea56:	89a3      	ldrh	r3, [r4, #12]
 800ea58:	075a      	lsls	r2, r3, #29
 800ea5a:	d505      	bpl.n	800ea68 <__sflush_r+0x48>
 800ea5c:	6863      	ldr	r3, [r4, #4]
 800ea5e:	1ac0      	subs	r0, r0, r3
 800ea60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ea62:	b10b      	cbz	r3, 800ea68 <__sflush_r+0x48>
 800ea64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ea66:	1ac0      	subs	r0, r0, r3
 800ea68:	2300      	movs	r3, #0
 800ea6a:	4602      	mov	r2, r0
 800ea6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea6e:	6a21      	ldr	r1, [r4, #32]
 800ea70:	4628      	mov	r0, r5
 800ea72:	47b0      	blx	r6
 800ea74:	1c43      	adds	r3, r0, #1
 800ea76:	89a3      	ldrh	r3, [r4, #12]
 800ea78:	d106      	bne.n	800ea88 <__sflush_r+0x68>
 800ea7a:	6829      	ldr	r1, [r5, #0]
 800ea7c:	291d      	cmp	r1, #29
 800ea7e:	d82b      	bhi.n	800ead8 <__sflush_r+0xb8>
 800ea80:	4a29      	ldr	r2, [pc, #164]	; (800eb28 <__sflush_r+0x108>)
 800ea82:	410a      	asrs	r2, r1
 800ea84:	07d6      	lsls	r6, r2, #31
 800ea86:	d427      	bmi.n	800ead8 <__sflush_r+0xb8>
 800ea88:	2200      	movs	r2, #0
 800ea8a:	6062      	str	r2, [r4, #4]
 800ea8c:	04d9      	lsls	r1, r3, #19
 800ea8e:	6922      	ldr	r2, [r4, #16]
 800ea90:	6022      	str	r2, [r4, #0]
 800ea92:	d504      	bpl.n	800ea9e <__sflush_r+0x7e>
 800ea94:	1c42      	adds	r2, r0, #1
 800ea96:	d101      	bne.n	800ea9c <__sflush_r+0x7c>
 800ea98:	682b      	ldr	r3, [r5, #0]
 800ea9a:	b903      	cbnz	r3, 800ea9e <__sflush_r+0x7e>
 800ea9c:	6560      	str	r0, [r4, #84]	; 0x54
 800ea9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eaa0:	602f      	str	r7, [r5, #0]
 800eaa2:	2900      	cmp	r1, #0
 800eaa4:	d0c9      	beq.n	800ea3a <__sflush_r+0x1a>
 800eaa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eaaa:	4299      	cmp	r1, r3
 800eaac:	d002      	beq.n	800eab4 <__sflush_r+0x94>
 800eaae:	4628      	mov	r0, r5
 800eab0:	f7ff f9e2 	bl	800de78 <_free_r>
 800eab4:	2000      	movs	r0, #0
 800eab6:	6360      	str	r0, [r4, #52]	; 0x34
 800eab8:	e7c0      	b.n	800ea3c <__sflush_r+0x1c>
 800eaba:	2301      	movs	r3, #1
 800eabc:	4628      	mov	r0, r5
 800eabe:	47b0      	blx	r6
 800eac0:	1c41      	adds	r1, r0, #1
 800eac2:	d1c8      	bne.n	800ea56 <__sflush_r+0x36>
 800eac4:	682b      	ldr	r3, [r5, #0]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d0c5      	beq.n	800ea56 <__sflush_r+0x36>
 800eaca:	2b1d      	cmp	r3, #29
 800eacc:	d001      	beq.n	800ead2 <__sflush_r+0xb2>
 800eace:	2b16      	cmp	r3, #22
 800ead0:	d101      	bne.n	800ead6 <__sflush_r+0xb6>
 800ead2:	602f      	str	r7, [r5, #0]
 800ead4:	e7b1      	b.n	800ea3a <__sflush_r+0x1a>
 800ead6:	89a3      	ldrh	r3, [r4, #12]
 800ead8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eadc:	81a3      	strh	r3, [r4, #12]
 800eade:	e7ad      	b.n	800ea3c <__sflush_r+0x1c>
 800eae0:	690f      	ldr	r7, [r1, #16]
 800eae2:	2f00      	cmp	r7, #0
 800eae4:	d0a9      	beq.n	800ea3a <__sflush_r+0x1a>
 800eae6:	0793      	lsls	r3, r2, #30
 800eae8:	680e      	ldr	r6, [r1, #0]
 800eaea:	bf08      	it	eq
 800eaec:	694b      	ldreq	r3, [r1, #20]
 800eaee:	600f      	str	r7, [r1, #0]
 800eaf0:	bf18      	it	ne
 800eaf2:	2300      	movne	r3, #0
 800eaf4:	eba6 0807 	sub.w	r8, r6, r7
 800eaf8:	608b      	str	r3, [r1, #8]
 800eafa:	f1b8 0f00 	cmp.w	r8, #0
 800eafe:	dd9c      	ble.n	800ea3a <__sflush_r+0x1a>
 800eb00:	6a21      	ldr	r1, [r4, #32]
 800eb02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eb04:	4643      	mov	r3, r8
 800eb06:	463a      	mov	r2, r7
 800eb08:	4628      	mov	r0, r5
 800eb0a:	47b0      	blx	r6
 800eb0c:	2800      	cmp	r0, #0
 800eb0e:	dc06      	bgt.n	800eb1e <__sflush_r+0xfe>
 800eb10:	89a3      	ldrh	r3, [r4, #12]
 800eb12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb16:	81a3      	strh	r3, [r4, #12]
 800eb18:	f04f 30ff 	mov.w	r0, #4294967295
 800eb1c:	e78e      	b.n	800ea3c <__sflush_r+0x1c>
 800eb1e:	4407      	add	r7, r0
 800eb20:	eba8 0800 	sub.w	r8, r8, r0
 800eb24:	e7e9      	b.n	800eafa <__sflush_r+0xda>
 800eb26:	bf00      	nop
 800eb28:	dfbffffe 	.word	0xdfbffffe

0800eb2c <_fflush_r>:
 800eb2c:	b538      	push	{r3, r4, r5, lr}
 800eb2e:	690b      	ldr	r3, [r1, #16]
 800eb30:	4605      	mov	r5, r0
 800eb32:	460c      	mov	r4, r1
 800eb34:	b913      	cbnz	r3, 800eb3c <_fflush_r+0x10>
 800eb36:	2500      	movs	r5, #0
 800eb38:	4628      	mov	r0, r5
 800eb3a:	bd38      	pop	{r3, r4, r5, pc}
 800eb3c:	b118      	cbz	r0, 800eb46 <_fflush_r+0x1a>
 800eb3e:	6a03      	ldr	r3, [r0, #32]
 800eb40:	b90b      	cbnz	r3, 800eb46 <_fflush_r+0x1a>
 800eb42:	f7fe fa3b 	bl	800cfbc <__sinit>
 800eb46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d0f3      	beq.n	800eb36 <_fflush_r+0xa>
 800eb4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eb50:	07d0      	lsls	r0, r2, #31
 800eb52:	d404      	bmi.n	800eb5e <_fflush_r+0x32>
 800eb54:	0599      	lsls	r1, r3, #22
 800eb56:	d402      	bmi.n	800eb5e <_fflush_r+0x32>
 800eb58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb5a:	f7fe fb94 	bl	800d286 <__retarget_lock_acquire_recursive>
 800eb5e:	4628      	mov	r0, r5
 800eb60:	4621      	mov	r1, r4
 800eb62:	f7ff ff5d 	bl	800ea20 <__sflush_r>
 800eb66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb68:	07da      	lsls	r2, r3, #31
 800eb6a:	4605      	mov	r5, r0
 800eb6c:	d4e4      	bmi.n	800eb38 <_fflush_r+0xc>
 800eb6e:	89a3      	ldrh	r3, [r4, #12]
 800eb70:	059b      	lsls	r3, r3, #22
 800eb72:	d4e1      	bmi.n	800eb38 <_fflush_r+0xc>
 800eb74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb76:	f7fe fb87 	bl	800d288 <__retarget_lock_release_recursive>
 800eb7a:	e7dd      	b.n	800eb38 <_fflush_r+0xc>

0800eb7c <_sbrk_r>:
 800eb7c:	b538      	push	{r3, r4, r5, lr}
 800eb7e:	4d06      	ldr	r5, [pc, #24]	; (800eb98 <_sbrk_r+0x1c>)
 800eb80:	2300      	movs	r3, #0
 800eb82:	4604      	mov	r4, r0
 800eb84:	4608      	mov	r0, r1
 800eb86:	602b      	str	r3, [r5, #0]
 800eb88:	f7f2 fdd8 	bl	800173c <_sbrk>
 800eb8c:	1c43      	adds	r3, r0, #1
 800eb8e:	d102      	bne.n	800eb96 <_sbrk_r+0x1a>
 800eb90:	682b      	ldr	r3, [r5, #0]
 800eb92:	b103      	cbz	r3, 800eb96 <_sbrk_r+0x1a>
 800eb94:	6023      	str	r3, [r4, #0]
 800eb96:	bd38      	pop	{r3, r4, r5, pc}
 800eb98:	24000be8 	.word	0x24000be8

0800eb9c <memcpy>:
 800eb9c:	440a      	add	r2, r1
 800eb9e:	4291      	cmp	r1, r2
 800eba0:	f100 33ff 	add.w	r3, r0, #4294967295
 800eba4:	d100      	bne.n	800eba8 <memcpy+0xc>
 800eba6:	4770      	bx	lr
 800eba8:	b510      	push	{r4, lr}
 800ebaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ebb2:	4291      	cmp	r1, r2
 800ebb4:	d1f9      	bne.n	800ebaa <memcpy+0xe>
 800ebb6:	bd10      	pop	{r4, pc}

0800ebb8 <__assert_func>:
 800ebb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ebba:	4614      	mov	r4, r2
 800ebbc:	461a      	mov	r2, r3
 800ebbe:	4b09      	ldr	r3, [pc, #36]	; (800ebe4 <__assert_func+0x2c>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	4605      	mov	r5, r0
 800ebc4:	68d8      	ldr	r0, [r3, #12]
 800ebc6:	b14c      	cbz	r4, 800ebdc <__assert_func+0x24>
 800ebc8:	4b07      	ldr	r3, [pc, #28]	; (800ebe8 <__assert_func+0x30>)
 800ebca:	9100      	str	r1, [sp, #0]
 800ebcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ebd0:	4906      	ldr	r1, [pc, #24]	; (800ebec <__assert_func+0x34>)
 800ebd2:	462b      	mov	r3, r5
 800ebd4:	f000 f872 	bl	800ecbc <fiprintf>
 800ebd8:	f000 f882 	bl	800ece0 <abort>
 800ebdc:	4b04      	ldr	r3, [pc, #16]	; (800ebf0 <__assert_func+0x38>)
 800ebde:	461c      	mov	r4, r3
 800ebe0:	e7f3      	b.n	800ebca <__assert_func+0x12>
 800ebe2:	bf00      	nop
 800ebe4:	24000068 	.word	0x24000068
 800ebe8:	0800f4ef 	.word	0x0800f4ef
 800ebec:	0800f4fc 	.word	0x0800f4fc
 800ebf0:	0800f52a 	.word	0x0800f52a

0800ebf4 <_calloc_r>:
 800ebf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ebf6:	fba1 2402 	umull	r2, r4, r1, r2
 800ebfa:	b94c      	cbnz	r4, 800ec10 <_calloc_r+0x1c>
 800ebfc:	4611      	mov	r1, r2
 800ebfe:	9201      	str	r2, [sp, #4]
 800ec00:	f7ff f9ae 	bl	800df60 <_malloc_r>
 800ec04:	9a01      	ldr	r2, [sp, #4]
 800ec06:	4605      	mov	r5, r0
 800ec08:	b930      	cbnz	r0, 800ec18 <_calloc_r+0x24>
 800ec0a:	4628      	mov	r0, r5
 800ec0c:	b003      	add	sp, #12
 800ec0e:	bd30      	pop	{r4, r5, pc}
 800ec10:	220c      	movs	r2, #12
 800ec12:	6002      	str	r2, [r0, #0]
 800ec14:	2500      	movs	r5, #0
 800ec16:	e7f8      	b.n	800ec0a <_calloc_r+0x16>
 800ec18:	4621      	mov	r1, r4
 800ec1a:	f7fe fab6 	bl	800d18a <memset>
 800ec1e:	e7f4      	b.n	800ec0a <_calloc_r+0x16>

0800ec20 <__ascii_mbtowc>:
 800ec20:	b082      	sub	sp, #8
 800ec22:	b901      	cbnz	r1, 800ec26 <__ascii_mbtowc+0x6>
 800ec24:	a901      	add	r1, sp, #4
 800ec26:	b142      	cbz	r2, 800ec3a <__ascii_mbtowc+0x1a>
 800ec28:	b14b      	cbz	r3, 800ec3e <__ascii_mbtowc+0x1e>
 800ec2a:	7813      	ldrb	r3, [r2, #0]
 800ec2c:	600b      	str	r3, [r1, #0]
 800ec2e:	7812      	ldrb	r2, [r2, #0]
 800ec30:	1e10      	subs	r0, r2, #0
 800ec32:	bf18      	it	ne
 800ec34:	2001      	movne	r0, #1
 800ec36:	b002      	add	sp, #8
 800ec38:	4770      	bx	lr
 800ec3a:	4610      	mov	r0, r2
 800ec3c:	e7fb      	b.n	800ec36 <__ascii_mbtowc+0x16>
 800ec3e:	f06f 0001 	mvn.w	r0, #1
 800ec42:	e7f8      	b.n	800ec36 <__ascii_mbtowc+0x16>

0800ec44 <_realloc_r>:
 800ec44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec48:	4680      	mov	r8, r0
 800ec4a:	4614      	mov	r4, r2
 800ec4c:	460e      	mov	r6, r1
 800ec4e:	b921      	cbnz	r1, 800ec5a <_realloc_r+0x16>
 800ec50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec54:	4611      	mov	r1, r2
 800ec56:	f7ff b983 	b.w	800df60 <_malloc_r>
 800ec5a:	b92a      	cbnz	r2, 800ec68 <_realloc_r+0x24>
 800ec5c:	f7ff f90c 	bl	800de78 <_free_r>
 800ec60:	4625      	mov	r5, r4
 800ec62:	4628      	mov	r0, r5
 800ec64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec68:	f000 f841 	bl	800ecee <_malloc_usable_size_r>
 800ec6c:	4284      	cmp	r4, r0
 800ec6e:	4607      	mov	r7, r0
 800ec70:	d802      	bhi.n	800ec78 <_realloc_r+0x34>
 800ec72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ec76:	d812      	bhi.n	800ec9e <_realloc_r+0x5a>
 800ec78:	4621      	mov	r1, r4
 800ec7a:	4640      	mov	r0, r8
 800ec7c:	f7ff f970 	bl	800df60 <_malloc_r>
 800ec80:	4605      	mov	r5, r0
 800ec82:	2800      	cmp	r0, #0
 800ec84:	d0ed      	beq.n	800ec62 <_realloc_r+0x1e>
 800ec86:	42bc      	cmp	r4, r7
 800ec88:	4622      	mov	r2, r4
 800ec8a:	4631      	mov	r1, r6
 800ec8c:	bf28      	it	cs
 800ec8e:	463a      	movcs	r2, r7
 800ec90:	f7ff ff84 	bl	800eb9c <memcpy>
 800ec94:	4631      	mov	r1, r6
 800ec96:	4640      	mov	r0, r8
 800ec98:	f7ff f8ee 	bl	800de78 <_free_r>
 800ec9c:	e7e1      	b.n	800ec62 <_realloc_r+0x1e>
 800ec9e:	4635      	mov	r5, r6
 800eca0:	e7df      	b.n	800ec62 <_realloc_r+0x1e>

0800eca2 <__ascii_wctomb>:
 800eca2:	b149      	cbz	r1, 800ecb8 <__ascii_wctomb+0x16>
 800eca4:	2aff      	cmp	r2, #255	; 0xff
 800eca6:	bf85      	ittet	hi
 800eca8:	238a      	movhi	r3, #138	; 0x8a
 800ecaa:	6003      	strhi	r3, [r0, #0]
 800ecac:	700a      	strbls	r2, [r1, #0]
 800ecae:	f04f 30ff 	movhi.w	r0, #4294967295
 800ecb2:	bf98      	it	ls
 800ecb4:	2001      	movls	r0, #1
 800ecb6:	4770      	bx	lr
 800ecb8:	4608      	mov	r0, r1
 800ecba:	4770      	bx	lr

0800ecbc <fiprintf>:
 800ecbc:	b40e      	push	{r1, r2, r3}
 800ecbe:	b503      	push	{r0, r1, lr}
 800ecc0:	4601      	mov	r1, r0
 800ecc2:	ab03      	add	r3, sp, #12
 800ecc4:	4805      	ldr	r0, [pc, #20]	; (800ecdc <fiprintf+0x20>)
 800ecc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecca:	6800      	ldr	r0, [r0, #0]
 800eccc:	9301      	str	r3, [sp, #4]
 800ecce:	f000 f83f 	bl	800ed50 <_vfiprintf_r>
 800ecd2:	b002      	add	sp, #8
 800ecd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecd8:	b003      	add	sp, #12
 800ecda:	4770      	bx	lr
 800ecdc:	24000068 	.word	0x24000068

0800ece0 <abort>:
 800ece0:	b508      	push	{r3, lr}
 800ece2:	2006      	movs	r0, #6
 800ece4:	f000 fa0c 	bl	800f100 <raise>
 800ece8:	2001      	movs	r0, #1
 800ecea:	f7f2 fcaf 	bl	800164c <_exit>

0800ecee <_malloc_usable_size_r>:
 800ecee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecf2:	1f18      	subs	r0, r3, #4
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	bfbc      	itt	lt
 800ecf8:	580b      	ldrlt	r3, [r1, r0]
 800ecfa:	18c0      	addlt	r0, r0, r3
 800ecfc:	4770      	bx	lr

0800ecfe <__sfputc_r>:
 800ecfe:	6893      	ldr	r3, [r2, #8]
 800ed00:	3b01      	subs	r3, #1
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	b410      	push	{r4}
 800ed06:	6093      	str	r3, [r2, #8]
 800ed08:	da08      	bge.n	800ed1c <__sfputc_r+0x1e>
 800ed0a:	6994      	ldr	r4, [r2, #24]
 800ed0c:	42a3      	cmp	r3, r4
 800ed0e:	db01      	blt.n	800ed14 <__sfputc_r+0x16>
 800ed10:	290a      	cmp	r1, #10
 800ed12:	d103      	bne.n	800ed1c <__sfputc_r+0x1e>
 800ed14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed18:	f000 b934 	b.w	800ef84 <__swbuf_r>
 800ed1c:	6813      	ldr	r3, [r2, #0]
 800ed1e:	1c58      	adds	r0, r3, #1
 800ed20:	6010      	str	r0, [r2, #0]
 800ed22:	7019      	strb	r1, [r3, #0]
 800ed24:	4608      	mov	r0, r1
 800ed26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed2a:	4770      	bx	lr

0800ed2c <__sfputs_r>:
 800ed2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed2e:	4606      	mov	r6, r0
 800ed30:	460f      	mov	r7, r1
 800ed32:	4614      	mov	r4, r2
 800ed34:	18d5      	adds	r5, r2, r3
 800ed36:	42ac      	cmp	r4, r5
 800ed38:	d101      	bne.n	800ed3e <__sfputs_r+0x12>
 800ed3a:	2000      	movs	r0, #0
 800ed3c:	e007      	b.n	800ed4e <__sfputs_r+0x22>
 800ed3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed42:	463a      	mov	r2, r7
 800ed44:	4630      	mov	r0, r6
 800ed46:	f7ff ffda 	bl	800ecfe <__sfputc_r>
 800ed4a:	1c43      	adds	r3, r0, #1
 800ed4c:	d1f3      	bne.n	800ed36 <__sfputs_r+0xa>
 800ed4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ed50 <_vfiprintf_r>:
 800ed50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed54:	460d      	mov	r5, r1
 800ed56:	b09d      	sub	sp, #116	; 0x74
 800ed58:	4614      	mov	r4, r2
 800ed5a:	4698      	mov	r8, r3
 800ed5c:	4606      	mov	r6, r0
 800ed5e:	b118      	cbz	r0, 800ed68 <_vfiprintf_r+0x18>
 800ed60:	6a03      	ldr	r3, [r0, #32]
 800ed62:	b90b      	cbnz	r3, 800ed68 <_vfiprintf_r+0x18>
 800ed64:	f7fe f92a 	bl	800cfbc <__sinit>
 800ed68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed6a:	07d9      	lsls	r1, r3, #31
 800ed6c:	d405      	bmi.n	800ed7a <_vfiprintf_r+0x2a>
 800ed6e:	89ab      	ldrh	r3, [r5, #12]
 800ed70:	059a      	lsls	r2, r3, #22
 800ed72:	d402      	bmi.n	800ed7a <_vfiprintf_r+0x2a>
 800ed74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed76:	f7fe fa86 	bl	800d286 <__retarget_lock_acquire_recursive>
 800ed7a:	89ab      	ldrh	r3, [r5, #12]
 800ed7c:	071b      	lsls	r3, r3, #28
 800ed7e:	d501      	bpl.n	800ed84 <_vfiprintf_r+0x34>
 800ed80:	692b      	ldr	r3, [r5, #16]
 800ed82:	b99b      	cbnz	r3, 800edac <_vfiprintf_r+0x5c>
 800ed84:	4629      	mov	r1, r5
 800ed86:	4630      	mov	r0, r6
 800ed88:	f000 f93a 	bl	800f000 <__swsetup_r>
 800ed8c:	b170      	cbz	r0, 800edac <_vfiprintf_r+0x5c>
 800ed8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed90:	07dc      	lsls	r4, r3, #31
 800ed92:	d504      	bpl.n	800ed9e <_vfiprintf_r+0x4e>
 800ed94:	f04f 30ff 	mov.w	r0, #4294967295
 800ed98:	b01d      	add	sp, #116	; 0x74
 800ed9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed9e:	89ab      	ldrh	r3, [r5, #12]
 800eda0:	0598      	lsls	r0, r3, #22
 800eda2:	d4f7      	bmi.n	800ed94 <_vfiprintf_r+0x44>
 800eda4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eda6:	f7fe fa6f 	bl	800d288 <__retarget_lock_release_recursive>
 800edaa:	e7f3      	b.n	800ed94 <_vfiprintf_r+0x44>
 800edac:	2300      	movs	r3, #0
 800edae:	9309      	str	r3, [sp, #36]	; 0x24
 800edb0:	2320      	movs	r3, #32
 800edb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800edb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800edba:	2330      	movs	r3, #48	; 0x30
 800edbc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ef70 <_vfiprintf_r+0x220>
 800edc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800edc4:	f04f 0901 	mov.w	r9, #1
 800edc8:	4623      	mov	r3, r4
 800edca:	469a      	mov	sl, r3
 800edcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edd0:	b10a      	cbz	r2, 800edd6 <_vfiprintf_r+0x86>
 800edd2:	2a25      	cmp	r2, #37	; 0x25
 800edd4:	d1f9      	bne.n	800edca <_vfiprintf_r+0x7a>
 800edd6:	ebba 0b04 	subs.w	fp, sl, r4
 800edda:	d00b      	beq.n	800edf4 <_vfiprintf_r+0xa4>
 800eddc:	465b      	mov	r3, fp
 800edde:	4622      	mov	r2, r4
 800ede0:	4629      	mov	r1, r5
 800ede2:	4630      	mov	r0, r6
 800ede4:	f7ff ffa2 	bl	800ed2c <__sfputs_r>
 800ede8:	3001      	adds	r0, #1
 800edea:	f000 80a9 	beq.w	800ef40 <_vfiprintf_r+0x1f0>
 800edee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edf0:	445a      	add	r2, fp
 800edf2:	9209      	str	r2, [sp, #36]	; 0x24
 800edf4:	f89a 3000 	ldrb.w	r3, [sl]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	f000 80a1 	beq.w	800ef40 <_vfiprintf_r+0x1f0>
 800edfe:	2300      	movs	r3, #0
 800ee00:	f04f 32ff 	mov.w	r2, #4294967295
 800ee04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee08:	f10a 0a01 	add.w	sl, sl, #1
 800ee0c:	9304      	str	r3, [sp, #16]
 800ee0e:	9307      	str	r3, [sp, #28]
 800ee10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee14:	931a      	str	r3, [sp, #104]	; 0x68
 800ee16:	4654      	mov	r4, sl
 800ee18:	2205      	movs	r2, #5
 800ee1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee1e:	4854      	ldr	r0, [pc, #336]	; (800ef70 <_vfiprintf_r+0x220>)
 800ee20:	f7f1 fa5e 	bl	80002e0 <memchr>
 800ee24:	9a04      	ldr	r2, [sp, #16]
 800ee26:	b9d8      	cbnz	r0, 800ee60 <_vfiprintf_r+0x110>
 800ee28:	06d1      	lsls	r1, r2, #27
 800ee2a:	bf44      	itt	mi
 800ee2c:	2320      	movmi	r3, #32
 800ee2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee32:	0713      	lsls	r3, r2, #28
 800ee34:	bf44      	itt	mi
 800ee36:	232b      	movmi	r3, #43	; 0x2b
 800ee38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ee40:	2b2a      	cmp	r3, #42	; 0x2a
 800ee42:	d015      	beq.n	800ee70 <_vfiprintf_r+0x120>
 800ee44:	9a07      	ldr	r2, [sp, #28]
 800ee46:	4654      	mov	r4, sl
 800ee48:	2000      	movs	r0, #0
 800ee4a:	f04f 0c0a 	mov.w	ip, #10
 800ee4e:	4621      	mov	r1, r4
 800ee50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee54:	3b30      	subs	r3, #48	; 0x30
 800ee56:	2b09      	cmp	r3, #9
 800ee58:	d94d      	bls.n	800eef6 <_vfiprintf_r+0x1a6>
 800ee5a:	b1b0      	cbz	r0, 800ee8a <_vfiprintf_r+0x13a>
 800ee5c:	9207      	str	r2, [sp, #28]
 800ee5e:	e014      	b.n	800ee8a <_vfiprintf_r+0x13a>
 800ee60:	eba0 0308 	sub.w	r3, r0, r8
 800ee64:	fa09 f303 	lsl.w	r3, r9, r3
 800ee68:	4313      	orrs	r3, r2
 800ee6a:	9304      	str	r3, [sp, #16]
 800ee6c:	46a2      	mov	sl, r4
 800ee6e:	e7d2      	b.n	800ee16 <_vfiprintf_r+0xc6>
 800ee70:	9b03      	ldr	r3, [sp, #12]
 800ee72:	1d19      	adds	r1, r3, #4
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	9103      	str	r1, [sp, #12]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	bfbb      	ittet	lt
 800ee7c:	425b      	neglt	r3, r3
 800ee7e:	f042 0202 	orrlt.w	r2, r2, #2
 800ee82:	9307      	strge	r3, [sp, #28]
 800ee84:	9307      	strlt	r3, [sp, #28]
 800ee86:	bfb8      	it	lt
 800ee88:	9204      	strlt	r2, [sp, #16]
 800ee8a:	7823      	ldrb	r3, [r4, #0]
 800ee8c:	2b2e      	cmp	r3, #46	; 0x2e
 800ee8e:	d10c      	bne.n	800eeaa <_vfiprintf_r+0x15a>
 800ee90:	7863      	ldrb	r3, [r4, #1]
 800ee92:	2b2a      	cmp	r3, #42	; 0x2a
 800ee94:	d134      	bne.n	800ef00 <_vfiprintf_r+0x1b0>
 800ee96:	9b03      	ldr	r3, [sp, #12]
 800ee98:	1d1a      	adds	r2, r3, #4
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	9203      	str	r2, [sp, #12]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	bfb8      	it	lt
 800eea2:	f04f 33ff 	movlt.w	r3, #4294967295
 800eea6:	3402      	adds	r4, #2
 800eea8:	9305      	str	r3, [sp, #20]
 800eeaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ef80 <_vfiprintf_r+0x230>
 800eeae:	7821      	ldrb	r1, [r4, #0]
 800eeb0:	2203      	movs	r2, #3
 800eeb2:	4650      	mov	r0, sl
 800eeb4:	f7f1 fa14 	bl	80002e0 <memchr>
 800eeb8:	b138      	cbz	r0, 800eeca <_vfiprintf_r+0x17a>
 800eeba:	9b04      	ldr	r3, [sp, #16]
 800eebc:	eba0 000a 	sub.w	r0, r0, sl
 800eec0:	2240      	movs	r2, #64	; 0x40
 800eec2:	4082      	lsls	r2, r0
 800eec4:	4313      	orrs	r3, r2
 800eec6:	3401      	adds	r4, #1
 800eec8:	9304      	str	r3, [sp, #16]
 800eeca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eece:	4829      	ldr	r0, [pc, #164]	; (800ef74 <_vfiprintf_r+0x224>)
 800eed0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eed4:	2206      	movs	r2, #6
 800eed6:	f7f1 fa03 	bl	80002e0 <memchr>
 800eeda:	2800      	cmp	r0, #0
 800eedc:	d03f      	beq.n	800ef5e <_vfiprintf_r+0x20e>
 800eede:	4b26      	ldr	r3, [pc, #152]	; (800ef78 <_vfiprintf_r+0x228>)
 800eee0:	bb1b      	cbnz	r3, 800ef2a <_vfiprintf_r+0x1da>
 800eee2:	9b03      	ldr	r3, [sp, #12]
 800eee4:	3307      	adds	r3, #7
 800eee6:	f023 0307 	bic.w	r3, r3, #7
 800eeea:	3308      	adds	r3, #8
 800eeec:	9303      	str	r3, [sp, #12]
 800eeee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eef0:	443b      	add	r3, r7
 800eef2:	9309      	str	r3, [sp, #36]	; 0x24
 800eef4:	e768      	b.n	800edc8 <_vfiprintf_r+0x78>
 800eef6:	fb0c 3202 	mla	r2, ip, r2, r3
 800eefa:	460c      	mov	r4, r1
 800eefc:	2001      	movs	r0, #1
 800eefe:	e7a6      	b.n	800ee4e <_vfiprintf_r+0xfe>
 800ef00:	2300      	movs	r3, #0
 800ef02:	3401      	adds	r4, #1
 800ef04:	9305      	str	r3, [sp, #20]
 800ef06:	4619      	mov	r1, r3
 800ef08:	f04f 0c0a 	mov.w	ip, #10
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef12:	3a30      	subs	r2, #48	; 0x30
 800ef14:	2a09      	cmp	r2, #9
 800ef16:	d903      	bls.n	800ef20 <_vfiprintf_r+0x1d0>
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d0c6      	beq.n	800eeaa <_vfiprintf_r+0x15a>
 800ef1c:	9105      	str	r1, [sp, #20]
 800ef1e:	e7c4      	b.n	800eeaa <_vfiprintf_r+0x15a>
 800ef20:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef24:	4604      	mov	r4, r0
 800ef26:	2301      	movs	r3, #1
 800ef28:	e7f0      	b.n	800ef0c <_vfiprintf_r+0x1bc>
 800ef2a:	ab03      	add	r3, sp, #12
 800ef2c:	9300      	str	r3, [sp, #0]
 800ef2e:	462a      	mov	r2, r5
 800ef30:	4b12      	ldr	r3, [pc, #72]	; (800ef7c <_vfiprintf_r+0x22c>)
 800ef32:	a904      	add	r1, sp, #16
 800ef34:	4630      	mov	r0, r6
 800ef36:	f7fd fc0b 	bl	800c750 <_printf_float>
 800ef3a:	4607      	mov	r7, r0
 800ef3c:	1c78      	adds	r0, r7, #1
 800ef3e:	d1d6      	bne.n	800eeee <_vfiprintf_r+0x19e>
 800ef40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef42:	07d9      	lsls	r1, r3, #31
 800ef44:	d405      	bmi.n	800ef52 <_vfiprintf_r+0x202>
 800ef46:	89ab      	ldrh	r3, [r5, #12]
 800ef48:	059a      	lsls	r2, r3, #22
 800ef4a:	d402      	bmi.n	800ef52 <_vfiprintf_r+0x202>
 800ef4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef4e:	f7fe f99b 	bl	800d288 <__retarget_lock_release_recursive>
 800ef52:	89ab      	ldrh	r3, [r5, #12]
 800ef54:	065b      	lsls	r3, r3, #25
 800ef56:	f53f af1d 	bmi.w	800ed94 <_vfiprintf_r+0x44>
 800ef5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef5c:	e71c      	b.n	800ed98 <_vfiprintf_r+0x48>
 800ef5e:	ab03      	add	r3, sp, #12
 800ef60:	9300      	str	r3, [sp, #0]
 800ef62:	462a      	mov	r2, r5
 800ef64:	4b05      	ldr	r3, [pc, #20]	; (800ef7c <_vfiprintf_r+0x22c>)
 800ef66:	a904      	add	r1, sp, #16
 800ef68:	4630      	mov	r0, r6
 800ef6a:	f7fd fe79 	bl	800cc60 <_printf_i>
 800ef6e:	e7e4      	b.n	800ef3a <_vfiprintf_r+0x1ea>
 800ef70:	0800f4d4 	.word	0x0800f4d4
 800ef74:	0800f4de 	.word	0x0800f4de
 800ef78:	0800c751 	.word	0x0800c751
 800ef7c:	0800ed2d 	.word	0x0800ed2d
 800ef80:	0800f4da 	.word	0x0800f4da

0800ef84 <__swbuf_r>:
 800ef84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef86:	460e      	mov	r6, r1
 800ef88:	4614      	mov	r4, r2
 800ef8a:	4605      	mov	r5, r0
 800ef8c:	b118      	cbz	r0, 800ef96 <__swbuf_r+0x12>
 800ef8e:	6a03      	ldr	r3, [r0, #32]
 800ef90:	b90b      	cbnz	r3, 800ef96 <__swbuf_r+0x12>
 800ef92:	f7fe f813 	bl	800cfbc <__sinit>
 800ef96:	69a3      	ldr	r3, [r4, #24]
 800ef98:	60a3      	str	r3, [r4, #8]
 800ef9a:	89a3      	ldrh	r3, [r4, #12]
 800ef9c:	071a      	lsls	r2, r3, #28
 800ef9e:	d525      	bpl.n	800efec <__swbuf_r+0x68>
 800efa0:	6923      	ldr	r3, [r4, #16]
 800efa2:	b31b      	cbz	r3, 800efec <__swbuf_r+0x68>
 800efa4:	6823      	ldr	r3, [r4, #0]
 800efa6:	6922      	ldr	r2, [r4, #16]
 800efa8:	1a98      	subs	r0, r3, r2
 800efaa:	6963      	ldr	r3, [r4, #20]
 800efac:	b2f6      	uxtb	r6, r6
 800efae:	4283      	cmp	r3, r0
 800efb0:	4637      	mov	r7, r6
 800efb2:	dc04      	bgt.n	800efbe <__swbuf_r+0x3a>
 800efb4:	4621      	mov	r1, r4
 800efb6:	4628      	mov	r0, r5
 800efb8:	f7ff fdb8 	bl	800eb2c <_fflush_r>
 800efbc:	b9e0      	cbnz	r0, 800eff8 <__swbuf_r+0x74>
 800efbe:	68a3      	ldr	r3, [r4, #8]
 800efc0:	3b01      	subs	r3, #1
 800efc2:	60a3      	str	r3, [r4, #8]
 800efc4:	6823      	ldr	r3, [r4, #0]
 800efc6:	1c5a      	adds	r2, r3, #1
 800efc8:	6022      	str	r2, [r4, #0]
 800efca:	701e      	strb	r6, [r3, #0]
 800efcc:	6962      	ldr	r2, [r4, #20]
 800efce:	1c43      	adds	r3, r0, #1
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d004      	beq.n	800efde <__swbuf_r+0x5a>
 800efd4:	89a3      	ldrh	r3, [r4, #12]
 800efd6:	07db      	lsls	r3, r3, #31
 800efd8:	d506      	bpl.n	800efe8 <__swbuf_r+0x64>
 800efda:	2e0a      	cmp	r6, #10
 800efdc:	d104      	bne.n	800efe8 <__swbuf_r+0x64>
 800efde:	4621      	mov	r1, r4
 800efe0:	4628      	mov	r0, r5
 800efe2:	f7ff fda3 	bl	800eb2c <_fflush_r>
 800efe6:	b938      	cbnz	r0, 800eff8 <__swbuf_r+0x74>
 800efe8:	4638      	mov	r0, r7
 800efea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efec:	4621      	mov	r1, r4
 800efee:	4628      	mov	r0, r5
 800eff0:	f000 f806 	bl	800f000 <__swsetup_r>
 800eff4:	2800      	cmp	r0, #0
 800eff6:	d0d5      	beq.n	800efa4 <__swbuf_r+0x20>
 800eff8:	f04f 37ff 	mov.w	r7, #4294967295
 800effc:	e7f4      	b.n	800efe8 <__swbuf_r+0x64>
	...

0800f000 <__swsetup_r>:
 800f000:	b538      	push	{r3, r4, r5, lr}
 800f002:	4b2a      	ldr	r3, [pc, #168]	; (800f0ac <__swsetup_r+0xac>)
 800f004:	4605      	mov	r5, r0
 800f006:	6818      	ldr	r0, [r3, #0]
 800f008:	460c      	mov	r4, r1
 800f00a:	b118      	cbz	r0, 800f014 <__swsetup_r+0x14>
 800f00c:	6a03      	ldr	r3, [r0, #32]
 800f00e:	b90b      	cbnz	r3, 800f014 <__swsetup_r+0x14>
 800f010:	f7fd ffd4 	bl	800cfbc <__sinit>
 800f014:	89a3      	ldrh	r3, [r4, #12]
 800f016:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f01a:	0718      	lsls	r0, r3, #28
 800f01c:	d422      	bmi.n	800f064 <__swsetup_r+0x64>
 800f01e:	06d9      	lsls	r1, r3, #27
 800f020:	d407      	bmi.n	800f032 <__swsetup_r+0x32>
 800f022:	2309      	movs	r3, #9
 800f024:	602b      	str	r3, [r5, #0]
 800f026:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f02a:	81a3      	strh	r3, [r4, #12]
 800f02c:	f04f 30ff 	mov.w	r0, #4294967295
 800f030:	e034      	b.n	800f09c <__swsetup_r+0x9c>
 800f032:	0758      	lsls	r0, r3, #29
 800f034:	d512      	bpl.n	800f05c <__swsetup_r+0x5c>
 800f036:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f038:	b141      	cbz	r1, 800f04c <__swsetup_r+0x4c>
 800f03a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f03e:	4299      	cmp	r1, r3
 800f040:	d002      	beq.n	800f048 <__swsetup_r+0x48>
 800f042:	4628      	mov	r0, r5
 800f044:	f7fe ff18 	bl	800de78 <_free_r>
 800f048:	2300      	movs	r3, #0
 800f04a:	6363      	str	r3, [r4, #52]	; 0x34
 800f04c:	89a3      	ldrh	r3, [r4, #12]
 800f04e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f052:	81a3      	strh	r3, [r4, #12]
 800f054:	2300      	movs	r3, #0
 800f056:	6063      	str	r3, [r4, #4]
 800f058:	6923      	ldr	r3, [r4, #16]
 800f05a:	6023      	str	r3, [r4, #0]
 800f05c:	89a3      	ldrh	r3, [r4, #12]
 800f05e:	f043 0308 	orr.w	r3, r3, #8
 800f062:	81a3      	strh	r3, [r4, #12]
 800f064:	6923      	ldr	r3, [r4, #16]
 800f066:	b94b      	cbnz	r3, 800f07c <__swsetup_r+0x7c>
 800f068:	89a3      	ldrh	r3, [r4, #12]
 800f06a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f06e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f072:	d003      	beq.n	800f07c <__swsetup_r+0x7c>
 800f074:	4621      	mov	r1, r4
 800f076:	4628      	mov	r0, r5
 800f078:	f000 f884 	bl	800f184 <__smakebuf_r>
 800f07c:	89a0      	ldrh	r0, [r4, #12]
 800f07e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f082:	f010 0301 	ands.w	r3, r0, #1
 800f086:	d00a      	beq.n	800f09e <__swsetup_r+0x9e>
 800f088:	2300      	movs	r3, #0
 800f08a:	60a3      	str	r3, [r4, #8]
 800f08c:	6963      	ldr	r3, [r4, #20]
 800f08e:	425b      	negs	r3, r3
 800f090:	61a3      	str	r3, [r4, #24]
 800f092:	6923      	ldr	r3, [r4, #16]
 800f094:	b943      	cbnz	r3, 800f0a8 <__swsetup_r+0xa8>
 800f096:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f09a:	d1c4      	bne.n	800f026 <__swsetup_r+0x26>
 800f09c:	bd38      	pop	{r3, r4, r5, pc}
 800f09e:	0781      	lsls	r1, r0, #30
 800f0a0:	bf58      	it	pl
 800f0a2:	6963      	ldrpl	r3, [r4, #20]
 800f0a4:	60a3      	str	r3, [r4, #8]
 800f0a6:	e7f4      	b.n	800f092 <__swsetup_r+0x92>
 800f0a8:	2000      	movs	r0, #0
 800f0aa:	e7f7      	b.n	800f09c <__swsetup_r+0x9c>
 800f0ac:	24000068 	.word	0x24000068

0800f0b0 <_raise_r>:
 800f0b0:	291f      	cmp	r1, #31
 800f0b2:	b538      	push	{r3, r4, r5, lr}
 800f0b4:	4604      	mov	r4, r0
 800f0b6:	460d      	mov	r5, r1
 800f0b8:	d904      	bls.n	800f0c4 <_raise_r+0x14>
 800f0ba:	2316      	movs	r3, #22
 800f0bc:	6003      	str	r3, [r0, #0]
 800f0be:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c2:	bd38      	pop	{r3, r4, r5, pc}
 800f0c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f0c6:	b112      	cbz	r2, 800f0ce <_raise_r+0x1e>
 800f0c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f0cc:	b94b      	cbnz	r3, 800f0e2 <_raise_r+0x32>
 800f0ce:	4620      	mov	r0, r4
 800f0d0:	f000 f830 	bl	800f134 <_getpid_r>
 800f0d4:	462a      	mov	r2, r5
 800f0d6:	4601      	mov	r1, r0
 800f0d8:	4620      	mov	r0, r4
 800f0da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f0de:	f000 b817 	b.w	800f110 <_kill_r>
 800f0e2:	2b01      	cmp	r3, #1
 800f0e4:	d00a      	beq.n	800f0fc <_raise_r+0x4c>
 800f0e6:	1c59      	adds	r1, r3, #1
 800f0e8:	d103      	bne.n	800f0f2 <_raise_r+0x42>
 800f0ea:	2316      	movs	r3, #22
 800f0ec:	6003      	str	r3, [r0, #0]
 800f0ee:	2001      	movs	r0, #1
 800f0f0:	e7e7      	b.n	800f0c2 <_raise_r+0x12>
 800f0f2:	2400      	movs	r4, #0
 800f0f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f0f8:	4628      	mov	r0, r5
 800f0fa:	4798      	blx	r3
 800f0fc:	2000      	movs	r0, #0
 800f0fe:	e7e0      	b.n	800f0c2 <_raise_r+0x12>

0800f100 <raise>:
 800f100:	4b02      	ldr	r3, [pc, #8]	; (800f10c <raise+0xc>)
 800f102:	4601      	mov	r1, r0
 800f104:	6818      	ldr	r0, [r3, #0]
 800f106:	f7ff bfd3 	b.w	800f0b0 <_raise_r>
 800f10a:	bf00      	nop
 800f10c:	24000068 	.word	0x24000068

0800f110 <_kill_r>:
 800f110:	b538      	push	{r3, r4, r5, lr}
 800f112:	4d07      	ldr	r5, [pc, #28]	; (800f130 <_kill_r+0x20>)
 800f114:	2300      	movs	r3, #0
 800f116:	4604      	mov	r4, r0
 800f118:	4608      	mov	r0, r1
 800f11a:	4611      	mov	r1, r2
 800f11c:	602b      	str	r3, [r5, #0]
 800f11e:	f7f2 fa85 	bl	800162c <_kill>
 800f122:	1c43      	adds	r3, r0, #1
 800f124:	d102      	bne.n	800f12c <_kill_r+0x1c>
 800f126:	682b      	ldr	r3, [r5, #0]
 800f128:	b103      	cbz	r3, 800f12c <_kill_r+0x1c>
 800f12a:	6023      	str	r3, [r4, #0]
 800f12c:	bd38      	pop	{r3, r4, r5, pc}
 800f12e:	bf00      	nop
 800f130:	24000be8 	.word	0x24000be8

0800f134 <_getpid_r>:
 800f134:	f7f2 ba72 	b.w	800161c <_getpid>

0800f138 <__swhatbuf_r>:
 800f138:	b570      	push	{r4, r5, r6, lr}
 800f13a:	460c      	mov	r4, r1
 800f13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f140:	2900      	cmp	r1, #0
 800f142:	b096      	sub	sp, #88	; 0x58
 800f144:	4615      	mov	r5, r2
 800f146:	461e      	mov	r6, r3
 800f148:	da0d      	bge.n	800f166 <__swhatbuf_r+0x2e>
 800f14a:	89a3      	ldrh	r3, [r4, #12]
 800f14c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f150:	f04f 0100 	mov.w	r1, #0
 800f154:	bf0c      	ite	eq
 800f156:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f15a:	2340      	movne	r3, #64	; 0x40
 800f15c:	2000      	movs	r0, #0
 800f15e:	6031      	str	r1, [r6, #0]
 800f160:	602b      	str	r3, [r5, #0]
 800f162:	b016      	add	sp, #88	; 0x58
 800f164:	bd70      	pop	{r4, r5, r6, pc}
 800f166:	466a      	mov	r2, sp
 800f168:	f000 f848 	bl	800f1fc <_fstat_r>
 800f16c:	2800      	cmp	r0, #0
 800f16e:	dbec      	blt.n	800f14a <__swhatbuf_r+0x12>
 800f170:	9901      	ldr	r1, [sp, #4]
 800f172:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f176:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f17a:	4259      	negs	r1, r3
 800f17c:	4159      	adcs	r1, r3
 800f17e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f182:	e7eb      	b.n	800f15c <__swhatbuf_r+0x24>

0800f184 <__smakebuf_r>:
 800f184:	898b      	ldrh	r3, [r1, #12]
 800f186:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f188:	079d      	lsls	r5, r3, #30
 800f18a:	4606      	mov	r6, r0
 800f18c:	460c      	mov	r4, r1
 800f18e:	d507      	bpl.n	800f1a0 <__smakebuf_r+0x1c>
 800f190:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f194:	6023      	str	r3, [r4, #0]
 800f196:	6123      	str	r3, [r4, #16]
 800f198:	2301      	movs	r3, #1
 800f19a:	6163      	str	r3, [r4, #20]
 800f19c:	b002      	add	sp, #8
 800f19e:	bd70      	pop	{r4, r5, r6, pc}
 800f1a0:	ab01      	add	r3, sp, #4
 800f1a2:	466a      	mov	r2, sp
 800f1a4:	f7ff ffc8 	bl	800f138 <__swhatbuf_r>
 800f1a8:	9900      	ldr	r1, [sp, #0]
 800f1aa:	4605      	mov	r5, r0
 800f1ac:	4630      	mov	r0, r6
 800f1ae:	f7fe fed7 	bl	800df60 <_malloc_r>
 800f1b2:	b948      	cbnz	r0, 800f1c8 <__smakebuf_r+0x44>
 800f1b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1b8:	059a      	lsls	r2, r3, #22
 800f1ba:	d4ef      	bmi.n	800f19c <__smakebuf_r+0x18>
 800f1bc:	f023 0303 	bic.w	r3, r3, #3
 800f1c0:	f043 0302 	orr.w	r3, r3, #2
 800f1c4:	81a3      	strh	r3, [r4, #12]
 800f1c6:	e7e3      	b.n	800f190 <__smakebuf_r+0xc>
 800f1c8:	89a3      	ldrh	r3, [r4, #12]
 800f1ca:	6020      	str	r0, [r4, #0]
 800f1cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1d0:	81a3      	strh	r3, [r4, #12]
 800f1d2:	9b00      	ldr	r3, [sp, #0]
 800f1d4:	6163      	str	r3, [r4, #20]
 800f1d6:	9b01      	ldr	r3, [sp, #4]
 800f1d8:	6120      	str	r0, [r4, #16]
 800f1da:	b15b      	cbz	r3, 800f1f4 <__smakebuf_r+0x70>
 800f1dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1e0:	4630      	mov	r0, r6
 800f1e2:	f000 f81d 	bl	800f220 <_isatty_r>
 800f1e6:	b128      	cbz	r0, 800f1f4 <__smakebuf_r+0x70>
 800f1e8:	89a3      	ldrh	r3, [r4, #12]
 800f1ea:	f023 0303 	bic.w	r3, r3, #3
 800f1ee:	f043 0301 	orr.w	r3, r3, #1
 800f1f2:	81a3      	strh	r3, [r4, #12]
 800f1f4:	89a3      	ldrh	r3, [r4, #12]
 800f1f6:	431d      	orrs	r5, r3
 800f1f8:	81a5      	strh	r5, [r4, #12]
 800f1fa:	e7cf      	b.n	800f19c <__smakebuf_r+0x18>

0800f1fc <_fstat_r>:
 800f1fc:	b538      	push	{r3, r4, r5, lr}
 800f1fe:	4d07      	ldr	r5, [pc, #28]	; (800f21c <_fstat_r+0x20>)
 800f200:	2300      	movs	r3, #0
 800f202:	4604      	mov	r4, r0
 800f204:	4608      	mov	r0, r1
 800f206:	4611      	mov	r1, r2
 800f208:	602b      	str	r3, [r5, #0]
 800f20a:	f7f2 fa6e 	bl	80016ea <_fstat>
 800f20e:	1c43      	adds	r3, r0, #1
 800f210:	d102      	bne.n	800f218 <_fstat_r+0x1c>
 800f212:	682b      	ldr	r3, [r5, #0]
 800f214:	b103      	cbz	r3, 800f218 <_fstat_r+0x1c>
 800f216:	6023      	str	r3, [r4, #0]
 800f218:	bd38      	pop	{r3, r4, r5, pc}
 800f21a:	bf00      	nop
 800f21c:	24000be8 	.word	0x24000be8

0800f220 <_isatty_r>:
 800f220:	b538      	push	{r3, r4, r5, lr}
 800f222:	4d06      	ldr	r5, [pc, #24]	; (800f23c <_isatty_r+0x1c>)
 800f224:	2300      	movs	r3, #0
 800f226:	4604      	mov	r4, r0
 800f228:	4608      	mov	r0, r1
 800f22a:	602b      	str	r3, [r5, #0]
 800f22c:	f7f2 fa6d 	bl	800170a <_isatty>
 800f230:	1c43      	adds	r3, r0, #1
 800f232:	d102      	bne.n	800f23a <_isatty_r+0x1a>
 800f234:	682b      	ldr	r3, [r5, #0]
 800f236:	b103      	cbz	r3, 800f23a <_isatty_r+0x1a>
 800f238:	6023      	str	r3, [r4, #0]
 800f23a:	bd38      	pop	{r3, r4, r5, pc}
 800f23c:	24000be8 	.word	0x24000be8

0800f240 <_init>:
 800f240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f242:	bf00      	nop
 800f244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f246:	bc08      	pop	{r3}
 800f248:	469e      	mov	lr, r3
 800f24a:	4770      	bx	lr

0800f24c <_fini>:
 800f24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f24e:	bf00      	nop
 800f250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f252:	bc08      	pop	{r3}
 800f254:	469e      	mov	lr, r3
 800f256:	4770      	bx	lr
